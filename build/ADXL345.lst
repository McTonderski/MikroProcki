ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"ADXL345.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.constrain,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	constrain:
  26              	.LVL0:
  27              	.LFB155:
  28              		.file 1 "Src/ADXL345.c"
   1:Src/ADXL345.c **** /*
   2:Src/ADXL345.c ****  * ADXL345.c
   3:Src/ADXL345.c ****  *
   4:Src/ADXL345.c ****  *  Created on: Feb 15, 2020
   5:Src/ADXL345.c ****  *      Author: SparkFun, Rewritten by Daniel MÃ¥rtensson
   6:Src/ADXL345.c ****  */
   7:Src/ADXL345.c **** 
   8:Src/ADXL345.c **** 
   9:Src/ADXL345.c **** #include "ADXL345.h"
  10:Src/ADXL345.c **** 
  11:Src/ADXL345.c **** // Private functions
  12:Src/ADXL345.c **** static void writeTo(ADXL345_SPI_I2C* adxl345, uint8_t address, uint8_t val);
  13:Src/ADXL345.c **** static void writeToI2C(ADXL345_SPI_I2C* adxl345, uint8_t address, uint8_t val);
  14:Src/ADXL345.c **** static void writeToSPI(ADXL345_SPI_I2C* adxl345, uint8_t address, uint8_t val);
  15:Src/ADXL345.c **** static void readFrom(ADXL345_SPI_I2C* adxl345, uint8_t address, int num, uint8_t buff[]);
  16:Src/ADXL345.c **** static void readFromI2C(ADXL345_SPI_I2C* adxl345, uint8_t address, int num, uint8_t buff[]);
  17:Src/ADXL345.c **** static void readFromSPI(ADXL345_SPI_I2C* adxl345, uint8_t address, int num, uint8_t buff[]);
  18:Src/ADXL345.c **** static void setRegisterBit(ADXL345_SPI_I2C* adxl345, uint8_t regAdress, int bitPos, bool state);
  19:Src/ADXL345.c **** static bool getRegisterBit(ADXL345_SPI_I2C* adxl345, uint8_t regAdress, int bitPos);
  20:Src/ADXL345.c **** static void setRegisterBit(ADXL345_SPI_I2C* adxl345, uint8_t regAdress, int bitPos, bool state) ;
  21:Src/ADXL345.c **** static bool getRegisterBit(ADXL345_SPI_I2C* adxl345 , uint8_t regAdress, int bitPos);
  22:Src/ADXL345.c **** static int constrain(ADXL345_SPI_I2C* adxl345, int tapThreshold, int lower, int upper);
  23:Src/ADXL345.c **** 
  24:Src/ADXL345.c **** 
  25:Src/ADXL345.c **** #define ADXL345_TO_READ (6)	// Number of Bytes Read - Two Bytes Per Axis
  26:Src/ADXL345.c **** 
  27:Src/ADXL345.c **** void ADXL345_I2C(ADXL345_SPI_I2C* adxl345, I2C_HandleTypeDef* hi2c, uint8_t address) {
  28:Src/ADXL345.c **** 	adxl345->status = ADXL345_OK;
  29:Src/ADXL345.c **** 	adxl345->error_code = ADXL345_NO_ERROR;
  30:Src/ADXL345.c **** 	adxl345->hi2c = hi2c;
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 2


  31:Src/ADXL345.c **** 	adxl345->ADXL345_DEVICE = address << 1; // Device Address for ADXL345 - Important with << 1 for se
  32:Src/ADXL345.c **** 
  33:Src/ADXL345.c **** 	adxl345->gains[0] = 0.00376390;		// Original gain 0.00376390
  34:Src/ADXL345.c **** 	adxl345->gains[1] = 0.00376009;		// Original gain 0.00376009
  35:Src/ADXL345.c **** 	adxl345->gains[2] = 0.00349265;		// Original gain 0.00349265
  36:Src/ADXL345.c **** 	adxl345->I2C = true;
  37:Src/ADXL345.c **** 
  38:Src/ADXL345.c **** 	// Check if we have trouble with I2C connection
  39:Src/ADXL345.c **** 	if (HAL_I2C_IsDeviceReady(adxl345->hi2c, adxl345->ADXL345_DEVICE, 10, 10) != HAL_OK)
  40:Src/ADXL345.c **** 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // This MUST have GPIO PA5 ready to use - ERR
  41:Src/ADXL345.c **** }
  42:Src/ADXL345.c **** 
  43:Src/ADXL345.c **** /*
  44:Src/ADXL345.c ****  * Use SPI:
  45:Src/ADXL345.c ****  * CPOL = High
  46:Src/ADXL345.c ****  * Prescaler = 64
  47:Src/ADXL345.c ****  * CPHA = 2 Edge
  48:Src/ADXL345.c ****  * Data size = 8 bit
  49:Src/ADXL345.c ****  * First bit = MSB
  50:Src/ADXL345.c ****  */
  51:Src/ADXL345.c **** void ADXL345_SPI(ADXL345_SPI_I2C* adxl345, SPI_HandleTypeDef* hspi, GPIO_TypeDef* CS_PORT, uint16_t
  52:Src/ADXL345.c **** 	adxl345->status = ADXL345_OK;
  53:Src/ADXL345.c **** 	adxl345->error_code = ADXL345_NO_ERROR;
  54:Src/ADXL345.c **** 	adxl345->hspi = hspi;
  55:Src/ADXL345.c **** 
  56:Src/ADXL345.c **** 	adxl345->gains[0] = 0.00376390;
  57:Src/ADXL345.c **** 	adxl345->gains[1] = 0.00376009;
  58:Src/ADXL345.c **** 	adxl345->gains[2] = 0.00349265;
  59:Src/ADXL345.c **** 	adxl345->CS_PIN = CS_PIN;
  60:Src/ADXL345.c **** 	adxl345->CS_PORT = CS_PORT;
  61:Src/ADXL345.c **** 	adxl345->I2C = false;
  62:Src/ADXL345.c **** 
  63:Src/ADXL345.c **** 	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
  64:Src/ADXL345.c **** }
  65:Src/ADXL345.c **** 
  66:Src/ADXL345.c **** void ADXL345powerOn(ADXL345_SPI_I2C* adxl345) {
  67:Src/ADXL345.c **** 
  68:Src/ADXL345.c **** 	//ADXL345 TURN ON
  69:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_POWER_CTL, 0);		// Wakeup
  70:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_POWER_CTL, 16);	// Auto_Sleep
  71:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_POWER_CTL, 8);		// Measure
  72:Src/ADXL345.c **** }
  73:Src/ADXL345.c **** 
  74:Src/ADXL345.c **** 
  75:Src/ADXL345.c **** /*********************** READING ACCELERATION ***********************/
  76:Src/ADXL345.c **** /*    Reads Acceleration into Three Variables:  x, y and z          */
  77:Src/ADXL345.c **** 
  78:Src/ADXL345.c **** void ADXL345readAccel_xyz(ADXL345_SPI_I2C* adxl345, int *xyz){
  79:Src/ADXL345.c **** 	ADXL345readAccel_x_y_z(adxl345, xyz, xyz + 1, xyz + 2);
  80:Src/ADXL345.c **** }
  81:Src/ADXL345.c **** 
  82:Src/ADXL345.c **** void ADXL345readAccel_x_y_z(ADXL345_SPI_I2C* adxl345, int *x, int *y, int *z) {
  83:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_DATAX0, ADXL345_TO_READ, adxl345->_buff);	// Read Accel Data from ADXL34
  84:Src/ADXL345.c **** 
  85:Src/ADXL345.c **** 	// Each Axis @ All g Ranges: 10 Bit Resolution (2 Bytes)
  86:Src/ADXL345.c **** 	*x = (int16_t)((((int)adxl345->_buff[1]) << 8) | adxl345->_buff[0]);
  87:Src/ADXL345.c **** 	*y = (int16_t)((((int)adxl345->_buff[3]) << 8) | adxl345->_buff[2]);
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 3


  88:Src/ADXL345.c **** 	*z = (int16_t)((((int)adxl345->_buff[5]) << 8) | adxl345->_buff[4]);
  89:Src/ADXL345.c **** 
  90:Src/ADXL345.c **** }
  91:Src/ADXL345.c **** 
  92:Src/ADXL345.c **** void ADXL345get_Gxyz(ADXL345_SPI_I2C* adxl345, float *xyz){
  93:Src/ADXL345.c **** 	int i;
  94:Src/ADXL345.c **** 	int xyz_int[3];
  95:Src/ADXL345.c **** 	ADXL345readAccel_xyz(adxl345, xyz_int);
  96:Src/ADXL345.c **** 	for(i=0; i<3; i++){
  97:Src/ADXL345.c **** 		xyz[i] = xyz_int[i] * adxl345->gains[i];
  98:Src/ADXL345.c **** 	}
  99:Src/ADXL345.c **** }
 100:Src/ADXL345.c **** 
 101:Src/ADXL345.c **** /***************** WRITES VALUE TO ADDRESS REGISTER *****************/
 102:Src/ADXL345.c **** static void writeTo(ADXL345_SPI_I2C* adxl345, uint8_t address, uint8_t val) {
 103:Src/ADXL345.c **** 	if(adxl345->I2C) {
 104:Src/ADXL345.c **** 		writeToI2C(adxl345, address, val);
 105:Src/ADXL345.c **** 	}
 106:Src/ADXL345.c **** 	else {
 107:Src/ADXL345.c **** 		writeToSPI(adxl345, address, val);
 108:Src/ADXL345.c **** 	}
 109:Src/ADXL345.c **** }
 110:Src/ADXL345.c **** 
 111:Src/ADXL345.c **** /************************ READING NUM BYTES *************************/
 112:Src/ADXL345.c **** /*    Reads Num Bytes. Starts from Address Reg to _buff Array        */
 113:Src/ADXL345.c **** static void readFrom(ADXL345_SPI_I2C* adxl345, uint8_t address, int num, uint8_t _buff[]) {
 114:Src/ADXL345.c **** 	if(adxl345->I2C) {
 115:Src/ADXL345.c **** 		readFromI2C(adxl345, address, num, _buff);	// If I2C Communication
 116:Src/ADXL345.c **** 	}
 117:Src/ADXL345.c **** 	else {
 118:Src/ADXL345.c **** 		readFromSPI(adxl345, address, num, _buff);	// If SPI Communication
 119:Src/ADXL345.c **** 	}
 120:Src/ADXL345.c **** }
 121:Src/ADXL345.c **** 
 122:Src/ADXL345.c **** /*************************** WRITE TO I2C ***************************/
 123:Src/ADXL345.c **** /*      Start; Send Register Address; Send Value To Write; End      */
 124:Src/ADXL345.c **** static void writeToI2C(ADXL345_SPI_I2C* adxl345, uint8_t _address, uint8_t _val) {
 125:Src/ADXL345.c **** 	uint8_t pData[2] = {_address, _val};
 126:Src/ADXL345.c **** 	HAL_I2C_Master_Transmit(adxl345->hi2c, adxl345->ADXL345_DEVICE, pData, 2, 10);
 127:Src/ADXL345.c **** }
 128:Src/ADXL345.c **** 
 129:Src/ADXL345.c **** /*************************** READ FROM I2C **************************/
 130:Src/ADXL345.c **** /*                Start; Send Address To Read; End                  */
 131:Src/ADXL345.c **** static void readFromI2C(ADXL345_SPI_I2C* adxl345, uint8_t address, int num, uint8_t _buff[]) {
 132:Src/ADXL345.c **** 	// Send data
 133:Src/ADXL345.c **** 	uint8_t pData[1] = {address};
 134:Src/ADXL345.c **** 	HAL_I2C_Master_Transmit(adxl345->hi2c, adxl345->ADXL345_DEVICE, pData, 1, 10);
 135:Src/ADXL345.c **** 
 136:Src/ADXL345.c **** 	// Get data
 137:Src/ADXL345.c **** 	if(HAL_I2C_Master_Receive(adxl345->hi2c, adxl345->ADXL345_DEVICE, _buff, (uint16_t) num, 10) != HA
 138:Src/ADXL345.c **** 		adxl345->status = ADXL345_ERROR;
 139:Src/ADXL345.c **** 		adxl345->error_code = ADXL345_READ_ERROR;
 140:Src/ADXL345.c **** 	}else{
 141:Src/ADXL345.c **** 		adxl345->status = ADXL345_OK;
 142:Src/ADXL345.c **** 		adxl345->error_code = ADXL345_OK;
 143:Src/ADXL345.c **** 	}
 144:Src/ADXL345.c **** 
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 4


 145:Src/ADXL345.c **** }
 146:Src/ADXL345.c **** 
 147:Src/ADXL345.c **** /************************** WRITE FROM SPI **************************/
 148:Src/ADXL345.c **** /*         Point to Destination; Write Value; Turn Off              */
 149:Src/ADXL345.c **** static void writeToSPI(ADXL345_SPI_I2C* adxl345, uint8_t __reg_address, uint8_t __val) {
 150:Src/ADXL345.c ****   HAL_GPIO_WritePin(adxl345->CS_PORT, adxl345->CS_PIN, GPIO_PIN_RESET);
 151:Src/ADXL345.c ****   uint8_t pData[2];
 152:Src/ADXL345.c ****   pData[0] = __reg_address | 0x40; // multibyte write enabled
 153:Src/ADXL345.c ****   pData[1] = __val;
 154:Src/ADXL345.c ****   HAL_SPI_Transmit(adxl345->hspi, pData, 2, 10);
 155:Src/ADXL345.c ****   HAL_GPIO_WritePin(adxl345->CS_PORT, adxl345->CS_PIN, GPIO_PIN_SET);
 156:Src/ADXL345.c **** }
 157:Src/ADXL345.c **** 
 158:Src/ADXL345.c **** /*************************** READ FROM SPI **************************/
 159:Src/ADXL345.c **** /*                                                                  */
 160:Src/ADXL345.c **** static void readFromSPI(ADXL345_SPI_I2C* adxl345, uint8_t __reg_address, int num, uint8_t _buff[]) 
 161:Src/ADXL345.c ****   // Read: Most Sig Bit of Reg Address Set
 162:Src/ADXL345.c ****   uint8_t _address = 0x80 | __reg_address;
 163:Src/ADXL345.c ****   // If Multi-Byte Read: Bit 6 Set
 164:Src/ADXL345.c ****   if(num > 1) {
 165:Src/ADXL345.c ****   	_address = _address | 0x40;
 166:Src/ADXL345.c ****   }
 167:Src/ADXL345.c ****   // Write
 168:Src/ADXL345.c ****   HAL_GPIO_WritePin(adxl345->CS_PORT, adxl345->CS_PIN, GPIO_PIN_RESET);
 169:Src/ADXL345.c ****   HAL_SPI_Transmit(adxl345->hspi, &_address, 1, 10);
 170:Src/ADXL345.c ****   HAL_SPI_Receive(adxl345->hspi, _buff, (uint16_t) num, 10);
 171:Src/ADXL345.c ****   HAL_GPIO_WritePin(adxl345->CS_PORT, adxl345->CS_PIN, GPIO_PIN_SET);
 172:Src/ADXL345.c **** }
 173:Src/ADXL345.c **** 
 174:Src/ADXL345.c **** /*************************** RANGE SETTING **************************/
 175:Src/ADXL345.c **** /*          ACCEPTABLE VALUES: 2g, 4g, 8g, 16g ~ GET & SET          */
 176:Src/ADXL345.c **** void ADXL345getRangeSetting(ADXL345_SPI_I2C* adxl345, uint8_t* rangeSetting) {
 177:Src/ADXL345.c **** 	uint8_t _b;
 178:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_DATA_FORMAT, 1, &_b);
 179:Src/ADXL345.c **** 	*rangeSetting = _b & 0b00000011;
 180:Src/ADXL345.c **** }
 181:Src/ADXL345.c **** 
 182:Src/ADXL345.c **** void ADXL345setRangeSetting(ADXL345_SPI_I2C* adxl345, int val) {
 183:Src/ADXL345.c **** 	uint8_t _s;
 184:Src/ADXL345.c **** 	uint8_t _b;
 185:Src/ADXL345.c **** 
 186:Src/ADXL345.c **** 	switch (val) {
 187:Src/ADXL345.c **** 		case 2:
 188:Src/ADXL345.c **** 			_s = 0b00000000;
 189:Src/ADXL345.c **** 			break;
 190:Src/ADXL345.c **** 		case 4:
 191:Src/ADXL345.c **** 			_s = 0b00000001;
 192:Src/ADXL345.c **** 			break;
 193:Src/ADXL345.c **** 		case 8:
 194:Src/ADXL345.c **** 			_s = 0b00000010;
 195:Src/ADXL345.c **** 			break;
 196:Src/ADXL345.c **** 		case 16:
 197:Src/ADXL345.c **** 			_s = 0b00000011;
 198:Src/ADXL345.c **** 			break;
 199:Src/ADXL345.c **** 		default:
 200:Src/ADXL345.c **** 			_s = 0b00000000;
 201:Src/ADXL345.c **** 	}
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 5


 202:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_DATA_FORMAT, 1, &_b);
 203:Src/ADXL345.c **** 	_s |= (_b & 0b11101100);
 204:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_DATA_FORMAT, _s);
 205:Src/ADXL345.c **** }
 206:Src/ADXL345.c **** 
 207:Src/ADXL345.c **** /*************************** SELF_TEST BIT **************************/
 208:Src/ADXL345.c **** /*                            ~ GET & SET                           */
 209:Src/ADXL345.c **** bool ADXL345getSelfTestBit(ADXL345_SPI_I2C* adxl345) {
 210:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 7);
 211:Src/ADXL345.c **** }
 212:Src/ADXL345.c **** 
 213:Src/ADXL345.c **** // If Set (1) Self-Test Applied. Electrostatic Force exerted on the sensor
 214:Src/ADXL345.c **** //  causing a shift in the output data.
 215:Src/ADXL345.c **** // If Set (0) Self-Test Disabled.
 216:Src/ADXL345.c **** void ADXL345setSelfTestBit(ADXL345_SPI_I2C* adxl345, bool selfTestBit) {
 217:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 7, selfTestBit);
 218:Src/ADXL345.c **** }
 219:Src/ADXL345.c **** 
 220:Src/ADXL345.c **** /*************************** SPI BIT STATE **************************/
 221:Src/ADXL345.c **** /*                           ~ GET & SET                            */
 222:Src/ADXL345.c **** bool ADXL345getSpiBit(ADXL345_SPI_I2C* adxl345) {
 223:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 6);
 224:Src/ADXL345.c **** }
 225:Src/ADXL345.c **** 
 226:Src/ADXL345.c **** // If Set (1) Puts Device in 3-wire Mode
 227:Src/ADXL345.c **** // If Set (0) Puts Device in 4-wire SPI Mode
 228:Src/ADXL345.c **** void ADXL345setSpiBit(ADXL345_SPI_I2C* adxl345, bool spiBit) {
 229:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 6, spiBit);
 230:Src/ADXL345.c **** }
 231:Src/ADXL345.c **** 
 232:Src/ADXL345.c **** /*********************** INT_INVERT BIT STATE ***********************/
 233:Src/ADXL345.c **** /*                           ~ GET & SET                            */
 234:Src/ADXL345.c **** bool ADXL345getInterruptLevelBit(ADXL345_SPI_I2C* adxl345) {
 235:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 5);
 236:Src/ADXL345.c **** }
 237:Src/ADXL345.c **** 
 238:Src/ADXL345.c **** // If Set (0) Sets the Interrupts to Active HIGH
 239:Src/ADXL345.c **** // If Set (1) Sets the Interrupts to Active LOW
 240:Src/ADXL345.c **** void ADXL345setInterruptLevelBit(ADXL345_SPI_I2C* adxl345, bool interruptLevelBit) {
 241:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 5, interruptLevelBit);
 242:Src/ADXL345.c **** }
 243:Src/ADXL345.c **** 
 244:Src/ADXL345.c **** /************************* FULL_RES BIT STATE ***********************/
 245:Src/ADXL345.c **** /*                           ~ GET & SET                            */
 246:Src/ADXL345.c **** bool ADXL345getFullResBit(ADXL345_SPI_I2C* adxl345) {
 247:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 3);
 248:Src/ADXL345.c **** }
 249:Src/ADXL345.c **** 
 250:Src/ADXL345.c **** // If Set (1) Device is in Full Resolution Mode: Output Resolution Increase with G Range
 251:Src/ADXL345.c **** //  Set by the Range Bits to Maintain a 4mg/LSB Scale Factor
 252:Src/ADXL345.c **** // If Set (0) Device is in 10-bit Mode: Range Bits Determine Maximum G Range
 253:Src/ADXL345.c **** //  And Scale Factor
 254:Src/ADXL345.c **** void ADXL345setFullResBit(ADXL345_SPI_I2C* adxl345, bool fullResBit) {
 255:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 3, fullResBit);
 256:Src/ADXL345.c **** }
 257:Src/ADXL345.c **** 
 258:Src/ADXL345.c **** /*************************** JUSTIFY BIT STATE **************************/
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 6


 259:Src/ADXL345.c **** /*                           ~ GET & SET                            */
 260:Src/ADXL345.c **** bool ADXL345getJustifyBit(ADXL345_SPI_I2C* adxl345) {
 261:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 2);
 262:Src/ADXL345.c **** }
 263:Src/ADXL345.c **** 
 264:Src/ADXL345.c **** // If Set (1) Selects the Left Justified Mode
 265:Src/ADXL345.c **** // If Set (0) Selects Right Justified Mode with Sign Extension
 266:Src/ADXL345.c **** void ADXL345setJustifyBit(ADXL345_SPI_I2C* adxl345, bool justifyBit) {
 267:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 2, justifyBit);
 268:Src/ADXL345.c **** }
 269:Src/ADXL345.c **** 
 270:Src/ADXL345.c **** /*********************** THRESH_TAP BYTE VALUE **********************/
 271:Src/ADXL345.c **** /*                          ~ SET & GET                             */
 272:Src/ADXL345.c **** // Should Set Between 0 and 255
 273:Src/ADXL345.c **** // Scale Factor is 62.5 mg/LSB
 274:Src/ADXL345.c **** // A Value of 0 May Result in Undesirable Behavior
 275:Src/ADXL345.c **** void ADXL345setTapThreshold(ADXL345_SPI_I2C* adxl345, int tapThreshold) {
 276:Src/ADXL345.c **** 	tapThreshold = constrain(adxl345, tapThreshold, 0, 255);
 277:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) tapThreshold;
 278:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_THRESH_TAP, _b);
 279:Src/ADXL345.c **** }
 280:Src/ADXL345.c **** 
 281:Src/ADXL345.c **** static int constrain(ADXL345_SPI_I2C* adxl345, int tapThreshold, int lower, int upper){
  29              		.loc 1 281 87 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 282:Src/ADXL345.c **** 	if(tapThreshold > upper)
  34              		.loc 1 282 2 view .LVU1
  35              		.loc 1 282 4 is_stmt 0 view .LVU2
  36 0000 9942     		cmp	r1, r3
  37 0002 03DC     		bgt	.L3
 283:Src/ADXL345.c **** 		return upper;
 284:Src/ADXL345.c **** 	else if(tapThreshold < lower)
  38              		.loc 1 284 7 is_stmt 1 view .LVU3
  39              		.loc 1 284 9 is_stmt 0 view .LVU4
  40 0004 9142     		cmp	r1, r2
  41 0006 03DA     		bge	.L4
 285:Src/ADXL345.c **** 		return lower;
  42              		.loc 1 285 10 view .LVU5
  43 0008 1046     		mov	r0, r2
  44              	.LVL1:
  45              		.loc 1 285 10 view .LVU6
  46 000a 7047     		bx	lr
  47              	.LVL2:
  48              	.L3:
 283:Src/ADXL345.c **** 		return upper;
  49              		.loc 1 283 10 view .LVU7
  50 000c 1846     		mov	r0, r3
  51              	.LVL3:
 283:Src/ADXL345.c **** 		return upper;
  52              		.loc 1 283 10 view .LVU8
  53 000e 7047     		bx	lr
  54              	.LVL4:
  55              	.L4:
 286:Src/ADXL345.c **** 	else
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 7


 287:Src/ADXL345.c **** 		return tapThreshold;
  56              		.loc 1 287 10 view .LVU9
  57 0010 0846     		mov	r0, r1
  58              	.LVL5:
 288:Src/ADXL345.c **** }
  59              		.loc 1 288 1 view .LVU10
  60 0012 7047     		bx	lr
  61              		.cfi_endproc
  62              	.LFE155:
  64              		.section	.text.writeToI2C,"ax",%progbits
  65              		.align	1
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv4-sp-d16
  71              	writeToI2C:
  72              	.LVL6:
  73              	.LFB138:
 124:Src/ADXL345.c **** 	uint8_t pData[2] = {_address, _val};
  74              		.loc 1 124 82 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 0, uses_anonymous_args = 0
 124:Src/ADXL345.c **** 	uint8_t pData[2] = {_address, _val};
  78              		.loc 1 124 82 is_stmt 0 view .LVU12
  79 0000 00B5     		push	{lr}
  80              	.LCFI0:
  81              		.cfi_def_cfa_offset 4
  82              		.cfi_offset 14, -4
  83 0002 85B0     		sub	sp, sp, #20
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 24
 125:Src/ADXL345.c **** 	HAL_I2C_Master_Transmit(adxl345->hi2c, adxl345->ADXL345_DEVICE, pData, 2, 10);
  86              		.loc 1 125 2 is_stmt 1 view .LVU13
 125:Src/ADXL345.c **** 	HAL_I2C_Master_Transmit(adxl345->hi2c, adxl345->ADXL345_DEVICE, pData, 2, 10);
  87              		.loc 1 125 10 is_stmt 0 view .LVU14
  88 0004 8DF80C10 		strb	r1, [sp, #12]
  89 0008 8DF80D20 		strb	r2, [sp, #13]
 126:Src/ADXL345.c **** }
  90              		.loc 1 126 2 is_stmt 1 view .LVU15
  91 000c 0A23     		movs	r3, #10
  92 000e 0093     		str	r3, [sp]
  93 0010 0223     		movs	r3, #2
  94 0012 03AA     		add	r2, sp, #12
  95              	.LVL7:
 126:Src/ADXL345.c **** }
  96              		.loc 1 126 2 is_stmt 0 view .LVU16
  97 0014 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
  98              	.LVL8:
 126:Src/ADXL345.c **** }
  99              		.loc 1 126 2 view .LVU17
 100 0016 406A     		ldr	r0, [r0, #36]
 101              	.LVL9:
 126:Src/ADXL345.c **** }
 102              		.loc 1 126 2 view .LVU18
 103 0018 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 104              	.LVL10:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 8


 127:Src/ADXL345.c **** 
 105              		.loc 1 127 1 view .LVU19
 106 001c 05B0     		add	sp, sp, #20
 107              	.LCFI2:
 108              		.cfi_def_cfa_offset 4
 109              		@ sp needed
 110 001e 5DF804FB 		ldr	pc, [sp], #4
 111              		.cfi_endproc
 112              	.LFE138:
 114              		.section	.text.writeToSPI,"ax",%progbits
 115              		.align	1
 116              		.syntax unified
 117              		.thumb
 118              		.thumb_func
 119              		.fpu fpv4-sp-d16
 121              	writeToSPI:
 122              	.LVL11:
 123              	.LFB140:
 149:Src/ADXL345.c ****   HAL_GPIO_WritePin(adxl345->CS_PORT, adxl345->CS_PIN, GPIO_PIN_RESET);
 124              		.loc 1 149 88 is_stmt 1 view -0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 8
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 149:Src/ADXL345.c ****   HAL_GPIO_WritePin(adxl345->CS_PORT, adxl345->CS_PIN, GPIO_PIN_RESET);
 128              		.loc 1 149 88 is_stmt 0 view .LVU21
 129 0000 70B5     		push	{r4, r5, r6, lr}
 130              	.LCFI3:
 131              		.cfi_def_cfa_offset 16
 132              		.cfi_offset 4, -16
 133              		.cfi_offset 5, -12
 134              		.cfi_offset 6, -8
 135              		.cfi_offset 14, -4
 136 0002 82B0     		sub	sp, sp, #8
 137              	.LCFI4:
 138              		.cfi_def_cfa_offset 24
 139 0004 0446     		mov	r4, r0
 140 0006 0D46     		mov	r5, r1
 141 0008 1646     		mov	r6, r2
 150:Src/ADXL345.c ****   uint8_t pData[2];
 142              		.loc 1 150 3 is_stmt 1 view .LVU22
 143 000a 0022     		movs	r2, #0
 144              	.LVL12:
 150:Src/ADXL345.c ****   uint8_t pData[2];
 145              		.loc 1 150 3 is_stmt 0 view .LVU23
 146 000c 818D     		ldrh	r1, [r0, #44]
 147              	.LVL13:
 150:Src/ADXL345.c ****   uint8_t pData[2];
 148              		.loc 1 150 3 view .LVU24
 149 000e 806A     		ldr	r0, [r0, #40]
 150              	.LVL14:
 150:Src/ADXL345.c ****   uint8_t pData[2];
 151              		.loc 1 150 3 view .LVU25
 152 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 153              	.LVL15:
 151:Src/ADXL345.c ****   pData[0] = __reg_address | 0x40; // multibyte write enabled
 154              		.loc 1 151 3 is_stmt 1 view .LVU26
 152:Src/ADXL345.c ****   pData[1] = __val;
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 9


 155              		.loc 1 152 3 view .LVU27
 152:Src/ADXL345.c ****   pData[1] = __val;
 156              		.loc 1 152 12 is_stmt 0 view .LVU28
 157 0014 45F04005 		orr	r5, r5, #64
 158 0018 8DF80450 		strb	r5, [sp, #4]
 153:Src/ADXL345.c ****   HAL_SPI_Transmit(adxl345->hspi, pData, 2, 10);
 159              		.loc 1 153 3 is_stmt 1 view .LVU29
 153:Src/ADXL345.c ****   HAL_SPI_Transmit(adxl345->hspi, pData, 2, 10);
 160              		.loc 1 153 12 is_stmt 0 view .LVU30
 161 001c 8DF80560 		strb	r6, [sp, #5]
 154:Src/ADXL345.c ****   HAL_GPIO_WritePin(adxl345->CS_PORT, adxl345->CS_PIN, GPIO_PIN_SET);
 162              		.loc 1 154 3 is_stmt 1 view .LVU31
 163 0020 0A23     		movs	r3, #10
 164 0022 0222     		movs	r2, #2
 165 0024 01A9     		add	r1, sp, #4
 166 0026 206A     		ldr	r0, [r4, #32]
 167 0028 FFF7FEFF 		bl	HAL_SPI_Transmit
 168              	.LVL16:
 155:Src/ADXL345.c **** }
 169              		.loc 1 155 3 view .LVU32
 170 002c 0122     		movs	r2, #1
 171 002e A18D     		ldrh	r1, [r4, #44]
 172 0030 A06A     		ldr	r0, [r4, #40]
 173 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 174              	.LVL17:
 156:Src/ADXL345.c **** 
 175              		.loc 1 156 1 is_stmt 0 view .LVU33
 176 0036 02B0     		add	sp, sp, #8
 177              	.LCFI5:
 178              		.cfi_def_cfa_offset 16
 179              		@ sp needed
 180 0038 70BD     		pop	{r4, r5, r6, pc}
 156:Src/ADXL345.c **** 
 181              		.loc 1 156 1 view .LVU34
 182              		.cfi_endproc
 183              	.LFE140:
 185              		.section	.text.writeTo,"ax",%progbits
 186              		.align	1
 187              		.syntax unified
 188              		.thumb
 189              		.thumb_func
 190              		.fpu fpv4-sp-d16
 192              	writeTo:
 193              	.LVL18:
 194              	.LFB136:
 102:Src/ADXL345.c **** 	if(adxl345->I2C) {
 195              		.loc 1 102 77 is_stmt 1 view -0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 102:Src/ADXL345.c **** 	if(adxl345->I2C) {
 199              		.loc 1 102 77 is_stmt 0 view .LVU36
 200 0000 08B5     		push	{r3, lr}
 201              	.LCFI6:
 202              		.cfi_def_cfa_offset 8
 203              		.cfi_offset 3, -8
 204              		.cfi_offset 14, -4
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 10


 103:Src/ADXL345.c **** 		writeToI2C(adxl345, address, val);
 205              		.loc 1 103 2 is_stmt 1 view .LVU37
 103:Src/ADXL345.c **** 		writeToI2C(adxl345, address, val);
 206              		.loc 1 103 12 is_stmt 0 view .LVU38
 207 0002 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 103:Src/ADXL345.c **** 		writeToI2C(adxl345, address, val);
 208              		.loc 1 103 4 view .LVU39
 209 0004 13B1     		cbz	r3, .L10
 104:Src/ADXL345.c **** 	}
 210              		.loc 1 104 3 is_stmt 1 view .LVU40
 211 0006 FFF7FEFF 		bl	writeToI2C
 212              	.LVL19:
 213              	.L9:
 109:Src/ADXL345.c **** 
 214              		.loc 1 109 1 is_stmt 0 view .LVU41
 215 000a 08BD     		pop	{r3, pc}
 216              	.LVL20:
 217              	.L10:
 107:Src/ADXL345.c **** 	}
 218              		.loc 1 107 3 is_stmt 1 view .LVU42
 219 000c FFF7FEFF 		bl	writeToSPI
 220              	.LVL21:
 109:Src/ADXL345.c **** 
 221              		.loc 1 109 1 is_stmt 0 view .LVU43
 222 0010 FBE7     		b	.L9
 223              		.cfi_endproc
 224              	.LFE136:
 226              		.section	.text.readFromI2C,"ax",%progbits
 227              		.align	1
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 231              		.fpu fpv4-sp-d16
 233              	readFromI2C:
 234              	.LVL22:
 235              	.LFB139:
 131:Src/ADXL345.c **** 	// Send data
 236              		.loc 1 131 94 is_stmt 1 view -0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 8
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 131:Src/ADXL345.c **** 	// Send data
 240              		.loc 1 131 94 is_stmt 0 view .LVU45
 241 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 242              	.LCFI7:
 243              		.cfi_def_cfa_offset 20
 244              		.cfi_offset 4, -20
 245              		.cfi_offset 5, -16
 246              		.cfi_offset 6, -12
 247              		.cfi_offset 7, -8
 248              		.cfi_offset 14, -4
 249 0002 85B0     		sub	sp, sp, #20
 250              	.LCFI8:
 251              		.cfi_def_cfa_offset 40
 252 0004 0446     		mov	r4, r0
 253 0006 1646     		mov	r6, r2
 254 0008 1D46     		mov	r5, r3
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 11


 133:Src/ADXL345.c **** 	HAL_I2C_Master_Transmit(adxl345->hi2c, adxl345->ADXL345_DEVICE, pData, 1, 10);
 255              		.loc 1 133 2 is_stmt 1 view .LVU46
 133:Src/ADXL345.c **** 	HAL_I2C_Master_Transmit(adxl345->hi2c, adxl345->ADXL345_DEVICE, pData, 1, 10);
 256              		.loc 1 133 10 is_stmt 0 view .LVU47
 257 000a 8DF80C10 		strb	r1, [sp, #12]
 134:Src/ADXL345.c **** 
 258              		.loc 1 134 2 is_stmt 1 view .LVU48
 259 000e 0A27     		movs	r7, #10
 260 0010 0097     		str	r7, [sp]
 261 0012 0123     		movs	r3, #1
 262              	.LVL23:
 134:Src/ADXL345.c **** 
 263              		.loc 1 134 2 is_stmt 0 view .LVU49
 264 0014 03AA     		add	r2, sp, #12
 265              	.LVL24:
 134:Src/ADXL345.c **** 
 266              		.loc 1 134 2 view .LVU50
 267 0016 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 268              	.LVL25:
 134:Src/ADXL345.c **** 
 269              		.loc 1 134 2 view .LVU51
 270 0018 406A     		ldr	r0, [r0, #36]
 271              	.LVL26:
 134:Src/ADXL345.c **** 
 272              		.loc 1 134 2 view .LVU52
 273 001a FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 274              	.LVL27:
 137:Src/ADXL345.c **** 		adxl345->status = ADXL345_ERROR;
 275              		.loc 1 137 2 is_stmt 1 view .LVU53
 137:Src/ADXL345.c **** 		adxl345->status = ADXL345_ERROR;
 276              		.loc 1 137 5 is_stmt 0 view .LVU54
 277 001e 0097     		str	r7, [sp]
 278 0020 B3B2     		uxth	r3, r6
 279 0022 2A46     		mov	r2, r5
 280 0024 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 281 0026 606A     		ldr	r0, [r4, #36]
 282 0028 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 283              	.LVL28:
 137:Src/ADXL345.c **** 		adxl345->status = ADXL345_ERROR;
 284              		.loc 1 137 4 view .LVU55
 285 002c 28B1     		cbz	r0, .L14
 138:Src/ADXL345.c **** 		adxl345->error_code = ADXL345_READ_ERROR;
 286              		.loc 1 138 3 is_stmt 1 view .LVU56
 138:Src/ADXL345.c **** 		adxl345->error_code = ADXL345_READ_ERROR;
 287              		.loc 1 138 19 is_stmt 0 view .LVU57
 288 002e 0023     		movs	r3, #0
 289 0030 6370     		strb	r3, [r4, #1]
 139:Src/ADXL345.c **** 	}else{
 290              		.loc 1 139 3 is_stmt 1 view .LVU58
 139:Src/ADXL345.c **** 	}else{
 291              		.loc 1 139 23 is_stmt 0 view .LVU59
 292 0032 0123     		movs	r3, #1
 293 0034 2374     		strb	r3, [r4, #16]
 294              	.L13:
 145:Src/ADXL345.c **** 
 295              		.loc 1 145 1 view .LVU60
 296 0036 05B0     		add	sp, sp, #20
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 12


 297              	.LCFI9:
 298              		.cfi_remember_state
 299              		.cfi_def_cfa_offset 20
 300              		@ sp needed
 301 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 302              	.LVL29:
 303              	.L14:
 304              	.LCFI10:
 305              		.cfi_restore_state
 141:Src/ADXL345.c **** 		adxl345->error_code = ADXL345_OK;
 306              		.loc 1 141 3 is_stmt 1 view .LVU61
 141:Src/ADXL345.c **** 		adxl345->error_code = ADXL345_OK;
 307              		.loc 1 141 19 is_stmt 0 view .LVU62
 308 003a 0123     		movs	r3, #1
 309 003c 6370     		strb	r3, [r4, #1]
 142:Src/ADXL345.c **** 	}
 310              		.loc 1 142 3 is_stmt 1 view .LVU63
 142:Src/ADXL345.c **** 	}
 311              		.loc 1 142 23 is_stmt 0 view .LVU64
 312 003e 2374     		strb	r3, [r4, #16]
 145:Src/ADXL345.c **** 
 313              		.loc 1 145 1 view .LVU65
 314 0040 F9E7     		b	.L13
 315              		.cfi_endproc
 316              	.LFE139:
 318              		.section	.text.readFromSPI,"ax",%progbits
 319              		.align	1
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 323              		.fpu fpv4-sp-d16
 325              	readFromSPI:
 326              	.LVL30:
 327              	.LFB141:
 160:Src/ADXL345.c ****   // Read: Most Sig Bit of Reg Address Set
 328              		.loc 1 160 100 is_stmt 1 view -0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 8
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 160:Src/ADXL345.c ****   // Read: Most Sig Bit of Reg Address Set
 332              		.loc 1 160 100 is_stmt 0 view .LVU67
 333 0000 70B5     		push	{r4, r5, r6, lr}
 334              	.LCFI11:
 335              		.cfi_def_cfa_offset 16
 336              		.cfi_offset 4, -16
 337              		.cfi_offset 5, -12
 338              		.cfi_offset 6, -8
 339              		.cfi_offset 14, -4
 340 0002 82B0     		sub	sp, sp, #8
 341              	.LCFI12:
 342              		.cfi_def_cfa_offset 24
 343 0004 0446     		mov	r4, r0
 344 0006 1546     		mov	r5, r2
 345 0008 1E46     		mov	r6, r3
 162:Src/ADXL345.c ****   // If Multi-Byte Read: Bit 6 Set
 346              		.loc 1 162 3 is_stmt 1 view .LVU68
 162:Src/ADXL345.c ****   // If Multi-Byte Read: Bit 6 Set
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 13


 347              		.loc 1 162 11 is_stmt 0 view .LVU69
 348 000a 41F08000 		orr	r0, r1, #128
 349              	.LVL31:
 162:Src/ADXL345.c ****   // If Multi-Byte Read: Bit 6 Set
 350              		.loc 1 162 11 view .LVU70
 351 000e 8DF80700 		strb	r0, [sp, #7]
 164:Src/ADXL345.c ****   	_address = _address | 0x40;
 352              		.loc 1 164 3 is_stmt 1 view .LVU71
 164:Src/ADXL345.c ****   	_address = _address | 0x40;
 353              		.loc 1 164 5 is_stmt 0 view .LVU72
 354 0012 012A     		cmp	r2, #1
 355 0014 03DD     		ble	.L18
 165:Src/ADXL345.c ****   }
 356              		.loc 1 165 4 is_stmt 1 view .LVU73
 165:Src/ADXL345.c ****   }
 357              		.loc 1 165 13 is_stmt 0 view .LVU74
 358 0016 40F04000 		orr	r0, r0, #64
 359 001a 8DF80700 		strb	r0, [sp, #7]
 360              	.L18:
 168:Src/ADXL345.c ****   HAL_SPI_Transmit(adxl345->hspi, &_address, 1, 10);
 361              		.loc 1 168 3 is_stmt 1 view .LVU75
 362 001e 0022     		movs	r2, #0
 363              	.LVL32:
 168:Src/ADXL345.c ****   HAL_SPI_Transmit(adxl345->hspi, &_address, 1, 10);
 364              		.loc 1 168 3 is_stmt 0 view .LVU76
 365 0020 A18D     		ldrh	r1, [r4, #44]
 366              	.LVL33:
 168:Src/ADXL345.c ****   HAL_SPI_Transmit(adxl345->hspi, &_address, 1, 10);
 367              		.loc 1 168 3 view .LVU77
 368 0022 A06A     		ldr	r0, [r4, #40]
 369 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 370              	.LVL34:
 169:Src/ADXL345.c ****   HAL_SPI_Receive(adxl345->hspi, _buff, (uint16_t) num, 10);
 371              		.loc 1 169 3 is_stmt 1 view .LVU78
 372 0028 0A23     		movs	r3, #10
 373 002a 0122     		movs	r2, #1
 374 002c 0DF10701 		add	r1, sp, #7
 375 0030 206A     		ldr	r0, [r4, #32]
 376 0032 FFF7FEFF 		bl	HAL_SPI_Transmit
 377              	.LVL35:
 170:Src/ADXL345.c ****   HAL_GPIO_WritePin(adxl345->CS_PORT, adxl345->CS_PIN, GPIO_PIN_SET);
 378              		.loc 1 170 3 view .LVU79
 379 0036 0A23     		movs	r3, #10
 380 0038 AAB2     		uxth	r2, r5
 381 003a 3146     		mov	r1, r6
 382 003c 206A     		ldr	r0, [r4, #32]
 383 003e FFF7FEFF 		bl	HAL_SPI_Receive
 384              	.LVL36:
 171:Src/ADXL345.c **** }
 385              		.loc 1 171 3 view .LVU80
 386 0042 0122     		movs	r2, #1
 387 0044 A18D     		ldrh	r1, [r4, #44]
 388 0046 A06A     		ldr	r0, [r4, #40]
 389 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 390              	.LVL37:
 172:Src/ADXL345.c **** 
 391              		.loc 1 172 1 is_stmt 0 view .LVU81
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 14


 392 004c 02B0     		add	sp, sp, #8
 393              	.LCFI13:
 394              		.cfi_def_cfa_offset 16
 395              		@ sp needed
 396 004e 70BD     		pop	{r4, r5, r6, pc}
 172:Src/ADXL345.c **** 
 397              		.loc 1 172 1 view .LVU82
 398              		.cfi_endproc
 399              	.LFE141:
 401              		.section	.text.readFrom,"ax",%progbits
 402              		.align	1
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv4-sp-d16
 408              	readFrom:
 409              	.LVL38:
 410              	.LFB137:
 113:Src/ADXL345.c **** 	if(adxl345->I2C) {
 411              		.loc 1 113 91 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 113:Src/ADXL345.c **** 	if(adxl345->I2C) {
 415              		.loc 1 113 91 is_stmt 0 view .LVU84
 416 0000 10B5     		push	{r4, lr}
 417              	.LCFI14:
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 4, -8
 420              		.cfi_offset 14, -4
 114:Src/ADXL345.c **** 		readFromI2C(adxl345, address, num, _buff);	// If I2C Communication
 421              		.loc 1 114 2 is_stmt 1 view .LVU85
 114:Src/ADXL345.c **** 		readFromI2C(adxl345, address, num, _buff);	// If I2C Communication
 422              		.loc 1 114 12 is_stmt 0 view .LVU86
 423 0002 047A     		ldrb	r4, [r0, #8]	@ zero_extendqisi2
 114:Src/ADXL345.c **** 		readFromI2C(adxl345, address, num, _buff);	// If I2C Communication
 424              		.loc 1 114 4 view .LVU87
 425 0004 14B1     		cbz	r4, .L21
 115:Src/ADXL345.c **** 	}
 426              		.loc 1 115 3 is_stmt 1 view .LVU88
 427 0006 FFF7FEFF 		bl	readFromI2C
 428              	.LVL39:
 429              	.L20:
 120:Src/ADXL345.c **** 
 430              		.loc 1 120 1 is_stmt 0 view .LVU89
 431 000a 10BD     		pop	{r4, pc}
 432              	.LVL40:
 433              	.L21:
 118:Src/ADXL345.c **** 	}
 434              		.loc 1 118 3 is_stmt 1 view .LVU90
 435 000c FFF7FEFF 		bl	readFromSPI
 436              	.LVL41:
 120:Src/ADXL345.c **** 
 437              		.loc 1 120 1 is_stmt 0 view .LVU91
 438 0010 FBE7     		b	.L20
 439              		.cfi_endproc
 440              	.LFE137:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 15


 442              		.section	.text.getRegisterBit,"ax",%progbits
 443              		.align	1
 444              		.syntax unified
 445              		.thumb
 446              		.thumb_func
 447              		.fpu fpv4-sp-d16
 449              	getRegisterBit:
 450              	.LVL42:
 451              	.LFB231:
 289:Src/ADXL345.c **** 
 290:Src/ADXL345.c **** // Return Value Between 0 and 255
 291:Src/ADXL345.c **** // Scale Factor is 62.5 mg/LSB
 292:Src/ADXL345.c **** int ADXL345getTapThreshold(ADXL345_SPI_I2C* adxl345) {
 293:Src/ADXL345.c **** 	uint8_t _b;
 294:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_THRESH_TAP, 1, &_b);
 295:Src/ADXL345.c **** 	return (int) _b;
 296:Src/ADXL345.c **** }
 297:Src/ADXL345.c **** 
 298:Src/ADXL345.c **** /****************** GAIN FOR EACH AXIS IN Gs / COUNT *****************/
 299:Src/ADXL345.c **** /*                           ~ SET & GET                            */
 300:Src/ADXL345.c **** void ADXL345setAxisGains(ADXL345_SPI_I2C* adxl345, float *_gains){
 301:Src/ADXL345.c **** 	int i;
 302:Src/ADXL345.c **** 	for(i = 0; i < 3; i++){
 303:Src/ADXL345.c **** 		adxl345->gains[i] = _gains[i];
 304:Src/ADXL345.c **** 	}
 305:Src/ADXL345.c **** }
 306:Src/ADXL345.c **** void ADXL345getAxisGains(ADXL345_SPI_I2C* adxl345, float *_gains){
 307:Src/ADXL345.c **** 	int i;
 308:Src/ADXL345.c **** 	for(i = 0; i < 3; i++){
 309:Src/ADXL345.c **** 		_gains[i] = adxl345->gains[i];
 310:Src/ADXL345.c **** 	}
 311:Src/ADXL345.c **** }
 312:Src/ADXL345.c **** 
 313:Src/ADXL345.c **** /********************* OFSX, OFSY and OFSZ BYTES ********************/
 314:Src/ADXL345.c **** /*                           ~ SET & GET                            */
 315:Src/ADXL345.c **** // OFSX, OFSY and OFSZ: User Offset Adjustments in Twos Complement Format
 316:Src/ADXL345.c **** // Scale Factor of 15.6mg/LSB
 317:Src/ADXL345.c **** void ADXL345setAxisOffset(ADXL345_SPI_I2C* adxl345, int x, int y, int z) {
 318:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_OFSX, (uint8_t) x);
 319:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_OFSY, (uint8_t) y);
 320:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_OFSZ, (uint8_t) z);
 321:Src/ADXL345.c **** }
 322:Src/ADXL345.c **** 
 323:Src/ADXL345.c **** void ADXL345getAxisOffset(ADXL345_SPI_I2C* adxl345, int* x, int* y, int*z) {
 324:Src/ADXL345.c **** 	uint8_t _b;
 325:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_OFSX, 1, &_b);
 326:Src/ADXL345.c **** 	*x = (int) _b;
 327:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_OFSY, 1, &_b);
 328:Src/ADXL345.c **** 	*y = (int) _b;
 329:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_OFSZ, 1, &_b);
 330:Src/ADXL345.c **** 	*z = (int) _b;
 331:Src/ADXL345.c **** }
 332:Src/ADXL345.c **** 
 333:Src/ADXL345.c **** /****************************** DUR BYTE ****************************/
 334:Src/ADXL345.c **** /*                           ~ SET & GET                            */
 335:Src/ADXL345.c **** // DUR Byte: Contains an Unsigned Time Value Representing the Max Time
 336:Src/ADXL345.c **** //  that an Event must be Above the THRESH_TAP Threshold to qualify
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 16


 337:Src/ADXL345.c **** //  as a Tap Event
 338:Src/ADXL345.c **** // The scale factor is 625Âµs/LSB
 339:Src/ADXL345.c **** // Value of 0 Disables the Tap/Double Tap Funcitons. Max value is 255.
 340:Src/ADXL345.c **** void ADXL345setTapDuration(ADXL345_SPI_I2C* adxl345, int tapDuration) {
 341:Src/ADXL345.c **** 	tapDuration = constrain(adxl345, tapDuration,0,255);
 342:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) tapDuration;
 343:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_DUR, _b);
 344:Src/ADXL345.c **** }
 345:Src/ADXL345.c **** 
 346:Src/ADXL345.c **** int ADXL345getTapDuration(ADXL345_SPI_I2C* adxl345) {
 347:Src/ADXL345.c **** 	uint8_t _b;
 348:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_DUR, 1, &_b);
 349:Src/ADXL345.c **** 	return (int) _b;
 350:Src/ADXL345.c **** }
 351:Src/ADXL345.c **** 
 352:Src/ADXL345.c **** /************************** LATENT REGISTER *************************/
 353:Src/ADXL345.c **** /*                           ~ SET & GET                            */
 354:Src/ADXL345.c **** // Contains Unsigned Time Value Representing the Wait Time from the Detection
 355:Src/ADXL345.c **** //  of a Tap Event to the Start of the Time Window (defined by the Window
 356:Src/ADXL345.c **** //  Register) during which a possible Second Tap Even can be Detected.
 357:Src/ADXL345.c **** // Scale Factor is 1.25ms/LSB.
 358:Src/ADXL345.c **** // A Value of 0 Disables the Double Tap Function.
 359:Src/ADXL345.c **** // It Accepts a Maximum Value of 255.
 360:Src/ADXL345.c **** void ADXL345setDoubleTapLatency(ADXL345_SPI_I2C* adxl345, int doubleTapLatency) {
 361:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) doubleTapLatency;
 362:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_LATENT, _b);
 363:Src/ADXL345.c **** }
 364:Src/ADXL345.c **** 
 365:Src/ADXL345.c **** int ADXL345getDoubleTapLatency(ADXL345_SPI_I2C* adxl345) {
 366:Src/ADXL345.c **** 	uint8_t _b;
 367:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_LATENT, 1, &_b);
 368:Src/ADXL345.c **** 	return (int) _b;
 369:Src/ADXL345.c **** }
 370:Src/ADXL345.c **** 
 371:Src/ADXL345.c **** /************************** WINDOW REGISTER *************************/
 372:Src/ADXL345.c **** /*                           ~ SET & GET                            */
 373:Src/ADXL345.c **** // Contains an Unsigned Time Value Representing the Amount of Time
 374:Src/ADXL345.c **** //  After the Expiration of the Latency Time (determined by Latent register)
 375:Src/ADXL345.c **** //  During which a Second Valid Tape can Begin.
 376:Src/ADXL345.c **** // Scale Factor is 1.25ms/LSB.
 377:Src/ADXL345.c **** // Value of 0 Disables the Double Tap Function.
 378:Src/ADXL345.c **** // It Accepts a Maximum Value of 255.
 379:Src/ADXL345.c **** void ADXL345setDoubleTapWindow(ADXL345_SPI_I2C* adxl345, int doubleTapWindow) {
 380:Src/ADXL345.c **** 	doubleTapWindow = constrain(adxl345, doubleTapWindow, 0, 255);
 381:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) doubleTapWindow;
 382:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_WINDOW, _b);
 383:Src/ADXL345.c **** }
 384:Src/ADXL345.c **** 
 385:Src/ADXL345.c **** int ADXL345getDoubleTapWindow(ADXL345_SPI_I2C* adxl345) {
 386:Src/ADXL345.c **** 	uint8_t _b;
 387:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_WINDOW, 1, &_b);
 388:Src/ADXL345.c **** 	return (int) _b;
 389:Src/ADXL345.c **** }
 390:Src/ADXL345.c **** 
 391:Src/ADXL345.c **** /*********************** THRESH_ACT REGISTER ************************/
 392:Src/ADXL345.c **** /*                          ~ SET & GET                             */
 393:Src/ADXL345.c **** // Holds the Threshold Value for Detecting Activity.
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 17


 394:Src/ADXL345.c **** // Data Format is Unsigned, so the Magnitude of the Activity Event is Compared
 395:Src/ADXL345.c **** //  with the Value is Compared with the Value in the THRESH_ACT Register.
 396:Src/ADXL345.c **** // The Scale Factor is 62.5mg/LSB.
 397:Src/ADXL345.c **** // Value of 0 may Result in Undesirable Behavior if the Activity Interrupt Enabled.
 398:Src/ADXL345.c **** // It Accepts a Maximum Value of 255.
 399:Src/ADXL345.c **** void ADXL345setActivityThreshold(ADXL345_SPI_I2C* adxl345, int activityThreshold) {
 400:Src/ADXL345.c **** 	activityThreshold = constrain(adxl345, activityThreshold, 0, 255);
 401:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) activityThreshold;
 402:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_THRESH_ACT, _b);
 403:Src/ADXL345.c **** }
 404:Src/ADXL345.c **** 
 405:Src/ADXL345.c **** // Gets the THRESH_ACT byte
 406:Src/ADXL345.c **** int ADXL345getActivityThreshold(ADXL345_SPI_I2C* adxl345) {
 407:Src/ADXL345.c **** 	uint8_t _b;
 408:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_THRESH_ACT, 1, &_b);
 409:Src/ADXL345.c **** 	return (int) _b;
 410:Src/ADXL345.c **** }
 411:Src/ADXL345.c **** 
 412:Src/ADXL345.c **** /********************** THRESH_INACT REGISTER ***********************/
 413:Src/ADXL345.c **** /*                          ~ SET & GET                             */
 414:Src/ADXL345.c **** // Holds the Threshold Value for Detecting Inactivity.
 415:Src/ADXL345.c **** // The Data Format is Unsigned, so the Magnitude of the INactivity Event is
 416:Src/ADXL345.c **** //  Compared with the value in the THRESH_INACT Register.
 417:Src/ADXL345.c **** // Scale Factor is 62.5mg/LSB.
 418:Src/ADXL345.c **** // Value of 0 May Result in Undesirable Behavior if the Inactivity Interrupt Enabled.
 419:Src/ADXL345.c **** // It Accepts a Maximum Value of 255.
 420:Src/ADXL345.c **** void ADXL345setInactivityThreshold(ADXL345_SPI_I2C* adxl345, int inactivityThreshold) {
 421:Src/ADXL345.c **** 	inactivityThreshold = constrain(adxl345, inactivityThreshold, 0, 255);
 422:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) inactivityThreshold;
 423:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_THRESH_INACT, _b);
 424:Src/ADXL345.c **** }
 425:Src/ADXL345.c **** 
 426:Src/ADXL345.c **** int ADXL345getInactivityThreshold(ADXL345_SPI_I2C* adxl345) {
 427:Src/ADXL345.c **** 	uint8_t _b;
 428:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_THRESH_INACT, 1, &_b);
 429:Src/ADXL345.c **** 	return (int) _b;
 430:Src/ADXL345.c **** }
 431:Src/ADXL345.c **** 
 432:Src/ADXL345.c **** /*********************** TIME_INACT RESIGER *************************/
 433:Src/ADXL345.c **** /*                          ~ SET & GET                             */
 434:Src/ADXL345.c **** // Contains an Unsigned Time Value Representing the Amount of Time that
 435:Src/ADXL345.c **** //  Acceleration must be Less Than the Value in the THRESH_INACT Register
 436:Src/ADXL345.c **** //  for Inactivity to be Declared.
 437:Src/ADXL345.c **** // Uses Filtered Output Data* unlike other Interrupt Functions
 438:Src/ADXL345.c **** // Scale Factor is 1sec/LSB.
 439:Src/ADXL345.c **** // Value Must Be Between 0 and 255.
 440:Src/ADXL345.c **** void ADXL345setTimeInactivity(ADXL345_SPI_I2C* adxl345, int timeInactivity) {
 441:Src/ADXL345.c **** 	timeInactivity = constrain(adxl345, timeInactivity, 0, 255);
 442:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) timeInactivity;
 443:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_TIME_INACT, _b);
 444:Src/ADXL345.c **** }
 445:Src/ADXL345.c **** 
 446:Src/ADXL345.c **** int ADXL345getTimeInactivity(ADXL345_SPI_I2C* adxl345) {
 447:Src/ADXL345.c **** 	uint8_t _b;
 448:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_TIME_INACT, 1, &_b);
 449:Src/ADXL345.c **** 	return (int) _b;
 450:Src/ADXL345.c **** }
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 18


 451:Src/ADXL345.c **** 
 452:Src/ADXL345.c **** /*********************** THRESH_FF Register *************************/
 453:Src/ADXL345.c **** /*                          ~ SET & GET                             */
 454:Src/ADXL345.c **** // Holds the Threshold Value, in Unsigned Format, for Free-Fall Detection
 455:Src/ADXL345.c **** // The Acceleration on all Axes is Compared with the Value in THRES_FF to
 456:Src/ADXL345.c **** //  Determine if a Free-Fall Event Occurred.
 457:Src/ADXL345.c **** // Scale Factor is 62.5mg/LSB.
 458:Src/ADXL345.c **** // Value of 0 May Result in Undesirable Behavior if the Free-Fall interrupt Enabled.
 459:Src/ADXL345.c **** // Accepts a Maximum Value of 255.
 460:Src/ADXL345.c **** void ADXL345setFreeFallThreshold(ADXL345_SPI_I2C* adxl345, int freeFallThreshold) {
 461:Src/ADXL345.c **** 	freeFallThreshold = constrain(adxl345, freeFallThreshold, 0, 255);
 462:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) freeFallThreshold;
 463:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_THRESH_FF, _b);
 464:Src/ADXL345.c **** }
 465:Src/ADXL345.c **** 
 466:Src/ADXL345.c **** int ADXL345getFreeFallThreshold(ADXL345_SPI_I2C* adxl345) {
 467:Src/ADXL345.c **** 	uint8_t _b;
 468:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_THRESH_FF, 1, &_b);
 469:Src/ADXL345.c **** 	return (int) _b;
 470:Src/ADXL345.c **** }
 471:Src/ADXL345.c **** 
 472:Src/ADXL345.c **** /************************ TIME_FF Register **************************/
 473:Src/ADXL345.c **** /*                          ~ SET & GET                             */
 474:Src/ADXL345.c **** // Stores an Unsigned Time Value Representing the Minimum Time that the Value
 475:Src/ADXL345.c **** //  of all Axes must be Less Than THRES_FF to Generate a Free-Fall Interrupt.
 476:Src/ADXL345.c **** // Scale Factor is 5ms/LSB.
 477:Src/ADXL345.c **** // Value of 0 May Result in Undesirable Behavior if the Free-Fall Interrupt Enabled.
 478:Src/ADXL345.c **** // Accepts a Maximum Value of 255.
 479:Src/ADXL345.c **** void ADXL345setFreeFallDuration(ADXL345_SPI_I2C* adxl345, int freeFallDuration) {
 480:Src/ADXL345.c **** 	freeFallDuration = constrain(adxl345, freeFallDuration, 0, 255);
 481:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) freeFallDuration;
 482:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_TIME_FF, _b);
 483:Src/ADXL345.c **** }
 484:Src/ADXL345.c **** 
 485:Src/ADXL345.c **** int ADXL345getFreeFallDuration(ADXL345_SPI_I2C* adxl345) {
 486:Src/ADXL345.c **** 	uint8_t _b;
 487:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_TIME_FF, 1, &_b);
 488:Src/ADXL345.c **** 	return (int) _b;
 489:Src/ADXL345.c **** }
 490:Src/ADXL345.c **** 
 491:Src/ADXL345.c **** /************************** ACTIVITY BITS ***************************/
 492:Src/ADXL345.c **** /*                                                                  */
 493:Src/ADXL345.c **** bool ADXL345isActivityXEnabled(ADXL345_SPI_I2C* adxl345) {
 494:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 6);
 495:Src/ADXL345.c **** }
 496:Src/ADXL345.c **** bool ADXL345isActivityYEnabled(ADXL345_SPI_I2C* adxl345) {
 497:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 5);
 498:Src/ADXL345.c **** }
 499:Src/ADXL345.c **** bool ADXL345isActivityZEnabled(ADXL345_SPI_I2C* adxl345) {
 500:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 4);
 501:Src/ADXL345.c **** }
 502:Src/ADXL345.c **** bool ADXL345isInactivityXEnabled(ADXL345_SPI_I2C* adxl345) {
 503:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 2);
 504:Src/ADXL345.c **** }
 505:Src/ADXL345.c **** bool ADXL345isInactivityYEnabled(ADXL345_SPI_I2C* adxl345) {
 506:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 1);
 507:Src/ADXL345.c **** }
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 19


 508:Src/ADXL345.c **** bool ADXL345isInactivityZEnabled(ADXL345_SPI_I2C* adxl345) {
 509:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 0);
 510:Src/ADXL345.c **** }
 511:Src/ADXL345.c **** 
 512:Src/ADXL345.c **** void ADXL345setActivityX(ADXL345_SPI_I2C* adxl345, bool state) {
 513:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 6, state);
 514:Src/ADXL345.c **** }
 515:Src/ADXL345.c **** void ADXL345setActivityY(ADXL345_SPI_I2C* adxl345, bool state) {
 516:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 5, state);
 517:Src/ADXL345.c **** }
 518:Src/ADXL345.c **** void ADXL345setActivityZ(ADXL345_SPI_I2C* adxl345, bool state) {
 519:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 4, state);
 520:Src/ADXL345.c **** }
 521:Src/ADXL345.c **** void ADXL345setActivityXYZ(ADXL345_SPI_I2C* adxl345, bool stateX, bool stateY, bool stateZ) {
 522:Src/ADXL345.c **** 	ADXL345setActivityX(adxl345, stateX);
 523:Src/ADXL345.c **** 	ADXL345setActivityY(adxl345, stateY);
 524:Src/ADXL345.c **** 	ADXL345setActivityZ(adxl345, stateZ);
 525:Src/ADXL345.c **** }
 526:Src/ADXL345.c **** void ADXL345setInactivityX(ADXL345_SPI_I2C* adxl345, bool state) {
 527:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 2, state);
 528:Src/ADXL345.c **** }
 529:Src/ADXL345.c **** void ADXL345setInactivityY(ADXL345_SPI_I2C* adxl345, bool state) {
 530:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 1, state);
 531:Src/ADXL345.c **** }
 532:Src/ADXL345.c **** void ADXL345setInactivityZ(ADXL345_SPI_I2C* adxl345, bool state) {
 533:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 0, state);
 534:Src/ADXL345.c **** }
 535:Src/ADXL345.c **** void ADXL345setInactivityXYZ(ADXL345_SPI_I2C* adxl345, bool stateX, bool stateY, bool stateZ) {
 536:Src/ADXL345.c **** 	ADXL345setInactivityX(adxl345, stateX);
 537:Src/ADXL345.c **** 	ADXL345setInactivityY(adxl345, stateY);
 538:Src/ADXL345.c **** 	ADXL345setInactivityZ(adxl345, stateZ);
 539:Src/ADXL345.c **** }
 540:Src/ADXL345.c **** 
 541:Src/ADXL345.c **** bool ADXL345isActivityAc(ADXL345_SPI_I2C* adxl345) {
 542:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 7);
 543:Src/ADXL345.c **** }
 544:Src/ADXL345.c **** bool ADXL345isInactivityAc(ADXL345_SPI_I2C* adxl345){
 545:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 3);
 546:Src/ADXL345.c **** }
 547:Src/ADXL345.c **** 
 548:Src/ADXL345.c **** void ADXL345setActivityAc(ADXL345_SPI_I2C* adxl345, bool state) {
 549:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 7, state);
 550:Src/ADXL345.c **** }
 551:Src/ADXL345.c **** void ADXL345setInactivityAc(ADXL345_SPI_I2C* adxl345, bool state) {
 552:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 3, state);
 553:Src/ADXL345.c **** }
 554:Src/ADXL345.c **** 
 555:Src/ADXL345.c **** /************************* SUPPRESS BITS ****************************/
 556:Src/ADXL345.c **** /*                                                                  */
 557:Src/ADXL345.c **** bool ADXL345getSuppressBit(ADXL345_SPI_I2C* adxl345){
 558:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_TAP_AXES, 3);
 559:Src/ADXL345.c **** }
 560:Src/ADXL345.c **** void ADXL345setSuppressBit(ADXL345_SPI_I2C* adxl345, bool state) {
 561:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_TAP_AXES, 3, state);
 562:Src/ADXL345.c **** }
 563:Src/ADXL345.c **** 
 564:Src/ADXL345.c **** /**************************** TAP BITS ******************************/
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 20


 565:Src/ADXL345.c **** /*                                                                  */
 566:Src/ADXL345.c **** bool ADXL345isTapDetectionOnX(ADXL345_SPI_I2C* adxl345){
 567:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_TAP_AXES, 2);
 568:Src/ADXL345.c **** }
 569:Src/ADXL345.c **** void ADXL345setTapDetectionOnX(ADXL345_SPI_I2C* adxl345, bool state) {
 570:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_TAP_AXES, 2, state);
 571:Src/ADXL345.c **** }
 572:Src/ADXL345.c **** bool ADXL345isTapDetectionOnY(ADXL345_SPI_I2C* adxl345){
 573:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_TAP_AXES, 1);
 574:Src/ADXL345.c **** }
 575:Src/ADXL345.c **** void ADXL345setTapDetectionOnY(ADXL345_SPI_I2C* adxl345, bool state) {
 576:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_TAP_AXES, 1, state);
 577:Src/ADXL345.c **** }
 578:Src/ADXL345.c **** bool ADXL345isTapDetectionOnZ(ADXL345_SPI_I2C* adxl345){
 579:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_TAP_AXES, 0);
 580:Src/ADXL345.c **** }
 581:Src/ADXL345.c **** void ADXL345setTapDetectionOnZ(ADXL345_SPI_I2C* adxl345, bool state) {
 582:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_TAP_AXES, 0, state);
 583:Src/ADXL345.c **** }
 584:Src/ADXL345.c **** 
 585:Src/ADXL345.c **** void ADXL345setTapDetectionOnXYZ(ADXL345_SPI_I2C* adxl345, bool stateX, bool stateY, bool stateZ) {
 586:Src/ADXL345.c **** 	ADXL345setTapDetectionOnX(adxl345, stateX);
 587:Src/ADXL345.c **** 	ADXL345setTapDetectionOnY(adxl345, stateY);
 588:Src/ADXL345.c **** 	ADXL345setTapDetectionOnZ(adxl345, stateZ);
 589:Src/ADXL345.c **** }
 590:Src/ADXL345.c **** 
 591:Src/ADXL345.c **** bool ADXL345isActivitySourceOnX(ADXL345_SPI_I2C* adxl345){
 592:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 6);
 593:Src/ADXL345.c **** }
 594:Src/ADXL345.c **** bool ADXL345isActivitySourceOnY(ADXL345_SPI_I2C* adxl345){
 595:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 5);
 596:Src/ADXL345.c **** }
 597:Src/ADXL345.c **** bool ADXL345isActivitySourceOnZ(ADXL345_SPI_I2C* adxl345){
 598:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 4);
 599:Src/ADXL345.c **** }
 600:Src/ADXL345.c **** 
 601:Src/ADXL345.c **** bool ADXL345isTapSourceOnX(ADXL345_SPI_I2C* adxl345){
 602:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 2);
 603:Src/ADXL345.c **** }
 604:Src/ADXL345.c **** bool ADXL345isTapSourceOnY(ADXL345_SPI_I2C* adxl345){
 605:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 1);
 606:Src/ADXL345.c **** }
 607:Src/ADXL345.c **** bool ADXL345isTapSourceOnZ(ADXL345_SPI_I2C* adxl345){
 608:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 0);
 609:Src/ADXL345.c **** }
 610:Src/ADXL345.c **** 
 611:Src/ADXL345.c **** /*************************** ASLEEP BIT *****************************/
 612:Src/ADXL345.c **** /*                                                                  */
 613:Src/ADXL345.c **** bool ADXL345isAsleep(ADXL345_SPI_I2C* adxl345){
 614:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 3);
 615:Src/ADXL345.c **** }
 616:Src/ADXL345.c **** 
 617:Src/ADXL345.c **** /************************** LOW POWER BIT ***************************/
 618:Src/ADXL345.c **** /*                                                                  */
 619:Src/ADXL345.c **** bool ADXL345isLowPower(ADXL345_SPI_I2C* adxl345){
 620:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_BW_RATE, 4);
 621:Src/ADXL345.c **** }
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 21


 622:Src/ADXL345.c **** void ADXL345setLowPower(ADXL345_SPI_I2C* adxl345, bool state) {
 623:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_BW_RATE, 4, state);
 624:Src/ADXL345.c **** }
 625:Src/ADXL345.c **** 
 626:Src/ADXL345.c **** /*************************** RATE BITS ******************************/
 627:Src/ADXL345.c **** /*                                                                  */
 628:Src/ADXL345.c **** double ADXL345getRate(ADXL345_SPI_I2C* adxl345){
 629:Src/ADXL345.c **** 	uint8_t _b;
 630:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_BW_RATE, 1, &_b);
 631:Src/ADXL345.c **** 	_b &= 0b00001111;
 632:Src/ADXL345.c **** 	return (pow(2,((int) _b)-6)) * 6.25;
 633:Src/ADXL345.c **** }
 634:Src/ADXL345.c **** 
 635:Src/ADXL345.c **** void ADXL345setRate(ADXL345_SPI_I2C* adxl345, float rate){
 636:Src/ADXL345.c **** 	uint8_t _b,_s;
 637:Src/ADXL345.c **** 	int v = (int) (rate / 6.25);
 638:Src/ADXL345.c **** 	int r = 0;
 639:Src/ADXL345.c **** 	while (v >>= 1)
 640:Src/ADXL345.c **** 	{
 641:Src/ADXL345.c **** 		r++;
 642:Src/ADXL345.c **** 	}
 643:Src/ADXL345.c **** 	if (r <= 9) {
 644:Src/ADXL345.c **** 		readFrom(adxl345, ADXL345_BW_RATE, 1, &_b);
 645:Src/ADXL345.c **** 		_s = (uint8_t) (r + 6) | (_b & 0b11110000);
 646:Src/ADXL345.c **** 		writeTo(adxl345, ADXL345_BW_RATE, _s);
 647:Src/ADXL345.c **** 	}
 648:Src/ADXL345.c **** }
 649:Src/ADXL345.c **** 
 650:Src/ADXL345.c **** /*************************** BANDWIDTH ******************************/
 651:Src/ADXL345.c **** /*                          ~ SET & GET                             */
 652:Src/ADXL345.c **** void ADXL345set_bw(ADXL345_SPI_I2C* adxl345, uint8_t bw_code){
 653:Src/ADXL345.c **** 	if((bw_code < ADXL345_BW_0_05) || (bw_code > ADXL345_BW_1600)){
 654:Src/ADXL345.c **** 		adxl345->status = false;
 655:Src/ADXL345.c **** 		adxl345->error_code = ADXL345_BAD_ARG;
 656:Src/ADXL345.c **** 	}
 657:Src/ADXL345.c **** 	else{
 658:Src/ADXL345.c **** 		writeTo(adxl345, ADXL345_BW_RATE, bw_code);
 659:Src/ADXL345.c **** 	}
 660:Src/ADXL345.c **** }
 661:Src/ADXL345.c **** 
 662:Src/ADXL345.c **** uint8_t ADXL345get_bw_code(ADXL345_SPI_I2C* adxl345){
 663:Src/ADXL345.c **** 	uint8_t bw_code;
 664:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_BW_RATE, 1, &bw_code);
 665:Src/ADXL345.c **** 	return bw_code;
 666:Src/ADXL345.c **** }
 667:Src/ADXL345.c **** 
 668:Src/ADXL345.c **** 
 669:Src/ADXL345.c **** 
 670:Src/ADXL345.c **** 
 671:Src/ADXL345.c **** /************************* TRIGGER CHECK  ***************************/
 672:Src/ADXL345.c **** /*                                                                  */
 673:Src/ADXL345.c **** // Check if Action was Triggered in Interrupts
 674:Src/ADXL345.c **** // Example triggered(interrupts, ADXL345_SINGLE_TAP);
 675:Src/ADXL345.c **** bool ADXL345triggered(ADXL345_SPI_I2C* adxl345, uint8_t interrupts, int mask){
 676:Src/ADXL345.c **** 	return ((interrupts >> mask) & 1);
 677:Src/ADXL345.c **** }
 678:Src/ADXL345.c **** 
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 22


 679:Src/ADXL345.c **** /*
 680:Src/ADXL345.c ****  ADXL345_DATA_READY
 681:Src/ADXL345.c ****  ADXL345_SINGLE_TAP
 682:Src/ADXL345.c ****  ADXL345_DOUBLE_TAP
 683:Src/ADXL345.c ****  ADXL345_ACTIVITY
 684:Src/ADXL345.c ****  ADXL345_INACTIVITY
 685:Src/ADXL345.c ****  ADXL345_FREE_FALL
 686:Src/ADXL345.c ****  ADXL345_WATERMARK
 687:Src/ADXL345.c ****  ADXL345_OVERRUNY
 688:Src/ADXL345.c ****  */
 689:Src/ADXL345.c **** 
 690:Src/ADXL345.c **** 
 691:Src/ADXL345.c **** uint8_t ADXL345getInterruptSource(ADXL345_SPI_I2C* adxl345) {
 692:Src/ADXL345.c **** 	uint8_t _b;
 693:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_INT_SOURCE, 1, &_b);
 694:Src/ADXL345.c **** 	return _b;
 695:Src/ADXL345.c **** }
 696:Src/ADXL345.c **** 
 697:Src/ADXL345.c **** bool ADXL345getInterruptSource_interrupt(ADXL345_SPI_I2C* adxl345, uint8_t interruptBit) {
 698:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_INT_SOURCE,interruptBit);
 699:Src/ADXL345.c **** }
 700:Src/ADXL345.c **** 
 701:Src/ADXL345.c **** bool ADXL345getInterruptMapping(ADXL345_SPI_I2C* adxl345, uint8_t interruptBit) {
 702:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_INT_MAP,interruptBit);
 703:Src/ADXL345.c **** }
 704:Src/ADXL345.c **** 
 705:Src/ADXL345.c **** /*********************** INTERRUPT MAPPING **************************/
 706:Src/ADXL345.c **** /*         Set the Mapping of an Interrupt to pin1 or pin2          */
 707:Src/ADXL345.c **** // eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
 708:Src/ADXL345.c **** void ADXL345setInterruptMapping(ADXL345_SPI_I2C* adxl345, uint8_t interruptBit, bool interruptPin) 
 709:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_INT_MAP, interruptBit, interruptPin);
 710:Src/ADXL345.c **** }
 711:Src/ADXL345.c **** 
 712:Src/ADXL345.c **** void ADXL345setImportantInterruptMapping(ADXL345_SPI_I2C* adxl34, int single_tap, int double_tap, i
 713:Src/ADXL345.c **** 	if(single_tap == 1) {
 714:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT1_PIN );}
 715:Src/ADXL345.c **** 	else if(single_tap == 2) {
 716:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT2_PIN );}
 717:Src/ADXL345.c **** 
 718:Src/ADXL345.c **** 	if(double_tap == 1) {
 719:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT1_PIN );}
 720:Src/ADXL345.c **** 	else if(double_tap == 2) {
 721:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT2_PIN );}
 722:Src/ADXL345.c **** 
 723:Src/ADXL345.c **** 	if(free_fall == 1) {
 724:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT1_PIN );}
 725:Src/ADXL345.c **** 	else if(free_fall == 2) {
 726:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT2_PIN );}
 727:Src/ADXL345.c **** 
 728:Src/ADXL345.c **** 	if(activity == 1) {
 729:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT1_PIN );}
 730:Src/ADXL345.c **** 	else if(activity == 2) {
 731:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}
 732:Src/ADXL345.c **** 
 733:Src/ADXL345.c **** 	if(inactivity == 1) {
 734:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
 735:Src/ADXL345.c **** 	else if(inactivity == 2) {
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 23


 736:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
 737:Src/ADXL345.c **** }
 738:Src/ADXL345.c **** 
 739:Src/ADXL345.c **** bool ADXL345isInterruptEnabled(ADXL345_SPI_I2C* adxl34, uint8_t interruptBit) {
 740:Src/ADXL345.c **** 	return getRegisterBit(adxl34, ADXL345_INT_ENABLE,interruptBit);
 741:Src/ADXL345.c **** }
 742:Src/ADXL345.c **** 
 743:Src/ADXL345.c **** void ADXL345setInterrupt(ADXL345_SPI_I2C* adxl34, uint8_t interruptBit, bool state) {
 744:Src/ADXL345.c **** 	setRegisterBit(adxl34, ADXL345_INT_ENABLE, interruptBit, state);
 745:Src/ADXL345.c **** }
 746:Src/ADXL345.c **** 
 747:Src/ADXL345.c **** void ADXL345singleTapINT(ADXL345_SPI_I2C* adxl34, bool status) {
 748:Src/ADXL345.c **** 	if(status) {
 749:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_SINGLE_TAP_BIT, 1);
 750:Src/ADXL345.c **** 	}
 751:Src/ADXL345.c **** 	else {
 752:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_SINGLE_TAP_BIT, 0);
 753:Src/ADXL345.c **** 	}
 754:Src/ADXL345.c **** }
 755:Src/ADXL345.c **** void ADXL345doubleTapINT(ADXL345_SPI_I2C* adxl34, bool status) {
 756:Src/ADXL345.c **** 	if(status) {
 757:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_DOUBLE_TAP_BIT, 1);
 758:Src/ADXL345.c **** 	}
 759:Src/ADXL345.c **** 	else {
 760:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_DOUBLE_TAP_BIT, 0);
 761:Src/ADXL345.c **** 	}
 762:Src/ADXL345.c **** }
 763:Src/ADXL345.c **** void ADXL345FreeFallINT(ADXL345_SPI_I2C* adxl34, bool status) {
 764:Src/ADXL345.c **** 	if(status) {
 765:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_FREE_FALL_BIT,  1);
 766:Src/ADXL345.c **** 	}
 767:Src/ADXL345.c **** 	else {
 768:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_FREE_FALL_BIT,  0);
 769:Src/ADXL345.c **** 	}
 770:Src/ADXL345.c **** }
 771:Src/ADXL345.c **** void ADXL345ActivityINT(ADXL345_SPI_I2C* adxl34, bool status) {
 772:Src/ADXL345.c **** 	if(status) {
 773:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_ACTIVITY_BIT,   1);
 774:Src/ADXL345.c **** 	}
 775:Src/ADXL345.c **** 	else {
 776:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_ACTIVITY_BIT,   0);
 777:Src/ADXL345.c **** 	}
 778:Src/ADXL345.c **** }
 779:Src/ADXL345.c **** void ADXL345InactivityINT(ADXL345_SPI_I2C* adxl34, bool status) {
 780:Src/ADXL345.c **** 	if(status) {
 781:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_INACTIVITY_BIT, 1);
 782:Src/ADXL345.c **** 	}
 783:Src/ADXL345.c **** 	else {
 784:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_INACTIVITY_BIT, 0);
 785:Src/ADXL345.c **** 	}
 786:Src/ADXL345.c **** }
 787:Src/ADXL345.c **** 
 788:Src/ADXL345.c **** static void setRegisterBit(ADXL345_SPI_I2C* adxl34, uint8_t regAdress, int bitPos, bool state) {
 789:Src/ADXL345.c **** 	uint8_t _b;
 790:Src/ADXL345.c **** 	readFrom(adxl34, regAdress, 1, &_b);
 791:Src/ADXL345.c **** 	if (state) {
 792:Src/ADXL345.c **** 		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 24


 793:Src/ADXL345.c **** 	}
 794:Src/ADXL345.c **** 	else {
 795:Src/ADXL345.c **** 		_b &= ~(1 << bitPos); // Forces nth Bit of _b to 0. Other Bits Unchanged.
 796:Src/ADXL345.c **** 	}
 797:Src/ADXL345.c **** 	writeTo(adxl34, regAdress, _b);
 798:Src/ADXL345.c **** }
 799:Src/ADXL345.c **** 
 800:Src/ADXL345.c **** static bool getRegisterBit(ADXL345_SPI_I2C* adxl34, uint8_t regAdress, int bitPos) {
 452              		.loc 1 800 84 is_stmt 1 view -0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		.loc 1 800 84 is_stmt 0 view .LVU93
 457 0000 10B5     		push	{r4, lr}
 458              	.LCFI15:
 459              		.cfi_def_cfa_offset 8
 460              		.cfi_offset 4, -8
 461              		.cfi_offset 14, -4
 462 0002 82B0     		sub	sp, sp, #8
 463              	.LCFI16:
 464              		.cfi_def_cfa_offset 16
 465 0004 1446     		mov	r4, r2
 801:Src/ADXL345.c **** 	uint8_t _b;
 466              		.loc 1 801 2 is_stmt 1 view .LVU94
 802:Src/ADXL345.c **** 	readFrom(adxl34, regAdress, 1, &_b);
 467              		.loc 1 802 2 view .LVU95
 468 0006 0DF10703 		add	r3, sp, #7
 469 000a 0122     		movs	r2, #1
 470              	.LVL43:
 471              		.loc 1 802 2 is_stmt 0 view .LVU96
 472 000c FFF7FEFF 		bl	readFrom
 473              	.LVL44:
 803:Src/ADXL345.c **** 	return ((_b >> bitPos) & 1);
 474              		.loc 1 803 2 is_stmt 1 view .LVU97
 475              		.loc 1 803 14 is_stmt 0 view .LVU98
 476 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 477 0014 2041     		asrs	r0, r0, r4
 804:Src/ADXL345.c **** }
 478              		.loc 1 804 1 view .LVU99
 479 0016 00F00100 		and	r0, r0, #1
 480 001a 02B0     		add	sp, sp, #8
 481              	.LCFI17:
 482              		.cfi_def_cfa_offset 8
 483              		@ sp needed
 484 001c 10BD     		pop	{r4, pc}
 485              		.loc 1 804 1 view .LVU100
 486              		.cfi_endproc
 487              	.LFE231:
 489              		.section	.text.setRegisterBit,"ax",%progbits
 490              		.align	1
 491              		.syntax unified
 492              		.thumb
 493              		.thumb_func
 494              		.fpu fpv4-sp-d16
 496              	setRegisterBit:
 497              	.LVL45:
 498              	.LFB230:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 25


 788:Src/ADXL345.c **** 	uint8_t _b;
 499              		.loc 1 788 96 is_stmt 1 view -0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 8
 502              		@ frame_needed = 0, uses_anonymous_args = 0
 788:Src/ADXL345.c **** 	uint8_t _b;
 503              		.loc 1 788 96 is_stmt 0 view .LVU102
 504 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 505              	.LCFI18:
 506              		.cfi_def_cfa_offset 20
 507              		.cfi_offset 4, -20
 508              		.cfi_offset 5, -16
 509              		.cfi_offset 6, -12
 510              		.cfi_offset 7, -8
 511              		.cfi_offset 14, -4
 512 0002 83B0     		sub	sp, sp, #12
 513              	.LCFI19:
 514              		.cfi_def_cfa_offset 32
 515 0004 0446     		mov	r4, r0
 516 0006 0D46     		mov	r5, r1
 517 0008 1646     		mov	r6, r2
 518 000a 1F46     		mov	r7, r3
 789:Src/ADXL345.c **** 	readFrom(adxl34, regAdress, 1, &_b);
 519              		.loc 1 789 2 is_stmt 1 view .LVU103
 790:Src/ADXL345.c **** 	if (state) {
 520              		.loc 1 790 2 view .LVU104
 521 000c 0DF10703 		add	r3, sp, #7
 522              	.LVL46:
 790:Src/ADXL345.c **** 	if (state) {
 523              		.loc 1 790 2 is_stmt 0 view .LVU105
 524 0010 0122     		movs	r2, #1
 525              	.LVL47:
 790:Src/ADXL345.c **** 	if (state) {
 526              		.loc 1 790 2 view .LVU106
 527 0012 FFF7FEFF 		bl	readFrom
 528              	.LVL48:
 791:Src/ADXL345.c **** 		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.
 529              		.loc 1 791 2 is_stmt 1 view .LVU107
 791:Src/ADXL345.c **** 		_b |= (1 << bitPos);  // Forces nth Bit of _b to 1. Other Bits Unchanged.
 530              		.loc 1 791 5 is_stmt 0 view .LVU108
 531 0016 77B1     		cbz	r7, .L27
 792:Src/ADXL345.c **** 	}
 532              		.loc 1 792 3 is_stmt 1 view .LVU109
 792:Src/ADXL345.c **** 	}
 533              		.loc 1 792 12 is_stmt 0 view .LVU110
 534 0018 0122     		movs	r2, #1
 535 001a B240     		lsls	r2, r2, r6
 792:Src/ADXL345.c **** 	}
 536              		.loc 1 792 6 view .LVU111
 537 001c 9DF80760 		ldrb	r6, [sp, #7]	@ zero_extendqisi2
 538              	.LVL49:
 792:Src/ADXL345.c **** 	}
 539              		.loc 1 792 6 view .LVU112
 540 0020 1643     		orrs	r6, r6, r2
 541 0022 8DF80760 		strb	r6, [sp, #7]
 542              	.L28:
 797:Src/ADXL345.c **** }
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 26


 543              		.loc 1 797 2 is_stmt 1 view .LVU113
 544 0026 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 545 002a 2946     		mov	r1, r5
 546 002c 2046     		mov	r0, r4
 547 002e FFF7FEFF 		bl	writeTo
 548              	.LVL50:
 798:Src/ADXL345.c **** 
 549              		.loc 1 798 1 is_stmt 0 view .LVU114
 550 0032 03B0     		add	sp, sp, #12
 551              	.LCFI20:
 552              		.cfi_remember_state
 553              		.cfi_def_cfa_offset 20
 554              		@ sp needed
 555 0034 F0BD     		pop	{r4, r5, r6, r7, pc}
 556              	.LVL51:
 557              	.L27:
 558              	.LCFI21:
 559              		.cfi_restore_state
 795:Src/ADXL345.c **** 	}
 560              		.loc 1 795 3 is_stmt 1 view .LVU115
 795:Src/ADXL345.c **** 	}
 561              		.loc 1 795 13 is_stmt 0 view .LVU116
 562 0036 0122     		movs	r2, #1
 563 0038 B240     		lsls	r2, r2, r6
 795:Src/ADXL345.c **** 	}
 564              		.loc 1 795 6 view .LVU117
 565 003a 9DF80760 		ldrb	r6, [sp, #7]	@ zero_extendqisi2
 566              	.LVL52:
 795:Src/ADXL345.c **** 	}
 567              		.loc 1 795 6 view .LVU118
 568 003e 26EA0206 		bic	r6, r6, r2
 569 0042 8DF80760 		strb	r6, [sp, #7]
 570 0046 EEE7     		b	.L28
 571              		.cfi_endproc
 572              	.LFE230:
 574              		.section	.text.ADXL345_I2C,"ax",%progbits
 575              		.align	1
 576              		.global	ADXL345_I2C
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 580              		.fpu fpv4-sp-d16
 582              	ADXL345_I2C:
 583              	.LVL53:
 584              	.LFB130:
  27:Src/ADXL345.c **** 	adxl345->status = ADXL345_OK;
 585              		.loc 1 27 86 is_stmt 1 view -0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
  27:Src/ADXL345.c **** 	adxl345->status = ADXL345_OK;
 589              		.loc 1 27 86 is_stmt 0 view .LVU120
 590 0000 08B5     		push	{r3, lr}
 591              	.LCFI22:
 592              		.cfi_def_cfa_offset 8
 593              		.cfi_offset 3, -8
 594              		.cfi_offset 14, -4
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 27


 595 0002 0346     		mov	r3, r0
 596 0004 0846     		mov	r0, r1
 597              	.LVL54:
  28:Src/ADXL345.c **** 	adxl345->error_code = ADXL345_NO_ERROR;
 598              		.loc 1 28 2 is_stmt 1 view .LVU121
  28:Src/ADXL345.c **** 	adxl345->error_code = ADXL345_NO_ERROR;
 599              		.loc 1 28 18 is_stmt 0 view .LVU122
 600 0006 4FF0010C 		mov	ip, #1
 601 000a 83F801C0 		strb	ip, [r3, #1]
  29:Src/ADXL345.c **** 	adxl345->hi2c = hi2c;
 602              		.loc 1 29 2 is_stmt 1 view .LVU123
  29:Src/ADXL345.c **** 	adxl345->hi2c = hi2c;
 603              		.loc 1 29 22 is_stmt 0 view .LVU124
 604 000e 0021     		movs	r1, #0
 605              	.LVL55:
  29:Src/ADXL345.c **** 	adxl345->hi2c = hi2c;
 606              		.loc 1 29 22 view .LVU125
 607 0010 1974     		strb	r1, [r3, #16]
  30:Src/ADXL345.c **** 	adxl345->ADXL345_DEVICE = address << 1; // Device Address for ADXL345 - Important with << 1 for se
 608              		.loc 1 30 2 is_stmt 1 view .LVU126
  30:Src/ADXL345.c **** 	adxl345->ADXL345_DEVICE = address << 1; // Device Address for ADXL345 - Important with << 1 for se
 609              		.loc 1 30 16 is_stmt 0 view .LVU127
 610 0012 5862     		str	r0, [r3, #36]
  31:Src/ADXL345.c **** 
 611              		.loc 1 31 2 is_stmt 1 view .LVU128
  31:Src/ADXL345.c **** 
 612              		.loc 1 31 36 is_stmt 0 view .LVU129
 613 0014 02FA0CF2 		lsl	r2, r2, ip
 614              	.LVL56:
  31:Src/ADXL345.c **** 
 615              		.loc 1 31 36 view .LVU130
 616 0018 D1B2     		uxtb	r1, r2
  31:Src/ADXL345.c **** 
 617              		.loc 1 31 26 view .LVU131
 618 001a 1970     		strb	r1, [r3]
  33:Src/ADXL345.c **** 	adxl345->gains[1] = 0.00376009;		// Original gain 0.00376009
 619              		.loc 1 33 2 is_stmt 1 view .LVU132
  33:Src/ADXL345.c **** 	adxl345->gains[1] = 0.00376009;		// Original gain 0.00376009
 620              		.loc 1 33 20 is_stmt 0 view .LVU133
 621 001c 094A     		ldr	r2, .L34
 622 001e 5A61     		str	r2, [r3, #20]	@ float
  34:Src/ADXL345.c **** 	adxl345->gains[2] = 0.00349265;		// Original gain 0.00349265
 623              		.loc 1 34 2 is_stmt 1 view .LVU134
  34:Src/ADXL345.c **** 	adxl345->gains[2] = 0.00349265;		// Original gain 0.00349265
 624              		.loc 1 34 20 is_stmt 0 view .LVU135
 625 0020 094A     		ldr	r2, .L34+4
 626 0022 9A61     		str	r2, [r3, #24]	@ float
  35:Src/ADXL345.c **** 	adxl345->I2C = true;
 627              		.loc 1 35 2 is_stmt 1 view .LVU136
  35:Src/ADXL345.c **** 	adxl345->I2C = true;
 628              		.loc 1 35 20 is_stmt 0 view .LVU137
 629 0024 094A     		ldr	r2, .L34+8
 630 0026 DA61     		str	r2, [r3, #28]	@ float
  36:Src/ADXL345.c **** 
 631              		.loc 1 36 2 is_stmt 1 view .LVU138
  36:Src/ADXL345.c **** 
 632              		.loc 1 36 15 is_stmt 0 view .LVU139
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 28


 633 0028 83F808C0 		strb	ip, [r3, #8]
  39:Src/ADXL345.c **** 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // This MUST have GPIO PA5 ready to use - ERR
 634              		.loc 1 39 2 is_stmt 1 view .LVU140
  39:Src/ADXL345.c **** 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // This MUST have GPIO PA5 ready to use - ERR
 635              		.loc 1 39 6 is_stmt 0 view .LVU141
 636 002c 0A23     		movs	r3, #10
 637              	.LVL57:
  39:Src/ADXL345.c **** 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // This MUST have GPIO PA5 ready to use - ERR
 638              		.loc 1 39 6 view .LVU142
 639 002e 1A46     		mov	r2, r3
 640 0030 FFF7FEFF 		bl	HAL_I2C_IsDeviceReady
 641              	.LVL58:
  39:Src/ADXL345.c **** 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // This MUST have GPIO PA5 ready to use - ERR
 642              		.loc 1 39 5 view .LVU143
 643 0034 00B9     		cbnz	r0, .L33
 644              	.L30:
  41:Src/ADXL345.c **** 
 645              		.loc 1 41 1 view .LVU144
 646 0036 08BD     		pop	{r3, pc}
 647              	.L33:
  40:Src/ADXL345.c **** }
 648              		.loc 1 40 3 is_stmt 1 view .LVU145
 649 0038 0122     		movs	r2, #1
 650 003a 2021     		movs	r1, #32
 651 003c 0448     		ldr	r0, .L34+12
 652 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 653              	.LVL59:
  41:Src/ADXL345.c **** 
 654              		.loc 1 41 1 is_stmt 0 view .LVU146
 655 0042 F8E7     		b	.L30
 656              	.L35:
 657              		.align	2
 658              	.L34:
 659 0044 C3AB763B 		.word	997632963
 660 0048 D86B763B 		.word	997616600
 661 004c F2E4643B 		.word	996467954
 662 0050 00000240 		.word	1073872896
 663              		.cfi_endproc
 664              	.LFE130:
 666              		.section	.text.ADXL345_SPI,"ax",%progbits
 667              		.align	1
 668              		.global	ADXL345_SPI
 669              		.syntax unified
 670              		.thumb
 671              		.thumb_func
 672              		.fpu fpv4-sp-d16
 674              	ADXL345_SPI:
 675              	.LVL60:
 676              	.LFB131:
  51:Src/ADXL345.c **** 	adxl345->status = ADXL345_OK;
 677              		.loc 1 51 109 is_stmt 1 view -0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 0
 680              		@ frame_needed = 0, uses_anonymous_args = 0
  51:Src/ADXL345.c **** 	adxl345->status = ADXL345_OK;
 681              		.loc 1 51 109 is_stmt 0 view .LVU148
 682 0000 08B5     		push	{r3, lr}
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 29


 683              	.LCFI23:
 684              		.cfi_def_cfa_offset 8
 685              		.cfi_offset 3, -8
 686              		.cfi_offset 14, -4
 687 0002 8446     		mov	ip, r0
 688 0004 1046     		mov	r0, r2
 689              	.LVL61:
  52:Src/ADXL345.c **** 	adxl345->error_code = ADXL345_NO_ERROR;
 690              		.loc 1 52 2 is_stmt 1 view .LVU149
  52:Src/ADXL345.c **** 	adxl345->error_code = ADXL345_NO_ERROR;
 691              		.loc 1 52 18 is_stmt 0 view .LVU150
 692 0006 0122     		movs	r2, #1
 693              	.LVL62:
  52:Src/ADXL345.c **** 	adxl345->error_code = ADXL345_NO_ERROR;
 694              		.loc 1 52 18 view .LVU151
 695 0008 8CF80120 		strb	r2, [ip, #1]
  53:Src/ADXL345.c **** 	adxl345->hspi = hspi;
 696              		.loc 1 53 2 is_stmt 1 view .LVU152
  53:Src/ADXL345.c **** 	adxl345->hspi = hspi;
 697              		.loc 1 53 22 is_stmt 0 view .LVU153
 698 000c 4FF0000E 		mov	lr, #0
 699 0010 8CF810E0 		strb	lr, [ip, #16]
  54:Src/ADXL345.c **** 
 700              		.loc 1 54 2 is_stmt 1 view .LVU154
  54:Src/ADXL345.c **** 
 701              		.loc 1 54 16 is_stmt 0 view .LVU155
 702 0014 CCF82010 		str	r1, [ip, #32]
  56:Src/ADXL345.c **** 	adxl345->gains[1] = 0.00376009;
 703              		.loc 1 56 2 is_stmt 1 view .LVU156
  56:Src/ADXL345.c **** 	adxl345->gains[1] = 0.00376009;
 704              		.loc 1 56 20 is_stmt 0 view .LVU157
 705 0018 0949     		ldr	r1, .L38
 706              	.LVL63:
  56:Src/ADXL345.c **** 	adxl345->gains[1] = 0.00376009;
 707              		.loc 1 56 20 view .LVU158
 708 001a CCF81410 		str	r1, [ip, #20]	@ float
  57:Src/ADXL345.c **** 	adxl345->gains[2] = 0.00349265;
 709              		.loc 1 57 2 is_stmt 1 view .LVU159
  57:Src/ADXL345.c **** 	adxl345->gains[2] = 0.00349265;
 710              		.loc 1 57 20 is_stmt 0 view .LVU160
 711 001e 0949     		ldr	r1, .L38+4
 712 0020 CCF81810 		str	r1, [ip, #24]	@ float
  58:Src/ADXL345.c **** 	adxl345->CS_PIN = CS_PIN;
 713              		.loc 1 58 2 is_stmt 1 view .LVU161
  58:Src/ADXL345.c **** 	adxl345->CS_PIN = CS_PIN;
 714              		.loc 1 58 20 is_stmt 0 view .LVU162
 715 0024 0849     		ldr	r1, .L38+8
 716 0026 CCF81C10 		str	r1, [ip, #28]	@ float
  59:Src/ADXL345.c **** 	adxl345->CS_PORT = CS_PORT;
 717              		.loc 1 59 2 is_stmt 1 view .LVU163
  59:Src/ADXL345.c **** 	adxl345->CS_PORT = CS_PORT;
 718              		.loc 1 59 18 is_stmt 0 view .LVU164
 719 002a ACF82C30 		strh	r3, [ip, #44]	@ movhi
  60:Src/ADXL345.c **** 	adxl345->I2C = false;
 720              		.loc 1 60 2 is_stmt 1 view .LVU165
  60:Src/ADXL345.c **** 	adxl345->I2C = false;
 721              		.loc 1 60 19 is_stmt 0 view .LVU166
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 30


 722 002e CCF82800 		str	r0, [ip, #40]
  61:Src/ADXL345.c **** 
 723              		.loc 1 61 2 is_stmt 1 view .LVU167
  61:Src/ADXL345.c **** 
 724              		.loc 1 61 15 is_stmt 0 view .LVU168
 725 0032 8CF808E0 		strb	lr, [ip, #8]
  63:Src/ADXL345.c **** }
 726              		.loc 1 63 2 is_stmt 1 view .LVU169
 727 0036 1946     		mov	r1, r3
 728 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
 729              	.LVL64:
  64:Src/ADXL345.c **** 
 730              		.loc 1 64 1 is_stmt 0 view .LVU170
 731 003c 08BD     		pop	{r3, pc}
 732              	.L39:
 733 003e 00BF     		.align	2
 734              	.L38:
 735 0040 C3AB763B 		.word	997632963
 736 0044 D86B763B 		.word	997616600
 737 0048 F2E4643B 		.word	996467954
 738              		.cfi_endproc
 739              	.LFE131:
 741              		.section	.text.ADXL345powerOn,"ax",%progbits
 742              		.align	1
 743              		.global	ADXL345powerOn
 744              		.syntax unified
 745              		.thumb
 746              		.thumb_func
 747              		.fpu fpv4-sp-d16
 749              	ADXL345powerOn:
 750              	.LVL65:
 751              	.LFB132:
  66:Src/ADXL345.c **** 
 752              		.loc 1 66 47 is_stmt 1 view -0
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 0
 755              		@ frame_needed = 0, uses_anonymous_args = 0
  66:Src/ADXL345.c **** 
 756              		.loc 1 66 47 is_stmt 0 view .LVU172
 757 0000 10B5     		push	{r4, lr}
 758              	.LCFI24:
 759              		.cfi_def_cfa_offset 8
 760              		.cfi_offset 4, -8
 761              		.cfi_offset 14, -4
 762 0002 0446     		mov	r4, r0
  69:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_POWER_CTL, 16);	// Auto_Sleep
 763              		.loc 1 69 2 is_stmt 1 view .LVU173
 764 0004 0022     		movs	r2, #0
 765 0006 2D21     		movs	r1, #45
 766 0008 FFF7FEFF 		bl	writeTo
 767              	.LVL66:
  70:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_POWER_CTL, 8);		// Measure
 768              		.loc 1 70 2 view .LVU174
 769 000c 1022     		movs	r2, #16
 770 000e 2D21     		movs	r1, #45
 771 0010 2046     		mov	r0, r4
 772 0012 FFF7FEFF 		bl	writeTo
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 31


 773              	.LVL67:
  71:Src/ADXL345.c **** }
 774              		.loc 1 71 2 view .LVU175
 775 0016 0822     		movs	r2, #8
 776 0018 2D21     		movs	r1, #45
 777 001a 2046     		mov	r0, r4
 778 001c FFF7FEFF 		bl	writeTo
 779              	.LVL68:
  72:Src/ADXL345.c **** 
 780              		.loc 1 72 1 is_stmt 0 view .LVU176
 781 0020 10BD     		pop	{r4, pc}
  72:Src/ADXL345.c **** 
 782              		.loc 1 72 1 view .LVU177
 783              		.cfi_endproc
 784              	.LFE132:
 786              		.section	.text.ADXL345readAccel_x_y_z,"ax",%progbits
 787              		.align	1
 788              		.global	ADXL345readAccel_x_y_z
 789              		.syntax unified
 790              		.thumb
 791              		.thumb_func
 792              		.fpu fpv4-sp-d16
 794              	ADXL345readAccel_x_y_z:
 795              	.LVL69:
 796              	.LFB134:
  82:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_DATAX0, ADXL345_TO_READ, adxl345->_buff);	// Read Accel Data from ADXL34
 797              		.loc 1 82 79 is_stmt 1 view -0
 798              		.cfi_startproc
 799              		@ args = 0, pretend = 0, frame = 0
 800              		@ frame_needed = 0, uses_anonymous_args = 0
  82:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_DATAX0, ADXL345_TO_READ, adxl345->_buff);	// Read Accel Data from ADXL34
 801              		.loc 1 82 79 is_stmt 0 view .LVU179
 802 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 803              	.LCFI25:
 804              		.cfi_def_cfa_offset 24
 805              		.cfi_offset 3, -24
 806              		.cfi_offset 4, -20
 807              		.cfi_offset 5, -16
 808              		.cfi_offset 6, -12
 809              		.cfi_offset 7, -8
 810              		.cfi_offset 14, -4
 811 0002 0446     		mov	r4, r0
 812 0004 0F46     		mov	r7, r1
 813 0006 1646     		mov	r6, r2
 814 0008 1D46     		mov	r5, r3
  83:Src/ADXL345.c **** 
 815              		.loc 1 83 2 is_stmt 1 view .LVU180
 816 000a 831C     		adds	r3, r0, #2
 817              	.LVL70:
  83:Src/ADXL345.c **** 
 818              		.loc 1 83 2 is_stmt 0 view .LVU181
 819 000c 0622     		movs	r2, #6
 820              	.LVL71:
  83:Src/ADXL345.c **** 
 821              		.loc 1 83 2 view .LVU182
 822 000e 3221     		movs	r1, #50
 823              	.LVL72:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 32


  83:Src/ADXL345.c **** 
 824              		.loc 1 83 2 view .LVU183
 825 0010 FFF7FEFF 		bl	readFrom
 826              	.LVL73:
  86:Src/ADXL345.c **** 	*y = (int16_t)((((int)adxl345->_buff[3]) << 8) | adxl345->_buff[2]);
 827              		.loc 1 86 2 is_stmt 1 view .LVU184
  86:Src/ADXL345.c **** 	*y = (int16_t)((((int)adxl345->_buff[3]) << 8) | adxl345->_buff[2]);
 828              		.loc 1 86 38 is_stmt 0 view .LVU185
 829 0014 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
  86:Src/ADXL345.c **** 	*y = (int16_t)((((int)adxl345->_buff[3]) << 8) | adxl345->_buff[2]);
 830              		.loc 1 86 65 view .LVU186
 831 0016 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
  86:Src/ADXL345.c **** 	*y = (int16_t)((((int)adxl345->_buff[3]) << 8) | adxl345->_buff[2]);
 832              		.loc 1 86 7 view .LVU187
 833 0018 43EA0223 		orr	r3, r3, r2, lsl #8
 834 001c 1BB2     		sxth	r3, r3
  86:Src/ADXL345.c **** 	*y = (int16_t)((((int)adxl345->_buff[3]) << 8) | adxl345->_buff[2]);
 835              		.loc 1 86 5 view .LVU188
 836 001e 3B60     		str	r3, [r7]
  87:Src/ADXL345.c **** 	*z = (int16_t)((((int)adxl345->_buff[5]) << 8) | adxl345->_buff[4]);
 837              		.loc 1 87 2 is_stmt 1 view .LVU189
  87:Src/ADXL345.c **** 	*z = (int16_t)((((int)adxl345->_buff[5]) << 8) | adxl345->_buff[4]);
 838              		.loc 1 87 38 is_stmt 0 view .LVU190
 839 0020 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
  87:Src/ADXL345.c **** 	*z = (int16_t)((((int)adxl345->_buff[5]) << 8) | adxl345->_buff[4]);
 840              		.loc 1 87 65 view .LVU191
 841 0022 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
  87:Src/ADXL345.c **** 	*z = (int16_t)((((int)adxl345->_buff[5]) << 8) | adxl345->_buff[4]);
 842              		.loc 1 87 7 view .LVU192
 843 0024 41EA0321 		orr	r1, r1, r3, lsl #8
 844 0028 09B2     		sxth	r1, r1
  87:Src/ADXL345.c **** 	*z = (int16_t)((((int)adxl345->_buff[5]) << 8) | adxl345->_buff[4]);
 845              		.loc 1 87 5 view .LVU193
 846 002a 3160     		str	r1, [r6]
  88:Src/ADXL345.c **** 
 847              		.loc 1 88 2 is_stmt 1 view .LVU194
  88:Src/ADXL345.c **** 
 848              		.loc 1 88 38 is_stmt 0 view .LVU195
 849 002c E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
  88:Src/ADXL345.c **** 
 850              		.loc 1 88 65 view .LVU196
 851 002e A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
  88:Src/ADXL345.c **** 
 852              		.loc 1 88 7 view .LVU197
 853 0030 42EA0322 		orr	r2, r2, r3, lsl #8
 854 0034 12B2     		sxth	r2, r2
  88:Src/ADXL345.c **** 
 855              		.loc 1 88 5 view .LVU198
 856 0036 2A60     		str	r2, [r5]
  90:Src/ADXL345.c **** 
 857              		.loc 1 90 1 view .LVU199
 858 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
  90:Src/ADXL345.c **** 
 859              		.loc 1 90 1 view .LVU200
 860              		.cfi_endproc
 861              	.LFE134:
 863              		.section	.text.ADXL345readAccel_xyz,"ax",%progbits
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 33


 864              		.align	1
 865              		.global	ADXL345readAccel_xyz
 866              		.syntax unified
 867              		.thumb
 868              		.thumb_func
 869              		.fpu fpv4-sp-d16
 871              	ADXL345readAccel_xyz:
 872              	.LVL74:
 873              	.LFB133:
  78:Src/ADXL345.c **** 	ADXL345readAccel_x_y_z(adxl345, xyz, xyz + 1, xyz + 2);
 874              		.loc 1 78 62 is_stmt 1 view -0
 875              		.cfi_startproc
 876              		@ args = 0, pretend = 0, frame = 0
 877              		@ frame_needed = 0, uses_anonymous_args = 0
  78:Src/ADXL345.c **** 	ADXL345readAccel_x_y_z(adxl345, xyz, xyz + 1, xyz + 2);
 878              		.loc 1 78 62 is_stmt 0 view .LVU202
 879 0000 08B5     		push	{r3, lr}
 880              	.LCFI26:
 881              		.cfi_def_cfa_offset 8
 882              		.cfi_offset 3, -8
 883              		.cfi_offset 14, -4
 884 0002 0A46     		mov	r2, r1
  79:Src/ADXL345.c **** }
 885              		.loc 1 79 2 is_stmt 1 view .LVU203
 886 0004 01F10803 		add	r3, r1, #8
 887 0008 0432     		adds	r2, r2, #4
 888 000a FFF7FEFF 		bl	ADXL345readAccel_x_y_z
 889              	.LVL75:
  80:Src/ADXL345.c **** 
 890              		.loc 1 80 1 is_stmt 0 view .LVU204
 891 000e 08BD     		pop	{r3, pc}
 892              		.cfi_endproc
 893              	.LFE133:
 895              		.section	.text.ADXL345get_Gxyz,"ax",%progbits
 896              		.align	1
 897              		.global	ADXL345get_Gxyz
 898              		.syntax unified
 899              		.thumb
 900              		.thumb_func
 901              		.fpu fpv4-sp-d16
 903              	ADXL345get_Gxyz:
 904              	.LVL76:
 905              	.LFB135:
  92:Src/ADXL345.c **** 	int i;
 906              		.loc 1 92 59 is_stmt 1 view -0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 16
 909              		@ frame_needed = 0, uses_anonymous_args = 0
  92:Src/ADXL345.c **** 	int i;
 910              		.loc 1 92 59 is_stmt 0 view .LVU206
 911 0000 30B5     		push	{r4, r5, lr}
 912              	.LCFI27:
 913              		.cfi_def_cfa_offset 12
 914              		.cfi_offset 4, -12
 915              		.cfi_offset 5, -8
 916              		.cfi_offset 14, -4
 917 0002 85B0     		sub	sp, sp, #20
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 34


 918              	.LCFI28:
 919              		.cfi_def_cfa_offset 32
 920 0004 0546     		mov	r5, r0
 921 0006 0C46     		mov	r4, r1
  93:Src/ADXL345.c **** 	int xyz_int[3];
 922              		.loc 1 93 2 is_stmt 1 view .LVU207
  94:Src/ADXL345.c **** 	ADXL345readAccel_xyz(adxl345, xyz_int);
 923              		.loc 1 94 2 view .LVU208
  95:Src/ADXL345.c **** 	for(i=0; i<3; i++){
 924              		.loc 1 95 2 view .LVU209
 925 0008 01A9     		add	r1, sp, #4
 926              	.LVL77:
  95:Src/ADXL345.c **** 	for(i=0; i<3; i++){
 927              		.loc 1 95 2 is_stmt 0 view .LVU210
 928 000a FFF7FEFF 		bl	ADXL345readAccel_xyz
 929              	.LVL78:
  96:Src/ADXL345.c **** 		xyz[i] = xyz_int[i] * adxl345->gains[i];
 930              		.loc 1 96 2 is_stmt 1 view .LVU211
  96:Src/ADXL345.c **** 		xyz[i] = xyz_int[i] * adxl345->gains[i];
 931              		.loc 1 96 7 is_stmt 0 view .LVU212
 932 000e 0023     		movs	r3, #0
  96:Src/ADXL345.c **** 		xyz[i] = xyz_int[i] * adxl345->gains[i];
 933              		.loc 1 96 2 view .LVU213
 934 0010 12E0     		b	.L47
 935              	.LVL79:
 936              	.L48:
  97:Src/ADXL345.c **** 	}
 937              		.loc 1 97 3 is_stmt 1 discriminator 3 view .LVU214
  97:Src/ADXL345.c **** 	}
 938              		.loc 1 97 19 is_stmt 0 discriminator 3 view .LVU215
 939 0012 04AA     		add	r2, sp, #16
 940 0014 02EB8302 		add	r2, r2, r3, lsl #2
 941 0018 52ED037A 		vldr.32	s15, [r2, #-12]	@ int
  97:Src/ADXL345.c **** 	}
 942              		.loc 1 97 39 discriminator 3 view .LVU216
 943 001c 1A1D     		adds	r2, r3, #4
 944 001e 05EB8202 		add	r2, r5, r2, lsl #2
 945 0022 92ED017A 		vldr.32	s14, [r2, #4]
  97:Src/ADXL345.c **** 	}
 946              		.loc 1 97 6 discriminator 3 view .LVU217
 947 0026 04EB8302 		add	r2, r4, r3, lsl #2
  97:Src/ADXL345.c **** 	}
 948              		.loc 1 97 23 discriminator 3 view .LVU218
 949 002a F8EEE77A 		vcvt.f32.s32	s15, s15
 950 002e 67EE877A 		vmul.f32	s15, s15, s14
  97:Src/ADXL345.c **** 	}
 951              		.loc 1 97 10 discriminator 3 view .LVU219
 952 0032 C2ED007A 		vstr.32	s15, [r2]
  96:Src/ADXL345.c **** 		xyz[i] = xyz_int[i] * adxl345->gains[i];
 953              		.loc 1 96 16 is_stmt 1 discriminator 3 view .LVU220
  96:Src/ADXL345.c **** 		xyz[i] = xyz_int[i] * adxl345->gains[i];
 954              		.loc 1 96 17 is_stmt 0 discriminator 3 view .LVU221
 955 0036 0133     		adds	r3, r3, #1
 956              	.LVL80:
 957              	.L47:
  96:Src/ADXL345.c **** 		xyz[i] = xyz_int[i] * adxl345->gains[i];
 958              		.loc 1 96 11 is_stmt 1 discriminator 1 view .LVU222
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 35


  96:Src/ADXL345.c **** 		xyz[i] = xyz_int[i] * adxl345->gains[i];
 959              		.loc 1 96 2 is_stmt 0 discriminator 1 view .LVU223
 960 0038 022B     		cmp	r3, #2
 961 003a EADD     		ble	.L48
  99:Src/ADXL345.c **** 
 962              		.loc 1 99 1 view .LVU224
 963 003c 05B0     		add	sp, sp, #20
 964              	.LCFI29:
 965              		.cfi_def_cfa_offset 12
 966              		@ sp needed
 967 003e 30BD     		pop	{r4, r5, pc}
  99:Src/ADXL345.c **** 
 968              		.loc 1 99 1 view .LVU225
 969              		.cfi_endproc
 970              	.LFE135:
 972              		.section	.text.ADXL345getRangeSetting,"ax",%progbits
 973              		.align	1
 974              		.global	ADXL345getRangeSetting
 975              		.syntax unified
 976              		.thumb
 977              		.thumb_func
 978              		.fpu fpv4-sp-d16
 980              	ADXL345getRangeSetting:
 981              	.LVL81:
 982              	.LFB142:
 176:Src/ADXL345.c **** 	uint8_t _b;
 983              		.loc 1 176 78 is_stmt 1 view -0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 8
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 176:Src/ADXL345.c **** 	uint8_t _b;
 987              		.loc 1 176 78 is_stmt 0 view .LVU227
 988 0000 10B5     		push	{r4, lr}
 989              	.LCFI30:
 990              		.cfi_def_cfa_offset 8
 991              		.cfi_offset 4, -8
 992              		.cfi_offset 14, -4
 993 0002 82B0     		sub	sp, sp, #8
 994              	.LCFI31:
 995              		.cfi_def_cfa_offset 16
 996 0004 0C46     		mov	r4, r1
 177:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_DATA_FORMAT, 1, &_b);
 997              		.loc 1 177 2 is_stmt 1 view .LVU228
 178:Src/ADXL345.c **** 	*rangeSetting = _b & 0b00000011;
 998              		.loc 1 178 2 view .LVU229
 999 0006 0DF10703 		add	r3, sp, #7
 1000 000a 0122     		movs	r2, #1
 1001 000c 3121     		movs	r1, #49
 1002              	.LVL82:
 178:Src/ADXL345.c **** 	*rangeSetting = _b & 0b00000011;
 1003              		.loc 1 178 2 is_stmt 0 view .LVU230
 1004 000e FFF7FEFF 		bl	readFrom
 1005              	.LVL83:
 179:Src/ADXL345.c **** }
 1006              		.loc 1 179 2 is_stmt 1 view .LVU231
 179:Src/ADXL345.c **** }
 1007              		.loc 1 179 21 is_stmt 0 view .LVU232
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 36


 1008 0012 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 1009 0016 03F00303 		and	r3, r3, #3
 179:Src/ADXL345.c **** }
 1010              		.loc 1 179 16 view .LVU233
 1011 001a 2370     		strb	r3, [r4]
 180:Src/ADXL345.c **** 
 1012              		.loc 1 180 1 view .LVU234
 1013 001c 02B0     		add	sp, sp, #8
 1014              	.LCFI32:
 1015              		.cfi_def_cfa_offset 8
 1016              		@ sp needed
 1017 001e 10BD     		pop	{r4, pc}
 180:Src/ADXL345.c **** 
 1018              		.loc 1 180 1 view .LVU235
 1019              		.cfi_endproc
 1020              	.LFE142:
 1022              		.section	.text.ADXL345setRangeSetting,"ax",%progbits
 1023              		.align	1
 1024              		.global	ADXL345setRangeSetting
 1025              		.syntax unified
 1026              		.thumb
 1027              		.thumb_func
 1028              		.fpu fpv4-sp-d16
 1030              	ADXL345setRangeSetting:
 1031              	.LVL84:
 1032              	.LFB143:
 182:Src/ADXL345.c **** 	uint8_t _s;
 1033              		.loc 1 182 64 is_stmt 1 view -0
 1034              		.cfi_startproc
 1035              		@ args = 0, pretend = 0, frame = 8
 1036              		@ frame_needed = 0, uses_anonymous_args = 0
 182:Src/ADXL345.c **** 	uint8_t _s;
 1037              		.loc 1 182 64 is_stmt 0 view .LVU237
 1038 0000 30B5     		push	{r4, r5, lr}
 1039              	.LCFI33:
 1040              		.cfi_def_cfa_offset 12
 1041              		.cfi_offset 4, -12
 1042              		.cfi_offset 5, -8
 1043              		.cfi_offset 14, -4
 1044 0002 83B0     		sub	sp, sp, #12
 1045              	.LCFI34:
 1046              		.cfi_def_cfa_offset 24
 1047 0004 0446     		mov	r4, r0
 183:Src/ADXL345.c **** 	uint8_t _b;
 1048              		.loc 1 183 2 is_stmt 1 view .LVU238
 184:Src/ADXL345.c **** 
 1049              		.loc 1 184 2 view .LVU239
 186:Src/ADXL345.c **** 		case 2:
 1050              		.loc 1 186 2 view .LVU240
 1051 0006 0829     		cmp	r1, #8
 1052 0008 1BD0     		beq	.L54
 1053 000a 1029     		cmp	r1, #16
 1054 000c 1BD0     		beq	.L55
 1055 000e 0429     		cmp	r1, #4
 1056 0010 15D0     		beq	.L58
 1057 0012 0025     		movs	r5, #0
 1058              	.L53:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 37


 1059              	.LVL85:
 202:Src/ADXL345.c **** 	_s |= (_b & 0b11101100);
 1060              		.loc 1 202 2 view .LVU241
 1061 0014 0DF10703 		add	r3, sp, #7
 1062 0018 0122     		movs	r2, #1
 1063 001a 3121     		movs	r1, #49
 1064              	.LVL86:
 202:Src/ADXL345.c **** 	_s |= (_b & 0b11101100);
 1065              		.loc 1 202 2 is_stmt 0 view .LVU242
 1066 001c 2046     		mov	r0, r4
 1067              	.LVL87:
 202:Src/ADXL345.c **** 	_s |= (_b & 0b11101100);
 1068              		.loc 1 202 2 view .LVU243
 1069 001e FFF7FEFF 		bl	readFrom
 1070              	.LVL88:
 203:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_DATA_FORMAT, _s);
 1071              		.loc 1 203 2 is_stmt 1 view .LVU244
 203:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_DATA_FORMAT, _s);
 1072              		.loc 1 203 12 is_stmt 0 view .LVU245
 1073 0022 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 1074 0026 22F01302 		bic	r2, r2, #19
 1075 002a 52B2     		sxtb	r2, r2
 203:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_DATA_FORMAT, _s);
 1076              		.loc 1 203 5 view .LVU246
 1077 002c 2A43     		orrs	r2, r2, r5
 1078              	.LVL89:
 204:Src/ADXL345.c **** }
 1079              		.loc 1 204 2 is_stmt 1 view .LVU247
 1080 002e 02F0EF02 		and	r2, r2, #239
 1081              	.LVL90:
 204:Src/ADXL345.c **** }
 1082              		.loc 1 204 2 is_stmt 0 view .LVU248
 1083 0032 3121     		movs	r1, #49
 1084 0034 2046     		mov	r0, r4
 1085 0036 FFF7FEFF 		bl	writeTo
 1086              	.LVL91:
 205:Src/ADXL345.c **** 
 1087              		.loc 1 205 1 view .LVU249
 1088 003a 03B0     		add	sp, sp, #12
 1089              	.LCFI35:
 1090              		.cfi_remember_state
 1091              		.cfi_def_cfa_offset 12
 1092              		@ sp needed
 1093 003c 30BD     		pop	{r4, r5, pc}
 1094              	.LVL92:
 1095              	.L58:
 1096              	.LCFI36:
 1097              		.cfi_restore_state
 191:Src/ADXL345.c **** 			break;
 1098              		.loc 1 191 7 view .LVU250
 1099 003e 0125     		movs	r5, #1
 1100 0040 E8E7     		b	.L53
 1101              	.L54:
 194:Src/ADXL345.c **** 			break;
 1102              		.loc 1 194 7 view .LVU251
 1103 0042 0225     		movs	r5, #2
 1104 0044 E6E7     		b	.L53
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 38


 1105              	.L55:
 197:Src/ADXL345.c **** 			break;
 1106              		.loc 1 197 7 view .LVU252
 1107 0046 0325     		movs	r5, #3
 1108 0048 E4E7     		b	.L53
 1109              		.cfi_endproc
 1110              	.LFE143:
 1112              		.section	.text.ADXL345getSelfTestBit,"ax",%progbits
 1113              		.align	1
 1114              		.global	ADXL345getSelfTestBit
 1115              		.syntax unified
 1116              		.thumb
 1117              		.thumb_func
 1118              		.fpu fpv4-sp-d16
 1120              	ADXL345getSelfTestBit:
 1121              	.LVL93:
 1122              	.LFB144:
 209:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 7);
 1123              		.loc 1 209 54 is_stmt 1 view -0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 0
 1126              		@ frame_needed = 0, uses_anonymous_args = 0
 209:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 7);
 1127              		.loc 1 209 54 is_stmt 0 view .LVU254
 1128 0000 08B5     		push	{r3, lr}
 1129              	.LCFI37:
 1130              		.cfi_def_cfa_offset 8
 1131              		.cfi_offset 3, -8
 1132              		.cfi_offset 14, -4
 210:Src/ADXL345.c **** }
 1133              		.loc 1 210 2 is_stmt 1 view .LVU255
 210:Src/ADXL345.c **** }
 1134              		.loc 1 210 9 is_stmt 0 view .LVU256
 1135 0002 0722     		movs	r2, #7
 1136 0004 3121     		movs	r1, #49
 1137 0006 FFF7FEFF 		bl	getRegisterBit
 1138              	.LVL94:
 211:Src/ADXL345.c **** 
 1139              		.loc 1 211 1 view .LVU257
 1140 000a 08BD     		pop	{r3, pc}
 1141              		.cfi_endproc
 1142              	.LFE144:
 1144              		.section	.text.ADXL345setSelfTestBit,"ax",%progbits
 1145              		.align	1
 1146              		.global	ADXL345setSelfTestBit
 1147              		.syntax unified
 1148              		.thumb
 1149              		.thumb_func
 1150              		.fpu fpv4-sp-d16
 1152              	ADXL345setSelfTestBit:
 1153              	.LVL95:
 1154              	.LFB145:
 216:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 7, selfTestBit);
 1155              		.loc 1 216 72 is_stmt 1 view -0
 1156              		.cfi_startproc
 1157              		@ args = 0, pretend = 0, frame = 0
 1158              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 39


 216:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 7, selfTestBit);
 1159              		.loc 1 216 72 is_stmt 0 view .LVU259
 1160 0000 08B5     		push	{r3, lr}
 1161              	.LCFI38:
 1162              		.cfi_def_cfa_offset 8
 1163              		.cfi_offset 3, -8
 1164              		.cfi_offset 14, -4
 1165 0002 0B46     		mov	r3, r1
 217:Src/ADXL345.c **** }
 1166              		.loc 1 217 2 is_stmt 1 view .LVU260
 1167 0004 0722     		movs	r2, #7
 1168 0006 3121     		movs	r1, #49
 1169              	.LVL96:
 217:Src/ADXL345.c **** }
 1170              		.loc 1 217 2 is_stmt 0 view .LVU261
 1171 0008 FFF7FEFF 		bl	setRegisterBit
 1172              	.LVL97:
 218:Src/ADXL345.c **** 
 1173              		.loc 1 218 1 view .LVU262
 1174 000c 08BD     		pop	{r3, pc}
 1175              		.cfi_endproc
 1176              	.LFE145:
 1178              		.section	.text.ADXL345getSpiBit,"ax",%progbits
 1179              		.align	1
 1180              		.global	ADXL345getSpiBit
 1181              		.syntax unified
 1182              		.thumb
 1183              		.thumb_func
 1184              		.fpu fpv4-sp-d16
 1186              	ADXL345getSpiBit:
 1187              	.LVL98:
 1188              	.LFB146:
 222:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 6);
 1189              		.loc 1 222 49 is_stmt 1 view -0
 1190              		.cfi_startproc
 1191              		@ args = 0, pretend = 0, frame = 0
 1192              		@ frame_needed = 0, uses_anonymous_args = 0
 222:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 6);
 1193              		.loc 1 222 49 is_stmt 0 view .LVU264
 1194 0000 08B5     		push	{r3, lr}
 1195              	.LCFI39:
 1196              		.cfi_def_cfa_offset 8
 1197              		.cfi_offset 3, -8
 1198              		.cfi_offset 14, -4
 223:Src/ADXL345.c **** }
 1199              		.loc 1 223 2 is_stmt 1 view .LVU265
 223:Src/ADXL345.c **** }
 1200              		.loc 1 223 9 is_stmt 0 view .LVU266
 1201 0002 0622     		movs	r2, #6
 1202 0004 3121     		movs	r1, #49
 1203 0006 FFF7FEFF 		bl	getRegisterBit
 1204              	.LVL99:
 224:Src/ADXL345.c **** 
 1205              		.loc 1 224 1 view .LVU267
 1206 000a 08BD     		pop	{r3, pc}
 1207              		.cfi_endproc
 1208              	.LFE146:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 40


 1210              		.section	.text.ADXL345setSpiBit,"ax",%progbits
 1211              		.align	1
 1212              		.global	ADXL345setSpiBit
 1213              		.syntax unified
 1214              		.thumb
 1215              		.thumb_func
 1216              		.fpu fpv4-sp-d16
 1218              	ADXL345setSpiBit:
 1219              	.LVL100:
 1220              	.LFB147:
 228:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 6, spiBit);
 1221              		.loc 1 228 62 is_stmt 1 view -0
 1222              		.cfi_startproc
 1223              		@ args = 0, pretend = 0, frame = 0
 1224              		@ frame_needed = 0, uses_anonymous_args = 0
 228:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 6, spiBit);
 1225              		.loc 1 228 62 is_stmt 0 view .LVU269
 1226 0000 08B5     		push	{r3, lr}
 1227              	.LCFI40:
 1228              		.cfi_def_cfa_offset 8
 1229              		.cfi_offset 3, -8
 1230              		.cfi_offset 14, -4
 1231 0002 0B46     		mov	r3, r1
 229:Src/ADXL345.c **** }
 1232              		.loc 1 229 2 is_stmt 1 view .LVU270
 1233 0004 0622     		movs	r2, #6
 1234 0006 3121     		movs	r1, #49
 1235              	.LVL101:
 229:Src/ADXL345.c **** }
 1236              		.loc 1 229 2 is_stmt 0 view .LVU271
 1237 0008 FFF7FEFF 		bl	setRegisterBit
 1238              	.LVL102:
 230:Src/ADXL345.c **** 
 1239              		.loc 1 230 1 view .LVU272
 1240 000c 08BD     		pop	{r3, pc}
 1241              		.cfi_endproc
 1242              	.LFE147:
 1244              		.section	.text.ADXL345getInterruptLevelBit,"ax",%progbits
 1245              		.align	1
 1246              		.global	ADXL345getInterruptLevelBit
 1247              		.syntax unified
 1248              		.thumb
 1249              		.thumb_func
 1250              		.fpu fpv4-sp-d16
 1252              	ADXL345getInterruptLevelBit:
 1253              	.LVL103:
 1254              	.LFB148:
 234:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 5);
 1255              		.loc 1 234 60 is_stmt 1 view -0
 1256              		.cfi_startproc
 1257              		@ args = 0, pretend = 0, frame = 0
 1258              		@ frame_needed = 0, uses_anonymous_args = 0
 234:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 5);
 1259              		.loc 1 234 60 is_stmt 0 view .LVU274
 1260 0000 08B5     		push	{r3, lr}
 1261              	.LCFI41:
 1262              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 41


 1263              		.cfi_offset 3, -8
 1264              		.cfi_offset 14, -4
 235:Src/ADXL345.c **** }
 1265              		.loc 1 235 2 is_stmt 1 view .LVU275
 235:Src/ADXL345.c **** }
 1266              		.loc 1 235 9 is_stmt 0 view .LVU276
 1267 0002 0522     		movs	r2, #5
 1268 0004 3121     		movs	r1, #49
 1269 0006 FFF7FEFF 		bl	getRegisterBit
 1270              	.LVL104:
 236:Src/ADXL345.c **** 
 1271              		.loc 1 236 1 view .LVU277
 1272 000a 08BD     		pop	{r3, pc}
 1273              		.cfi_endproc
 1274              	.LFE148:
 1276              		.section	.text.ADXL345setInterruptLevelBit,"ax",%progbits
 1277              		.align	1
 1278              		.global	ADXL345setInterruptLevelBit
 1279              		.syntax unified
 1280              		.thumb
 1281              		.thumb_func
 1282              		.fpu fpv4-sp-d16
 1284              	ADXL345setInterruptLevelBit:
 1285              	.LVL105:
 1286              	.LFB149:
 240:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 5, interruptLevelBit);
 1287              		.loc 1 240 84 is_stmt 1 view -0
 1288              		.cfi_startproc
 1289              		@ args = 0, pretend = 0, frame = 0
 1290              		@ frame_needed = 0, uses_anonymous_args = 0
 240:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 5, interruptLevelBit);
 1291              		.loc 1 240 84 is_stmt 0 view .LVU279
 1292 0000 08B5     		push	{r3, lr}
 1293              	.LCFI42:
 1294              		.cfi_def_cfa_offset 8
 1295              		.cfi_offset 3, -8
 1296              		.cfi_offset 14, -4
 1297 0002 0B46     		mov	r3, r1
 241:Src/ADXL345.c **** }
 1298              		.loc 1 241 2 is_stmt 1 view .LVU280
 1299 0004 0522     		movs	r2, #5
 1300 0006 3121     		movs	r1, #49
 1301              	.LVL106:
 241:Src/ADXL345.c **** }
 1302              		.loc 1 241 2 is_stmt 0 view .LVU281
 1303 0008 FFF7FEFF 		bl	setRegisterBit
 1304              	.LVL107:
 242:Src/ADXL345.c **** 
 1305              		.loc 1 242 1 view .LVU282
 1306 000c 08BD     		pop	{r3, pc}
 1307              		.cfi_endproc
 1308              	.LFE149:
 1310              		.section	.text.ADXL345getFullResBit,"ax",%progbits
 1311              		.align	1
 1312              		.global	ADXL345getFullResBit
 1313              		.syntax unified
 1314              		.thumb
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 42


 1315              		.thumb_func
 1316              		.fpu fpv4-sp-d16
 1318              	ADXL345getFullResBit:
 1319              	.LVL108:
 1320              	.LFB150:
 246:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 3);
 1321              		.loc 1 246 53 is_stmt 1 view -0
 1322              		.cfi_startproc
 1323              		@ args = 0, pretend = 0, frame = 0
 1324              		@ frame_needed = 0, uses_anonymous_args = 0
 246:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 3);
 1325              		.loc 1 246 53 is_stmt 0 view .LVU284
 1326 0000 08B5     		push	{r3, lr}
 1327              	.LCFI43:
 1328              		.cfi_def_cfa_offset 8
 1329              		.cfi_offset 3, -8
 1330              		.cfi_offset 14, -4
 247:Src/ADXL345.c **** }
 1331              		.loc 1 247 2 is_stmt 1 view .LVU285
 247:Src/ADXL345.c **** }
 1332              		.loc 1 247 9 is_stmt 0 view .LVU286
 1333 0002 0322     		movs	r2, #3
 1334 0004 3121     		movs	r1, #49
 1335 0006 FFF7FEFF 		bl	getRegisterBit
 1336              	.LVL109:
 248:Src/ADXL345.c **** 
 1337              		.loc 1 248 1 view .LVU287
 1338 000a 08BD     		pop	{r3, pc}
 1339              		.cfi_endproc
 1340              	.LFE150:
 1342              		.section	.text.ADXL345setFullResBit,"ax",%progbits
 1343              		.align	1
 1344              		.global	ADXL345setFullResBit
 1345              		.syntax unified
 1346              		.thumb
 1347              		.thumb_func
 1348              		.fpu fpv4-sp-d16
 1350              	ADXL345setFullResBit:
 1351              	.LVL110:
 1352              	.LFB151:
 254:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 3, fullResBit);
 1353              		.loc 1 254 70 is_stmt 1 view -0
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 0
 1356              		@ frame_needed = 0, uses_anonymous_args = 0
 254:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 3, fullResBit);
 1357              		.loc 1 254 70 is_stmt 0 view .LVU289
 1358 0000 08B5     		push	{r3, lr}
 1359              	.LCFI44:
 1360              		.cfi_def_cfa_offset 8
 1361              		.cfi_offset 3, -8
 1362              		.cfi_offset 14, -4
 1363 0002 0B46     		mov	r3, r1
 255:Src/ADXL345.c **** }
 1364              		.loc 1 255 2 is_stmt 1 view .LVU290
 1365 0004 0322     		movs	r2, #3
 1366 0006 3121     		movs	r1, #49
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 43


 1367              	.LVL111:
 255:Src/ADXL345.c **** }
 1368              		.loc 1 255 2 is_stmt 0 view .LVU291
 1369 0008 FFF7FEFF 		bl	setRegisterBit
 1370              	.LVL112:
 256:Src/ADXL345.c **** 
 1371              		.loc 1 256 1 view .LVU292
 1372 000c 08BD     		pop	{r3, pc}
 1373              		.cfi_endproc
 1374              	.LFE151:
 1376              		.section	.text.ADXL345getJustifyBit,"ax",%progbits
 1377              		.align	1
 1378              		.global	ADXL345getJustifyBit
 1379              		.syntax unified
 1380              		.thumb
 1381              		.thumb_func
 1382              		.fpu fpv4-sp-d16
 1384              	ADXL345getJustifyBit:
 1385              	.LVL113:
 1386              	.LFB152:
 260:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 2);
 1387              		.loc 1 260 53 is_stmt 1 view -0
 1388              		.cfi_startproc
 1389              		@ args = 0, pretend = 0, frame = 0
 1390              		@ frame_needed = 0, uses_anonymous_args = 0
 260:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_DATA_FORMAT, 2);
 1391              		.loc 1 260 53 is_stmt 0 view .LVU294
 1392 0000 08B5     		push	{r3, lr}
 1393              	.LCFI45:
 1394              		.cfi_def_cfa_offset 8
 1395              		.cfi_offset 3, -8
 1396              		.cfi_offset 14, -4
 261:Src/ADXL345.c **** }
 1397              		.loc 1 261 2 is_stmt 1 view .LVU295
 261:Src/ADXL345.c **** }
 1398              		.loc 1 261 9 is_stmt 0 view .LVU296
 1399 0002 0222     		movs	r2, #2
 1400 0004 3121     		movs	r1, #49
 1401 0006 FFF7FEFF 		bl	getRegisterBit
 1402              	.LVL114:
 262:Src/ADXL345.c **** 
 1403              		.loc 1 262 1 view .LVU297
 1404 000a 08BD     		pop	{r3, pc}
 1405              		.cfi_endproc
 1406              	.LFE152:
 1408              		.section	.text.ADXL345setJustifyBit,"ax",%progbits
 1409              		.align	1
 1410              		.global	ADXL345setJustifyBit
 1411              		.syntax unified
 1412              		.thumb
 1413              		.thumb_func
 1414              		.fpu fpv4-sp-d16
 1416              	ADXL345setJustifyBit:
 1417              	.LVL115:
 1418              	.LFB153:
 266:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 2, justifyBit);
 1419              		.loc 1 266 70 is_stmt 1 view -0
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 44


 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 0
 1422              		@ frame_needed = 0, uses_anonymous_args = 0
 266:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_DATA_FORMAT, 2, justifyBit);
 1423              		.loc 1 266 70 is_stmt 0 view .LVU299
 1424 0000 08B5     		push	{r3, lr}
 1425              	.LCFI46:
 1426              		.cfi_def_cfa_offset 8
 1427              		.cfi_offset 3, -8
 1428              		.cfi_offset 14, -4
 1429 0002 0B46     		mov	r3, r1
 267:Src/ADXL345.c **** }
 1430              		.loc 1 267 2 is_stmt 1 view .LVU300
 1431 0004 0222     		movs	r2, #2
 1432 0006 3121     		movs	r1, #49
 1433              	.LVL116:
 267:Src/ADXL345.c **** }
 1434              		.loc 1 267 2 is_stmt 0 view .LVU301
 1435 0008 FFF7FEFF 		bl	setRegisterBit
 1436              	.LVL117:
 268:Src/ADXL345.c **** 
 1437              		.loc 1 268 1 view .LVU302
 1438 000c 08BD     		pop	{r3, pc}
 1439              		.cfi_endproc
 1440              	.LFE153:
 1442              		.section	.text.ADXL345setTapThreshold,"ax",%progbits
 1443              		.align	1
 1444              		.global	ADXL345setTapThreshold
 1445              		.syntax unified
 1446              		.thumb
 1447              		.thumb_func
 1448              		.fpu fpv4-sp-d16
 1450              	ADXL345setTapThreshold:
 1451              	.LVL118:
 1452              	.LFB154:
 275:Src/ADXL345.c **** 	tapThreshold = constrain(adxl345, tapThreshold, 0, 255);
 1453              		.loc 1 275 73 is_stmt 1 view -0
 1454              		.cfi_startproc
 1455              		@ args = 0, pretend = 0, frame = 0
 1456              		@ frame_needed = 0, uses_anonymous_args = 0
 275:Src/ADXL345.c **** 	tapThreshold = constrain(adxl345, tapThreshold, 0, 255);
 1457              		.loc 1 275 73 is_stmt 0 view .LVU304
 1458 0000 10B5     		push	{r4, lr}
 1459              	.LCFI47:
 1460              		.cfi_def_cfa_offset 8
 1461              		.cfi_offset 4, -8
 1462              		.cfi_offset 14, -4
 1463 0002 0446     		mov	r4, r0
 276:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) tapThreshold;
 1464              		.loc 1 276 2 is_stmt 1 view .LVU305
 276:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) tapThreshold;
 1465              		.loc 1 276 17 is_stmt 0 view .LVU306
 1466 0004 FF23     		movs	r3, #255
 1467 0006 0022     		movs	r2, #0
 1468 0008 FFF7FEFF 		bl	constrain
 1469              	.LVL119:
 277:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_THRESH_TAP, _b);
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 45


 1470              		.loc 1 277 2 is_stmt 1 view .LVU307
 278:Src/ADXL345.c **** }
 1471              		.loc 1 278 2 view .LVU308
 1472 000c C2B2     		uxtb	r2, r0
 1473 000e 1D21     		movs	r1, #29
 1474 0010 2046     		mov	r0, r4
 1475              	.LVL120:
 278:Src/ADXL345.c **** }
 1476              		.loc 1 278 2 is_stmt 0 view .LVU309
 1477 0012 FFF7FEFF 		bl	writeTo
 1478              	.LVL121:
 279:Src/ADXL345.c **** 
 1479              		.loc 1 279 1 view .LVU310
 1480 0016 10BD     		pop	{r4, pc}
 279:Src/ADXL345.c **** 
 1481              		.loc 1 279 1 view .LVU311
 1482              		.cfi_endproc
 1483              	.LFE154:
 1485              		.section	.text.ADXL345getTapThreshold,"ax",%progbits
 1486              		.align	1
 1487              		.global	ADXL345getTapThreshold
 1488              		.syntax unified
 1489              		.thumb
 1490              		.thumb_func
 1491              		.fpu fpv4-sp-d16
 1493              	ADXL345getTapThreshold:
 1494              	.LVL122:
 1495              	.LFB156:
 292:Src/ADXL345.c **** 	uint8_t _b;
 1496              		.loc 1 292 54 is_stmt 1 view -0
 1497              		.cfi_startproc
 1498              		@ args = 0, pretend = 0, frame = 8
 1499              		@ frame_needed = 0, uses_anonymous_args = 0
 292:Src/ADXL345.c **** 	uint8_t _b;
 1500              		.loc 1 292 54 is_stmt 0 view .LVU313
 1501 0000 00B5     		push	{lr}
 1502              	.LCFI48:
 1503              		.cfi_def_cfa_offset 4
 1504              		.cfi_offset 14, -4
 1505 0002 83B0     		sub	sp, sp, #12
 1506              	.LCFI49:
 1507              		.cfi_def_cfa_offset 16
 293:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_THRESH_TAP, 1, &_b);
 1508              		.loc 1 293 2 is_stmt 1 view .LVU314
 294:Src/ADXL345.c **** 	return (int) _b;
 1509              		.loc 1 294 2 view .LVU315
 1510 0004 0DF10703 		add	r3, sp, #7
 1511 0008 0122     		movs	r2, #1
 1512 000a 1D21     		movs	r1, #29
 1513 000c FFF7FEFF 		bl	readFrom
 1514              	.LVL123:
 295:Src/ADXL345.c **** }
 1515              		.loc 1 295 2 view .LVU316
 296:Src/ADXL345.c **** 
 1516              		.loc 1 296 1 is_stmt 0 view .LVU317
 1517 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1518 0014 03B0     		add	sp, sp, #12
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 46


 1519              	.LCFI50:
 1520              		.cfi_def_cfa_offset 4
 1521              		@ sp needed
 1522 0016 5DF804FB 		ldr	pc, [sp], #4
 1523              		.cfi_endproc
 1524              	.LFE156:
 1526              		.section	.text.ADXL345setAxisGains,"ax",%progbits
 1527              		.align	1
 1528              		.global	ADXL345setAxisGains
 1529              		.syntax unified
 1530              		.thumb
 1531              		.thumb_func
 1532              		.fpu fpv4-sp-d16
 1534              	ADXL345setAxisGains:
 1535              	.LVL124:
 1536              	.LFB157:
 300:Src/ADXL345.c **** 	int i;
 1537              		.loc 1 300 66 is_stmt 1 view -0
 1538              		.cfi_startproc
 1539              		@ args = 0, pretend = 0, frame = 0
 1540              		@ frame_needed = 0, uses_anonymous_args = 0
 1541              		@ link register save eliminated.
 301:Src/ADXL345.c **** 	for(i = 0; i < 3; i++){
 1542              		.loc 1 301 2 view .LVU319
 302:Src/ADXL345.c **** 		adxl345->gains[i] = _gains[i];
 1543              		.loc 1 302 2 view .LVU320
 302:Src/ADXL345.c **** 		adxl345->gains[i] = _gains[i];
 1544              		.loc 1 302 8 is_stmt 0 view .LVU321
 1545 0000 0023     		movs	r3, #0
 302:Src/ADXL345.c **** 		adxl345->gains[i] = _gains[i];
 1546              		.loc 1 302 2 view .LVU322
 1547 0002 09E0     		b	.L84
 1548              	.LVL125:
 1549              	.L85:
 303:Src/ADXL345.c **** 	}
 1550              		.loc 1 303 3 is_stmt 1 discriminator 3 view .LVU323
 303:Src/ADXL345.c **** 	}
 1551              		.loc 1 303 29 is_stmt 0 discriminator 3 view .LVU324
 1552 0004 01EB8302 		add	r2, r1, r3, lsl #2
 1553 0008 D2F800C0 		ldr	ip, [r2]	@ float
 303:Src/ADXL345.c **** 	}
 1554              		.loc 1 303 21 discriminator 3 view .LVU325
 1555 000c 1A1D     		adds	r2, r3, #4
 1556 000e 00EB8202 		add	r2, r0, r2, lsl #2
 1557 0012 C2F804C0 		str	ip, [r2, #4]	@ float
 302:Src/ADXL345.c **** 		adxl345->gains[i] = _gains[i];
 1558              		.loc 1 302 20 is_stmt 1 discriminator 3 view .LVU326
 302:Src/ADXL345.c **** 		adxl345->gains[i] = _gains[i];
 1559              		.loc 1 302 21 is_stmt 0 discriminator 3 view .LVU327
 1560 0016 0133     		adds	r3, r3, #1
 1561              	.LVL126:
 1562              	.L84:
 302:Src/ADXL345.c **** 		adxl345->gains[i] = _gains[i];
 1563              		.loc 1 302 13 is_stmt 1 discriminator 1 view .LVU328
 302:Src/ADXL345.c **** 		adxl345->gains[i] = _gains[i];
 1564              		.loc 1 302 2 is_stmt 0 discriminator 1 view .LVU329
 1565 0018 022B     		cmp	r3, #2
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 47


 1566 001a F3DD     		ble	.L85
 305:Src/ADXL345.c **** void ADXL345getAxisGains(ADXL345_SPI_I2C* adxl345, float *_gains){
 1567              		.loc 1 305 1 view .LVU330
 1568 001c 7047     		bx	lr
 1569              		.cfi_endproc
 1570              	.LFE157:
 1572              		.section	.text.ADXL345getAxisGains,"ax",%progbits
 1573              		.align	1
 1574              		.global	ADXL345getAxisGains
 1575              		.syntax unified
 1576              		.thumb
 1577              		.thumb_func
 1578              		.fpu fpv4-sp-d16
 1580              	ADXL345getAxisGains:
 1581              	.LVL127:
 1582              	.LFB158:
 306:Src/ADXL345.c **** 	int i;
 1583              		.loc 1 306 66 is_stmt 1 view -0
 1584              		.cfi_startproc
 1585              		@ args = 0, pretend = 0, frame = 0
 1586              		@ frame_needed = 0, uses_anonymous_args = 0
 1587              		@ link register save eliminated.
 307:Src/ADXL345.c **** 	for(i = 0; i < 3; i++){
 1588              		.loc 1 307 2 view .LVU332
 308:Src/ADXL345.c **** 		_gains[i] = adxl345->gains[i];
 1589              		.loc 1 308 2 view .LVU333
 308:Src/ADXL345.c **** 		_gains[i] = adxl345->gains[i];
 1590              		.loc 1 308 8 is_stmt 0 view .LVU334
 1591 0000 0023     		movs	r3, #0
 308:Src/ADXL345.c **** 		_gains[i] = adxl345->gains[i];
 1592              		.loc 1 308 2 view .LVU335
 1593 0002 08E0     		b	.L87
 1594              	.LVL128:
 1595              	.L88:
 309:Src/ADXL345.c **** 	}
 1596              		.loc 1 309 3 is_stmt 1 discriminator 3 view .LVU336
 309:Src/ADXL345.c **** 	}
 1597              		.loc 1 309 9 is_stmt 0 discriminator 3 view .LVU337
 1598 0004 01EB830C 		add	ip, r1, r3, lsl #2
 309:Src/ADXL345.c **** 	}
 1599              		.loc 1 309 29 discriminator 3 view .LVU338
 1600 0008 1A1D     		adds	r2, r3, #4
 1601 000a 00EB8202 		add	r2, r0, r2, lsl #2
 1602 000e 5268     		ldr	r2, [r2, #4]	@ float
 309:Src/ADXL345.c **** 	}
 1603              		.loc 1 309 13 discriminator 3 view .LVU339
 1604 0010 CCF80020 		str	r2, [ip]	@ float
 308:Src/ADXL345.c **** 		_gains[i] = adxl345->gains[i];
 1605              		.loc 1 308 20 is_stmt 1 discriminator 3 view .LVU340
 308:Src/ADXL345.c **** 		_gains[i] = adxl345->gains[i];
 1606              		.loc 1 308 21 is_stmt 0 discriminator 3 view .LVU341
 1607 0014 0133     		adds	r3, r3, #1
 1608              	.LVL129:
 1609              	.L87:
 308:Src/ADXL345.c **** 		_gains[i] = adxl345->gains[i];
 1610              		.loc 1 308 13 is_stmt 1 discriminator 1 view .LVU342
 308:Src/ADXL345.c **** 		_gains[i] = adxl345->gains[i];
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 48


 1611              		.loc 1 308 2 is_stmt 0 discriminator 1 view .LVU343
 1612 0016 022B     		cmp	r3, #2
 1613 0018 F4DD     		ble	.L88
 311:Src/ADXL345.c **** 
 1614              		.loc 1 311 1 view .LVU344
 1615 001a 7047     		bx	lr
 1616              		.cfi_endproc
 1617              	.LFE158:
 1619              		.section	.text.ADXL345setAxisOffset,"ax",%progbits
 1620              		.align	1
 1621              		.global	ADXL345setAxisOffset
 1622              		.syntax unified
 1623              		.thumb
 1624              		.thumb_func
 1625              		.fpu fpv4-sp-d16
 1627              	ADXL345setAxisOffset:
 1628              	.LVL130:
 1629              	.LFB159:
 317:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_OFSX, (uint8_t) x);
 1630              		.loc 1 317 74 is_stmt 1 view -0
 1631              		.cfi_startproc
 1632              		@ args = 0, pretend = 0, frame = 0
 1633              		@ frame_needed = 0, uses_anonymous_args = 0
 317:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_OFSX, (uint8_t) x);
 1634              		.loc 1 317 74 is_stmt 0 view .LVU346
 1635 0000 70B5     		push	{r4, r5, r6, lr}
 1636              	.LCFI51:
 1637              		.cfi_def_cfa_offset 16
 1638              		.cfi_offset 4, -16
 1639              		.cfi_offset 5, -12
 1640              		.cfi_offset 6, -8
 1641              		.cfi_offset 14, -4
 1642 0002 0446     		mov	r4, r0
 1643 0004 1646     		mov	r6, r2
 1644 0006 1D46     		mov	r5, r3
 318:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_OFSY, (uint8_t) y);
 1645              		.loc 1 318 2 is_stmt 1 view .LVU347
 1646 0008 CAB2     		uxtb	r2, r1
 1647              	.LVL131:
 318:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_OFSY, (uint8_t) y);
 1648              		.loc 1 318 2 is_stmt 0 view .LVU348
 1649 000a 1E21     		movs	r1, #30
 1650              	.LVL132:
 318:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_OFSY, (uint8_t) y);
 1651              		.loc 1 318 2 view .LVU349
 1652 000c FFF7FEFF 		bl	writeTo
 1653              	.LVL133:
 319:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_OFSZ, (uint8_t) z);
 1654              		.loc 1 319 2 is_stmt 1 view .LVU350
 1655 0010 F2B2     		uxtb	r2, r6
 1656 0012 1F21     		movs	r1, #31
 1657 0014 2046     		mov	r0, r4
 1658 0016 FFF7FEFF 		bl	writeTo
 1659              	.LVL134:
 320:Src/ADXL345.c **** }
 1660              		.loc 1 320 2 view .LVU351
 1661 001a EAB2     		uxtb	r2, r5
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 49


 1662 001c 2021     		movs	r1, #32
 1663 001e 2046     		mov	r0, r4
 1664 0020 FFF7FEFF 		bl	writeTo
 1665              	.LVL135:
 321:Src/ADXL345.c **** 
 1666              		.loc 1 321 1 is_stmt 0 view .LVU352
 1667 0024 70BD     		pop	{r4, r5, r6, pc}
 321:Src/ADXL345.c **** 
 1668              		.loc 1 321 1 view .LVU353
 1669              		.cfi_endproc
 1670              	.LFE159:
 1672              		.section	.text.ADXL345getAxisOffset,"ax",%progbits
 1673              		.align	1
 1674              		.global	ADXL345getAxisOffset
 1675              		.syntax unified
 1676              		.thumb
 1677              		.thumb_func
 1678              		.fpu fpv4-sp-d16
 1680              	ADXL345getAxisOffset:
 1681              	.LVL136:
 1682              	.LFB160:
 323:Src/ADXL345.c **** 	uint8_t _b;
 1683              		.loc 1 323 76 is_stmt 1 view -0
 1684              		.cfi_startproc
 1685              		@ args = 0, pretend = 0, frame = 8
 1686              		@ frame_needed = 0, uses_anonymous_args = 0
 323:Src/ADXL345.c **** 	uint8_t _b;
 1687              		.loc 1 323 76 is_stmt 0 view .LVU355
 1688 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1689              	.LCFI52:
 1690              		.cfi_def_cfa_offset 20
 1691              		.cfi_offset 4, -20
 1692              		.cfi_offset 5, -16
 1693              		.cfi_offset 6, -12
 1694              		.cfi_offset 7, -8
 1695              		.cfi_offset 14, -4
 1696 0002 83B0     		sub	sp, sp, #12
 1697              	.LCFI53:
 1698              		.cfi_def_cfa_offset 32
 1699 0004 0446     		mov	r4, r0
 1700 0006 0F46     		mov	r7, r1
 1701 0008 1646     		mov	r6, r2
 1702 000a 1D46     		mov	r5, r3
 324:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_OFSX, 1, &_b);
 1703              		.loc 1 324 2 is_stmt 1 view .LVU356
 325:Src/ADXL345.c **** 	*x = (int) _b;
 1704              		.loc 1 325 2 view .LVU357
 1705 000c 0DF10703 		add	r3, sp, #7
 1706              	.LVL137:
 325:Src/ADXL345.c **** 	*x = (int) _b;
 1707              		.loc 1 325 2 is_stmt 0 view .LVU358
 1708 0010 0122     		movs	r2, #1
 1709              	.LVL138:
 325:Src/ADXL345.c **** 	*x = (int) _b;
 1710              		.loc 1 325 2 view .LVU359
 1711 0012 1E21     		movs	r1, #30
 1712              	.LVL139:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 50


 325:Src/ADXL345.c **** 	*x = (int) _b;
 1713              		.loc 1 325 2 view .LVU360
 1714 0014 FFF7FEFF 		bl	readFrom
 1715              	.LVL140:
 326:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_OFSY, 1, &_b);
 1716              		.loc 1 326 2 is_stmt 1 view .LVU361
 326:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_OFSY, 1, &_b);
 1717              		.loc 1 326 7 is_stmt 0 view .LVU362
 1718 0018 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 326:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_OFSY, 1, &_b);
 1719              		.loc 1 326 5 view .LVU363
 1720 001c 3B60     		str	r3, [r7]
 327:Src/ADXL345.c **** 	*y = (int) _b;
 1721              		.loc 1 327 2 is_stmt 1 view .LVU364
 1722 001e 0DF10703 		add	r3, sp, #7
 1723 0022 0122     		movs	r2, #1
 1724 0024 1F21     		movs	r1, #31
 1725 0026 2046     		mov	r0, r4
 1726 0028 FFF7FEFF 		bl	readFrom
 1727              	.LVL141:
 328:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_OFSZ, 1, &_b);
 1728              		.loc 1 328 2 view .LVU365
 328:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_OFSZ, 1, &_b);
 1729              		.loc 1 328 7 is_stmt 0 view .LVU366
 1730 002c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 328:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_OFSZ, 1, &_b);
 1731              		.loc 1 328 5 view .LVU367
 1732 0030 3360     		str	r3, [r6]
 329:Src/ADXL345.c **** 	*z = (int) _b;
 1733              		.loc 1 329 2 is_stmt 1 view .LVU368
 1734 0032 0DF10703 		add	r3, sp, #7
 1735 0036 0122     		movs	r2, #1
 1736 0038 2021     		movs	r1, #32
 1737 003a 2046     		mov	r0, r4
 1738 003c FFF7FEFF 		bl	readFrom
 1739              	.LVL142:
 330:Src/ADXL345.c **** }
 1740              		.loc 1 330 2 view .LVU369
 330:Src/ADXL345.c **** }
 1741              		.loc 1 330 7 is_stmt 0 view .LVU370
 1742 0040 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 330:Src/ADXL345.c **** }
 1743              		.loc 1 330 5 view .LVU371
 1744 0044 2B60     		str	r3, [r5]
 331:Src/ADXL345.c **** 
 1745              		.loc 1 331 1 view .LVU372
 1746 0046 03B0     		add	sp, sp, #12
 1747              	.LCFI54:
 1748              		.cfi_def_cfa_offset 20
 1749              		@ sp needed
 1750 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 331:Src/ADXL345.c **** 
 1751              		.loc 1 331 1 view .LVU373
 1752              		.cfi_endproc
 1753              	.LFE160:
 1755              		.section	.text.ADXL345setTapDuration,"ax",%progbits
 1756              		.align	1
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 51


 1757              		.global	ADXL345setTapDuration
 1758              		.syntax unified
 1759              		.thumb
 1760              		.thumb_func
 1761              		.fpu fpv4-sp-d16
 1763              	ADXL345setTapDuration:
 1764              	.LVL143:
 1765              	.LFB161:
 340:Src/ADXL345.c **** 	tapDuration = constrain(adxl345, tapDuration,0,255);
 1766              		.loc 1 340 71 is_stmt 1 view -0
 1767              		.cfi_startproc
 1768              		@ args = 0, pretend = 0, frame = 0
 1769              		@ frame_needed = 0, uses_anonymous_args = 0
 340:Src/ADXL345.c **** 	tapDuration = constrain(adxl345, tapDuration,0,255);
 1770              		.loc 1 340 71 is_stmt 0 view .LVU375
 1771 0000 10B5     		push	{r4, lr}
 1772              	.LCFI55:
 1773              		.cfi_def_cfa_offset 8
 1774              		.cfi_offset 4, -8
 1775              		.cfi_offset 14, -4
 1776 0002 0446     		mov	r4, r0
 341:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) tapDuration;
 1777              		.loc 1 341 2 is_stmt 1 view .LVU376
 341:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) tapDuration;
 1778              		.loc 1 341 16 is_stmt 0 view .LVU377
 1779 0004 FF23     		movs	r3, #255
 1780 0006 0022     		movs	r2, #0
 1781 0008 FFF7FEFF 		bl	constrain
 1782              	.LVL144:
 342:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_DUR, _b);
 1783              		.loc 1 342 2 is_stmt 1 view .LVU378
 343:Src/ADXL345.c **** }
 1784              		.loc 1 343 2 view .LVU379
 1785 000c C2B2     		uxtb	r2, r0
 1786 000e 2121     		movs	r1, #33
 1787 0010 2046     		mov	r0, r4
 1788              	.LVL145:
 343:Src/ADXL345.c **** }
 1789              		.loc 1 343 2 is_stmt 0 view .LVU380
 1790 0012 FFF7FEFF 		bl	writeTo
 1791              	.LVL146:
 344:Src/ADXL345.c **** 
 1792              		.loc 1 344 1 view .LVU381
 1793 0016 10BD     		pop	{r4, pc}
 344:Src/ADXL345.c **** 
 1794              		.loc 1 344 1 view .LVU382
 1795              		.cfi_endproc
 1796              	.LFE161:
 1798              		.section	.text.ADXL345getTapDuration,"ax",%progbits
 1799              		.align	1
 1800              		.global	ADXL345getTapDuration
 1801              		.syntax unified
 1802              		.thumb
 1803              		.thumb_func
 1804              		.fpu fpv4-sp-d16
 1806              	ADXL345getTapDuration:
 1807              	.LVL147:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 52


 1808              	.LFB162:
 346:Src/ADXL345.c **** 	uint8_t _b;
 1809              		.loc 1 346 53 is_stmt 1 view -0
 1810              		.cfi_startproc
 1811              		@ args = 0, pretend = 0, frame = 8
 1812              		@ frame_needed = 0, uses_anonymous_args = 0
 346:Src/ADXL345.c **** 	uint8_t _b;
 1813              		.loc 1 346 53 is_stmt 0 view .LVU384
 1814 0000 00B5     		push	{lr}
 1815              	.LCFI56:
 1816              		.cfi_def_cfa_offset 4
 1817              		.cfi_offset 14, -4
 1818 0002 83B0     		sub	sp, sp, #12
 1819              	.LCFI57:
 1820              		.cfi_def_cfa_offset 16
 347:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_DUR, 1, &_b);
 1821              		.loc 1 347 2 is_stmt 1 view .LVU385
 348:Src/ADXL345.c **** 	return (int) _b;
 1822              		.loc 1 348 2 view .LVU386
 1823 0004 0DF10703 		add	r3, sp, #7
 1824 0008 0122     		movs	r2, #1
 1825 000a 2121     		movs	r1, #33
 1826 000c FFF7FEFF 		bl	readFrom
 1827              	.LVL148:
 349:Src/ADXL345.c **** }
 1828              		.loc 1 349 2 view .LVU387
 350:Src/ADXL345.c **** 
 1829              		.loc 1 350 1 is_stmt 0 view .LVU388
 1830 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1831 0014 03B0     		add	sp, sp, #12
 1832              	.LCFI58:
 1833              		.cfi_def_cfa_offset 4
 1834              		@ sp needed
 1835 0016 5DF804FB 		ldr	pc, [sp], #4
 1836              		.cfi_endproc
 1837              	.LFE162:
 1839              		.section	.text.ADXL345setDoubleTapLatency,"ax",%progbits
 1840              		.align	1
 1841              		.global	ADXL345setDoubleTapLatency
 1842              		.syntax unified
 1843              		.thumb
 1844              		.thumb_func
 1845              		.fpu fpv4-sp-d16
 1847              	ADXL345setDoubleTapLatency:
 1848              	.LVL149:
 1849              	.LFB163:
 360:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) doubleTapLatency;
 1850              		.loc 1 360 81 is_stmt 1 view -0
 1851              		.cfi_startproc
 1852              		@ args = 0, pretend = 0, frame = 0
 1853              		@ frame_needed = 0, uses_anonymous_args = 0
 360:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) doubleTapLatency;
 1854              		.loc 1 360 81 is_stmt 0 view .LVU390
 1855 0000 08B5     		push	{r3, lr}
 1856              	.LCFI59:
 1857              		.cfi_def_cfa_offset 8
 1858              		.cfi_offset 3, -8
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 53


 1859              		.cfi_offset 14, -4
 361:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_LATENT, _b);
 1860              		.loc 1 361 2 is_stmt 1 view .LVU391
 1861              	.LVL150:
 362:Src/ADXL345.c **** }
 1862              		.loc 1 362 2 view .LVU392
 1863 0002 CAB2     		uxtb	r2, r1
 1864 0004 2221     		movs	r1, #34
 1865              	.LVL151:
 362:Src/ADXL345.c **** }
 1866              		.loc 1 362 2 is_stmt 0 view .LVU393
 1867 0006 FFF7FEFF 		bl	writeTo
 1868              	.LVL152:
 363:Src/ADXL345.c **** 
 1869              		.loc 1 363 1 view .LVU394
 1870 000a 08BD     		pop	{r3, pc}
 1871              		.cfi_endproc
 1872              	.LFE163:
 1874              		.section	.text.ADXL345getDoubleTapLatency,"ax",%progbits
 1875              		.align	1
 1876              		.global	ADXL345getDoubleTapLatency
 1877              		.syntax unified
 1878              		.thumb
 1879              		.thumb_func
 1880              		.fpu fpv4-sp-d16
 1882              	ADXL345getDoubleTapLatency:
 1883              	.LVL153:
 1884              	.LFB164:
 365:Src/ADXL345.c **** 	uint8_t _b;
 1885              		.loc 1 365 58 is_stmt 1 view -0
 1886              		.cfi_startproc
 1887              		@ args = 0, pretend = 0, frame = 8
 1888              		@ frame_needed = 0, uses_anonymous_args = 0
 365:Src/ADXL345.c **** 	uint8_t _b;
 1889              		.loc 1 365 58 is_stmt 0 view .LVU396
 1890 0000 00B5     		push	{lr}
 1891              	.LCFI60:
 1892              		.cfi_def_cfa_offset 4
 1893              		.cfi_offset 14, -4
 1894 0002 83B0     		sub	sp, sp, #12
 1895              	.LCFI61:
 1896              		.cfi_def_cfa_offset 16
 366:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_LATENT, 1, &_b);
 1897              		.loc 1 366 2 is_stmt 1 view .LVU397
 367:Src/ADXL345.c **** 	return (int) _b;
 1898              		.loc 1 367 2 view .LVU398
 1899 0004 0DF10703 		add	r3, sp, #7
 1900 0008 0122     		movs	r2, #1
 1901 000a 2221     		movs	r1, #34
 1902 000c FFF7FEFF 		bl	readFrom
 1903              	.LVL154:
 368:Src/ADXL345.c **** }
 1904              		.loc 1 368 2 view .LVU399
 369:Src/ADXL345.c **** 
 1905              		.loc 1 369 1 is_stmt 0 view .LVU400
 1906 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1907 0014 03B0     		add	sp, sp, #12
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 54


 1908              	.LCFI62:
 1909              		.cfi_def_cfa_offset 4
 1910              		@ sp needed
 1911 0016 5DF804FB 		ldr	pc, [sp], #4
 1912              		.cfi_endproc
 1913              	.LFE164:
 1915              		.section	.text.ADXL345setDoubleTapWindow,"ax",%progbits
 1916              		.align	1
 1917              		.global	ADXL345setDoubleTapWindow
 1918              		.syntax unified
 1919              		.thumb
 1920              		.thumb_func
 1921              		.fpu fpv4-sp-d16
 1923              	ADXL345setDoubleTapWindow:
 1924              	.LVL155:
 1925              	.LFB165:
 379:Src/ADXL345.c **** 	doubleTapWindow = constrain(adxl345, doubleTapWindow, 0, 255);
 1926              		.loc 1 379 79 is_stmt 1 view -0
 1927              		.cfi_startproc
 1928              		@ args = 0, pretend = 0, frame = 0
 1929              		@ frame_needed = 0, uses_anonymous_args = 0
 379:Src/ADXL345.c **** 	doubleTapWindow = constrain(adxl345, doubleTapWindow, 0, 255);
 1930              		.loc 1 379 79 is_stmt 0 view .LVU402
 1931 0000 10B5     		push	{r4, lr}
 1932              	.LCFI63:
 1933              		.cfi_def_cfa_offset 8
 1934              		.cfi_offset 4, -8
 1935              		.cfi_offset 14, -4
 1936 0002 0446     		mov	r4, r0
 380:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) doubleTapWindow;
 1937              		.loc 1 380 2 is_stmt 1 view .LVU403
 380:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) doubleTapWindow;
 1938              		.loc 1 380 20 is_stmt 0 view .LVU404
 1939 0004 FF23     		movs	r3, #255
 1940 0006 0022     		movs	r2, #0
 1941 0008 FFF7FEFF 		bl	constrain
 1942              	.LVL156:
 381:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_WINDOW, _b);
 1943              		.loc 1 381 2 is_stmt 1 view .LVU405
 382:Src/ADXL345.c **** }
 1944              		.loc 1 382 2 view .LVU406
 1945 000c C2B2     		uxtb	r2, r0
 1946 000e 2321     		movs	r1, #35
 1947 0010 2046     		mov	r0, r4
 1948              	.LVL157:
 382:Src/ADXL345.c **** }
 1949              		.loc 1 382 2 is_stmt 0 view .LVU407
 1950 0012 FFF7FEFF 		bl	writeTo
 1951              	.LVL158:
 383:Src/ADXL345.c **** 
 1952              		.loc 1 383 1 view .LVU408
 1953 0016 10BD     		pop	{r4, pc}
 383:Src/ADXL345.c **** 
 1954              		.loc 1 383 1 view .LVU409
 1955              		.cfi_endproc
 1956              	.LFE165:
 1958              		.section	.text.ADXL345getDoubleTapWindow,"ax",%progbits
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 55


 1959              		.align	1
 1960              		.global	ADXL345getDoubleTapWindow
 1961              		.syntax unified
 1962              		.thumb
 1963              		.thumb_func
 1964              		.fpu fpv4-sp-d16
 1966              	ADXL345getDoubleTapWindow:
 1967              	.LVL159:
 1968              	.LFB166:
 385:Src/ADXL345.c **** 	uint8_t _b;
 1969              		.loc 1 385 57 is_stmt 1 view -0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 8
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 385:Src/ADXL345.c **** 	uint8_t _b;
 1973              		.loc 1 385 57 is_stmt 0 view .LVU411
 1974 0000 00B5     		push	{lr}
 1975              	.LCFI64:
 1976              		.cfi_def_cfa_offset 4
 1977              		.cfi_offset 14, -4
 1978 0002 83B0     		sub	sp, sp, #12
 1979              	.LCFI65:
 1980              		.cfi_def_cfa_offset 16
 386:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_WINDOW, 1, &_b);
 1981              		.loc 1 386 2 is_stmt 1 view .LVU412
 387:Src/ADXL345.c **** 	return (int) _b;
 1982              		.loc 1 387 2 view .LVU413
 1983 0004 0DF10703 		add	r3, sp, #7
 1984 0008 0122     		movs	r2, #1
 1985 000a 2321     		movs	r1, #35
 1986 000c FFF7FEFF 		bl	readFrom
 1987              	.LVL160:
 388:Src/ADXL345.c **** }
 1988              		.loc 1 388 2 view .LVU414
 389:Src/ADXL345.c **** 
 1989              		.loc 1 389 1 is_stmt 0 view .LVU415
 1990 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1991 0014 03B0     		add	sp, sp, #12
 1992              	.LCFI66:
 1993              		.cfi_def_cfa_offset 4
 1994              		@ sp needed
 1995 0016 5DF804FB 		ldr	pc, [sp], #4
 1996              		.cfi_endproc
 1997              	.LFE166:
 1999              		.section	.text.ADXL345setActivityThreshold,"ax",%progbits
 2000              		.align	1
 2001              		.global	ADXL345setActivityThreshold
 2002              		.syntax unified
 2003              		.thumb
 2004              		.thumb_func
 2005              		.fpu fpv4-sp-d16
 2007              	ADXL345setActivityThreshold:
 2008              	.LVL161:
 2009              	.LFB167:
 399:Src/ADXL345.c **** 	activityThreshold = constrain(adxl345, activityThreshold, 0, 255);
 2010              		.loc 1 399 83 is_stmt 1 view -0
 2011              		.cfi_startproc
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 56


 2012              		@ args = 0, pretend = 0, frame = 0
 2013              		@ frame_needed = 0, uses_anonymous_args = 0
 399:Src/ADXL345.c **** 	activityThreshold = constrain(adxl345, activityThreshold, 0, 255);
 2014              		.loc 1 399 83 is_stmt 0 view .LVU417
 2015 0000 10B5     		push	{r4, lr}
 2016              	.LCFI67:
 2017              		.cfi_def_cfa_offset 8
 2018              		.cfi_offset 4, -8
 2019              		.cfi_offset 14, -4
 2020 0002 0446     		mov	r4, r0
 400:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) activityThreshold;
 2021              		.loc 1 400 2 is_stmt 1 view .LVU418
 400:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) activityThreshold;
 2022              		.loc 1 400 22 is_stmt 0 view .LVU419
 2023 0004 FF23     		movs	r3, #255
 2024 0006 0022     		movs	r2, #0
 2025 0008 FFF7FEFF 		bl	constrain
 2026              	.LVL162:
 401:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_THRESH_ACT, _b);
 2027              		.loc 1 401 2 is_stmt 1 view .LVU420
 402:Src/ADXL345.c **** }
 2028              		.loc 1 402 2 view .LVU421
 2029 000c C2B2     		uxtb	r2, r0
 2030 000e 2421     		movs	r1, #36
 2031 0010 2046     		mov	r0, r4
 2032              	.LVL163:
 402:Src/ADXL345.c **** }
 2033              		.loc 1 402 2 is_stmt 0 view .LVU422
 2034 0012 FFF7FEFF 		bl	writeTo
 2035              	.LVL164:
 403:Src/ADXL345.c **** 
 2036              		.loc 1 403 1 view .LVU423
 2037 0016 10BD     		pop	{r4, pc}
 403:Src/ADXL345.c **** 
 2038              		.loc 1 403 1 view .LVU424
 2039              		.cfi_endproc
 2040              	.LFE167:
 2042              		.section	.text.ADXL345getActivityThreshold,"ax",%progbits
 2043              		.align	1
 2044              		.global	ADXL345getActivityThreshold
 2045              		.syntax unified
 2046              		.thumb
 2047              		.thumb_func
 2048              		.fpu fpv4-sp-d16
 2050              	ADXL345getActivityThreshold:
 2051              	.LVL165:
 2052              	.LFB168:
 406:Src/ADXL345.c **** 	uint8_t _b;
 2053              		.loc 1 406 59 is_stmt 1 view -0
 2054              		.cfi_startproc
 2055              		@ args = 0, pretend = 0, frame = 8
 2056              		@ frame_needed = 0, uses_anonymous_args = 0
 406:Src/ADXL345.c **** 	uint8_t _b;
 2057              		.loc 1 406 59 is_stmt 0 view .LVU426
 2058 0000 00B5     		push	{lr}
 2059              	.LCFI68:
 2060              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 57


 2061              		.cfi_offset 14, -4
 2062 0002 83B0     		sub	sp, sp, #12
 2063              	.LCFI69:
 2064              		.cfi_def_cfa_offset 16
 407:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_THRESH_ACT, 1, &_b);
 2065              		.loc 1 407 2 is_stmt 1 view .LVU427
 408:Src/ADXL345.c **** 	return (int) _b;
 2066              		.loc 1 408 2 view .LVU428
 2067 0004 0DF10703 		add	r3, sp, #7
 2068 0008 0122     		movs	r2, #1
 2069 000a 2421     		movs	r1, #36
 2070 000c FFF7FEFF 		bl	readFrom
 2071              	.LVL166:
 409:Src/ADXL345.c **** }
 2072              		.loc 1 409 2 view .LVU429
 410:Src/ADXL345.c **** 
 2073              		.loc 1 410 1 is_stmt 0 view .LVU430
 2074 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2075 0014 03B0     		add	sp, sp, #12
 2076              	.LCFI70:
 2077              		.cfi_def_cfa_offset 4
 2078              		@ sp needed
 2079 0016 5DF804FB 		ldr	pc, [sp], #4
 2080              		.cfi_endproc
 2081              	.LFE168:
 2083              		.section	.text.ADXL345setInactivityThreshold,"ax",%progbits
 2084              		.align	1
 2085              		.global	ADXL345setInactivityThreshold
 2086              		.syntax unified
 2087              		.thumb
 2088              		.thumb_func
 2089              		.fpu fpv4-sp-d16
 2091              	ADXL345setInactivityThreshold:
 2092              	.LVL167:
 2093              	.LFB169:
 420:Src/ADXL345.c **** 	inactivityThreshold = constrain(adxl345, inactivityThreshold, 0, 255);
 2094              		.loc 1 420 87 is_stmt 1 view -0
 2095              		.cfi_startproc
 2096              		@ args = 0, pretend = 0, frame = 0
 2097              		@ frame_needed = 0, uses_anonymous_args = 0
 420:Src/ADXL345.c **** 	inactivityThreshold = constrain(adxl345, inactivityThreshold, 0, 255);
 2098              		.loc 1 420 87 is_stmt 0 view .LVU432
 2099 0000 10B5     		push	{r4, lr}
 2100              	.LCFI71:
 2101              		.cfi_def_cfa_offset 8
 2102              		.cfi_offset 4, -8
 2103              		.cfi_offset 14, -4
 2104 0002 0446     		mov	r4, r0
 421:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) inactivityThreshold;
 2105              		.loc 1 421 2 is_stmt 1 view .LVU433
 421:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) inactivityThreshold;
 2106              		.loc 1 421 24 is_stmt 0 view .LVU434
 2107 0004 FF23     		movs	r3, #255
 2108 0006 0022     		movs	r2, #0
 2109 0008 FFF7FEFF 		bl	constrain
 2110              	.LVL168:
 422:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_THRESH_INACT, _b);
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 58


 2111              		.loc 1 422 2 is_stmt 1 view .LVU435
 423:Src/ADXL345.c **** }
 2112              		.loc 1 423 2 view .LVU436
 2113 000c C2B2     		uxtb	r2, r0
 2114 000e 2521     		movs	r1, #37
 2115 0010 2046     		mov	r0, r4
 2116              	.LVL169:
 423:Src/ADXL345.c **** }
 2117              		.loc 1 423 2 is_stmt 0 view .LVU437
 2118 0012 FFF7FEFF 		bl	writeTo
 2119              	.LVL170:
 424:Src/ADXL345.c **** 
 2120              		.loc 1 424 1 view .LVU438
 2121 0016 10BD     		pop	{r4, pc}
 424:Src/ADXL345.c **** 
 2122              		.loc 1 424 1 view .LVU439
 2123              		.cfi_endproc
 2124              	.LFE169:
 2126              		.section	.text.ADXL345getInactivityThreshold,"ax",%progbits
 2127              		.align	1
 2128              		.global	ADXL345getInactivityThreshold
 2129              		.syntax unified
 2130              		.thumb
 2131              		.thumb_func
 2132              		.fpu fpv4-sp-d16
 2134              	ADXL345getInactivityThreshold:
 2135              	.LVL171:
 2136              	.LFB170:
 426:Src/ADXL345.c **** 	uint8_t _b;
 2137              		.loc 1 426 61 is_stmt 1 view -0
 2138              		.cfi_startproc
 2139              		@ args = 0, pretend = 0, frame = 8
 2140              		@ frame_needed = 0, uses_anonymous_args = 0
 426:Src/ADXL345.c **** 	uint8_t _b;
 2141              		.loc 1 426 61 is_stmt 0 view .LVU441
 2142 0000 00B5     		push	{lr}
 2143              	.LCFI72:
 2144              		.cfi_def_cfa_offset 4
 2145              		.cfi_offset 14, -4
 2146 0002 83B0     		sub	sp, sp, #12
 2147              	.LCFI73:
 2148              		.cfi_def_cfa_offset 16
 427:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_THRESH_INACT, 1, &_b);
 2149              		.loc 1 427 2 is_stmt 1 view .LVU442
 428:Src/ADXL345.c **** 	return (int) _b;
 2150              		.loc 1 428 2 view .LVU443
 2151 0004 0DF10703 		add	r3, sp, #7
 2152 0008 0122     		movs	r2, #1
 2153 000a 2521     		movs	r1, #37
 2154 000c FFF7FEFF 		bl	readFrom
 2155              	.LVL172:
 429:Src/ADXL345.c **** }
 2156              		.loc 1 429 2 view .LVU444
 430:Src/ADXL345.c **** 
 2157              		.loc 1 430 1 is_stmt 0 view .LVU445
 2158 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2159 0014 03B0     		add	sp, sp, #12
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 59


 2160              	.LCFI74:
 2161              		.cfi_def_cfa_offset 4
 2162              		@ sp needed
 2163 0016 5DF804FB 		ldr	pc, [sp], #4
 2164              		.cfi_endproc
 2165              	.LFE170:
 2167              		.section	.text.ADXL345setTimeInactivity,"ax",%progbits
 2168              		.align	1
 2169              		.global	ADXL345setTimeInactivity
 2170              		.syntax unified
 2171              		.thumb
 2172              		.thumb_func
 2173              		.fpu fpv4-sp-d16
 2175              	ADXL345setTimeInactivity:
 2176              	.LVL173:
 2177              	.LFB171:
 440:Src/ADXL345.c **** 	timeInactivity = constrain(adxl345, timeInactivity, 0, 255);
 2178              		.loc 1 440 77 is_stmt 1 view -0
 2179              		.cfi_startproc
 2180              		@ args = 0, pretend = 0, frame = 0
 2181              		@ frame_needed = 0, uses_anonymous_args = 0
 440:Src/ADXL345.c **** 	timeInactivity = constrain(adxl345, timeInactivity, 0, 255);
 2182              		.loc 1 440 77 is_stmt 0 view .LVU447
 2183 0000 10B5     		push	{r4, lr}
 2184              	.LCFI75:
 2185              		.cfi_def_cfa_offset 8
 2186              		.cfi_offset 4, -8
 2187              		.cfi_offset 14, -4
 2188 0002 0446     		mov	r4, r0
 441:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) timeInactivity;
 2189              		.loc 1 441 2 is_stmt 1 view .LVU448
 441:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) timeInactivity;
 2190              		.loc 1 441 19 is_stmt 0 view .LVU449
 2191 0004 FF23     		movs	r3, #255
 2192 0006 0022     		movs	r2, #0
 2193 0008 FFF7FEFF 		bl	constrain
 2194              	.LVL174:
 442:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_TIME_INACT, _b);
 2195              		.loc 1 442 2 is_stmt 1 view .LVU450
 443:Src/ADXL345.c **** }
 2196              		.loc 1 443 2 view .LVU451
 2197 000c C2B2     		uxtb	r2, r0
 2198 000e 2621     		movs	r1, #38
 2199 0010 2046     		mov	r0, r4
 2200              	.LVL175:
 443:Src/ADXL345.c **** }
 2201              		.loc 1 443 2 is_stmt 0 view .LVU452
 2202 0012 FFF7FEFF 		bl	writeTo
 2203              	.LVL176:
 444:Src/ADXL345.c **** 
 2204              		.loc 1 444 1 view .LVU453
 2205 0016 10BD     		pop	{r4, pc}
 444:Src/ADXL345.c **** 
 2206              		.loc 1 444 1 view .LVU454
 2207              		.cfi_endproc
 2208              	.LFE171:
 2210              		.section	.text.ADXL345getTimeInactivity,"ax",%progbits
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 60


 2211              		.align	1
 2212              		.global	ADXL345getTimeInactivity
 2213              		.syntax unified
 2214              		.thumb
 2215              		.thumb_func
 2216              		.fpu fpv4-sp-d16
 2218              	ADXL345getTimeInactivity:
 2219              	.LVL177:
 2220              	.LFB172:
 446:Src/ADXL345.c **** 	uint8_t _b;
 2221              		.loc 1 446 56 is_stmt 1 view -0
 2222              		.cfi_startproc
 2223              		@ args = 0, pretend = 0, frame = 8
 2224              		@ frame_needed = 0, uses_anonymous_args = 0
 446:Src/ADXL345.c **** 	uint8_t _b;
 2225              		.loc 1 446 56 is_stmt 0 view .LVU456
 2226 0000 00B5     		push	{lr}
 2227              	.LCFI76:
 2228              		.cfi_def_cfa_offset 4
 2229              		.cfi_offset 14, -4
 2230 0002 83B0     		sub	sp, sp, #12
 2231              	.LCFI77:
 2232              		.cfi_def_cfa_offset 16
 447:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_TIME_INACT, 1, &_b);
 2233              		.loc 1 447 2 is_stmt 1 view .LVU457
 448:Src/ADXL345.c **** 	return (int) _b;
 2234              		.loc 1 448 2 view .LVU458
 2235 0004 0DF10703 		add	r3, sp, #7
 2236 0008 0122     		movs	r2, #1
 2237 000a 2621     		movs	r1, #38
 2238 000c FFF7FEFF 		bl	readFrom
 2239              	.LVL178:
 449:Src/ADXL345.c **** }
 2240              		.loc 1 449 2 view .LVU459
 450:Src/ADXL345.c **** 
 2241              		.loc 1 450 1 is_stmt 0 view .LVU460
 2242 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2243 0014 03B0     		add	sp, sp, #12
 2244              	.LCFI78:
 2245              		.cfi_def_cfa_offset 4
 2246              		@ sp needed
 2247 0016 5DF804FB 		ldr	pc, [sp], #4
 2248              		.cfi_endproc
 2249              	.LFE172:
 2251              		.section	.text.ADXL345setFreeFallThreshold,"ax",%progbits
 2252              		.align	1
 2253              		.global	ADXL345setFreeFallThreshold
 2254              		.syntax unified
 2255              		.thumb
 2256              		.thumb_func
 2257              		.fpu fpv4-sp-d16
 2259              	ADXL345setFreeFallThreshold:
 2260              	.LVL179:
 2261              	.LFB173:
 460:Src/ADXL345.c **** 	freeFallThreshold = constrain(adxl345, freeFallThreshold, 0, 255);
 2262              		.loc 1 460 83 is_stmt 1 view -0
 2263              		.cfi_startproc
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 61


 2264              		@ args = 0, pretend = 0, frame = 0
 2265              		@ frame_needed = 0, uses_anonymous_args = 0
 460:Src/ADXL345.c **** 	freeFallThreshold = constrain(adxl345, freeFallThreshold, 0, 255);
 2266              		.loc 1 460 83 is_stmt 0 view .LVU462
 2267 0000 10B5     		push	{r4, lr}
 2268              	.LCFI79:
 2269              		.cfi_def_cfa_offset 8
 2270              		.cfi_offset 4, -8
 2271              		.cfi_offset 14, -4
 2272 0002 0446     		mov	r4, r0
 461:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) freeFallThreshold;
 2273              		.loc 1 461 2 is_stmt 1 view .LVU463
 461:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) freeFallThreshold;
 2274              		.loc 1 461 22 is_stmt 0 view .LVU464
 2275 0004 FF23     		movs	r3, #255
 2276 0006 0022     		movs	r2, #0
 2277 0008 FFF7FEFF 		bl	constrain
 2278              	.LVL180:
 462:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_THRESH_FF, _b);
 2279              		.loc 1 462 2 is_stmt 1 view .LVU465
 463:Src/ADXL345.c **** }
 2280              		.loc 1 463 2 view .LVU466
 2281 000c C2B2     		uxtb	r2, r0
 2282 000e 2821     		movs	r1, #40
 2283 0010 2046     		mov	r0, r4
 2284              	.LVL181:
 463:Src/ADXL345.c **** }
 2285              		.loc 1 463 2 is_stmt 0 view .LVU467
 2286 0012 FFF7FEFF 		bl	writeTo
 2287              	.LVL182:
 464:Src/ADXL345.c **** 
 2288              		.loc 1 464 1 view .LVU468
 2289 0016 10BD     		pop	{r4, pc}
 464:Src/ADXL345.c **** 
 2290              		.loc 1 464 1 view .LVU469
 2291              		.cfi_endproc
 2292              	.LFE173:
 2294              		.section	.text.ADXL345getFreeFallThreshold,"ax",%progbits
 2295              		.align	1
 2296              		.global	ADXL345getFreeFallThreshold
 2297              		.syntax unified
 2298              		.thumb
 2299              		.thumb_func
 2300              		.fpu fpv4-sp-d16
 2302              	ADXL345getFreeFallThreshold:
 2303              	.LVL183:
 2304              	.LFB174:
 466:Src/ADXL345.c **** 	uint8_t _b;
 2305              		.loc 1 466 59 is_stmt 1 view -0
 2306              		.cfi_startproc
 2307              		@ args = 0, pretend = 0, frame = 8
 2308              		@ frame_needed = 0, uses_anonymous_args = 0
 466:Src/ADXL345.c **** 	uint8_t _b;
 2309              		.loc 1 466 59 is_stmt 0 view .LVU471
 2310 0000 00B5     		push	{lr}
 2311              	.LCFI80:
 2312              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 62


 2313              		.cfi_offset 14, -4
 2314 0002 83B0     		sub	sp, sp, #12
 2315              	.LCFI81:
 2316              		.cfi_def_cfa_offset 16
 467:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_THRESH_FF, 1, &_b);
 2317              		.loc 1 467 2 is_stmt 1 view .LVU472
 468:Src/ADXL345.c **** 	return (int) _b;
 2318              		.loc 1 468 2 view .LVU473
 2319 0004 0DF10703 		add	r3, sp, #7
 2320 0008 0122     		movs	r2, #1
 2321 000a 2821     		movs	r1, #40
 2322 000c FFF7FEFF 		bl	readFrom
 2323              	.LVL184:
 469:Src/ADXL345.c **** }
 2324              		.loc 1 469 2 view .LVU474
 470:Src/ADXL345.c **** 
 2325              		.loc 1 470 1 is_stmt 0 view .LVU475
 2326 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2327 0014 03B0     		add	sp, sp, #12
 2328              	.LCFI82:
 2329              		.cfi_def_cfa_offset 4
 2330              		@ sp needed
 2331 0016 5DF804FB 		ldr	pc, [sp], #4
 2332              		.cfi_endproc
 2333              	.LFE174:
 2335              		.section	.text.ADXL345setFreeFallDuration,"ax",%progbits
 2336              		.align	1
 2337              		.global	ADXL345setFreeFallDuration
 2338              		.syntax unified
 2339              		.thumb
 2340              		.thumb_func
 2341              		.fpu fpv4-sp-d16
 2343              	ADXL345setFreeFallDuration:
 2344              	.LVL185:
 2345              	.LFB175:
 479:Src/ADXL345.c **** 	freeFallDuration = constrain(adxl345, freeFallDuration, 0, 255);
 2346              		.loc 1 479 81 is_stmt 1 view -0
 2347              		.cfi_startproc
 2348              		@ args = 0, pretend = 0, frame = 0
 2349              		@ frame_needed = 0, uses_anonymous_args = 0
 479:Src/ADXL345.c **** 	freeFallDuration = constrain(adxl345, freeFallDuration, 0, 255);
 2350              		.loc 1 479 81 is_stmt 0 view .LVU477
 2351 0000 10B5     		push	{r4, lr}
 2352              	.LCFI83:
 2353              		.cfi_def_cfa_offset 8
 2354              		.cfi_offset 4, -8
 2355              		.cfi_offset 14, -4
 2356 0002 0446     		mov	r4, r0
 480:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) freeFallDuration;
 2357              		.loc 1 480 2 is_stmt 1 view .LVU478
 480:Src/ADXL345.c **** 	uint8_t _b = (uint8_t) freeFallDuration;
 2358              		.loc 1 480 21 is_stmt 0 view .LVU479
 2359 0004 FF23     		movs	r3, #255
 2360 0006 0022     		movs	r2, #0
 2361 0008 FFF7FEFF 		bl	constrain
 2362              	.LVL186:
 481:Src/ADXL345.c **** 	writeTo(adxl345, ADXL345_TIME_FF, _b);
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 63


 2363              		.loc 1 481 2 is_stmt 1 view .LVU480
 482:Src/ADXL345.c **** }
 2364              		.loc 1 482 2 view .LVU481
 2365 000c C2B2     		uxtb	r2, r0
 2366 000e 2921     		movs	r1, #41
 2367 0010 2046     		mov	r0, r4
 2368              	.LVL187:
 482:Src/ADXL345.c **** }
 2369              		.loc 1 482 2 is_stmt 0 view .LVU482
 2370 0012 FFF7FEFF 		bl	writeTo
 2371              	.LVL188:
 483:Src/ADXL345.c **** 
 2372              		.loc 1 483 1 view .LVU483
 2373 0016 10BD     		pop	{r4, pc}
 483:Src/ADXL345.c **** 
 2374              		.loc 1 483 1 view .LVU484
 2375              		.cfi_endproc
 2376              	.LFE175:
 2378              		.section	.text.ADXL345getFreeFallDuration,"ax",%progbits
 2379              		.align	1
 2380              		.global	ADXL345getFreeFallDuration
 2381              		.syntax unified
 2382              		.thumb
 2383              		.thumb_func
 2384              		.fpu fpv4-sp-d16
 2386              	ADXL345getFreeFallDuration:
 2387              	.LVL189:
 2388              	.LFB176:
 485:Src/ADXL345.c **** 	uint8_t _b;
 2389              		.loc 1 485 58 is_stmt 1 view -0
 2390              		.cfi_startproc
 2391              		@ args = 0, pretend = 0, frame = 8
 2392              		@ frame_needed = 0, uses_anonymous_args = 0
 485:Src/ADXL345.c **** 	uint8_t _b;
 2393              		.loc 1 485 58 is_stmt 0 view .LVU486
 2394 0000 00B5     		push	{lr}
 2395              	.LCFI84:
 2396              		.cfi_def_cfa_offset 4
 2397              		.cfi_offset 14, -4
 2398 0002 83B0     		sub	sp, sp, #12
 2399              	.LCFI85:
 2400              		.cfi_def_cfa_offset 16
 486:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_TIME_FF, 1, &_b);
 2401              		.loc 1 486 2 is_stmt 1 view .LVU487
 487:Src/ADXL345.c **** 	return (int) _b;
 2402              		.loc 1 487 2 view .LVU488
 2403 0004 0DF10703 		add	r3, sp, #7
 2404 0008 0122     		movs	r2, #1
 2405 000a 2921     		movs	r1, #41
 2406 000c FFF7FEFF 		bl	readFrom
 2407              	.LVL190:
 488:Src/ADXL345.c **** }
 2408              		.loc 1 488 2 view .LVU489
 489:Src/ADXL345.c **** 
 2409              		.loc 1 489 1 is_stmt 0 view .LVU490
 2410 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2411 0014 03B0     		add	sp, sp, #12
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 64


 2412              	.LCFI86:
 2413              		.cfi_def_cfa_offset 4
 2414              		@ sp needed
 2415 0016 5DF804FB 		ldr	pc, [sp], #4
 2416              		.cfi_endproc
 2417              	.LFE176:
 2419              		.section	.text.ADXL345isActivityXEnabled,"ax",%progbits
 2420              		.align	1
 2421              		.global	ADXL345isActivityXEnabled
 2422              		.syntax unified
 2423              		.thumb
 2424              		.thumb_func
 2425              		.fpu fpv4-sp-d16
 2427              	ADXL345isActivityXEnabled:
 2428              	.LVL191:
 2429              	.LFB177:
 493:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 6);
 2430              		.loc 1 493 58 is_stmt 1 view -0
 2431              		.cfi_startproc
 2432              		@ args = 0, pretend = 0, frame = 0
 2433              		@ frame_needed = 0, uses_anonymous_args = 0
 493:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 6);
 2434              		.loc 1 493 58 is_stmt 0 view .LVU492
 2435 0000 08B5     		push	{r3, lr}
 2436              	.LCFI87:
 2437              		.cfi_def_cfa_offset 8
 2438              		.cfi_offset 3, -8
 2439              		.cfi_offset 14, -4
 494:Src/ADXL345.c **** }
 2440              		.loc 1 494 2 is_stmt 1 view .LVU493
 494:Src/ADXL345.c **** }
 2441              		.loc 1 494 9 is_stmt 0 view .LVU494
 2442 0002 0622     		movs	r2, #6
 2443 0004 2721     		movs	r1, #39
 2444 0006 FFF7FEFF 		bl	getRegisterBit
 2445              	.LVL192:
 495:Src/ADXL345.c **** bool ADXL345isActivityYEnabled(ADXL345_SPI_I2C* adxl345) {
 2446              		.loc 1 495 1 view .LVU495
 2447 000a 08BD     		pop	{r3, pc}
 2448              		.cfi_endproc
 2449              	.LFE177:
 2451              		.section	.text.ADXL345isActivityYEnabled,"ax",%progbits
 2452              		.align	1
 2453              		.global	ADXL345isActivityYEnabled
 2454              		.syntax unified
 2455              		.thumb
 2456              		.thumb_func
 2457              		.fpu fpv4-sp-d16
 2459              	ADXL345isActivityYEnabled:
 2460              	.LVL193:
 2461              	.LFB178:
 496:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 5);
 2462              		.loc 1 496 58 is_stmt 1 view -0
 2463              		.cfi_startproc
 2464              		@ args = 0, pretend = 0, frame = 0
 2465              		@ frame_needed = 0, uses_anonymous_args = 0
 496:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 5);
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 65


 2466              		.loc 1 496 58 is_stmt 0 view .LVU497
 2467 0000 08B5     		push	{r3, lr}
 2468              	.LCFI88:
 2469              		.cfi_def_cfa_offset 8
 2470              		.cfi_offset 3, -8
 2471              		.cfi_offset 14, -4
 497:Src/ADXL345.c **** }
 2472              		.loc 1 497 2 is_stmt 1 view .LVU498
 497:Src/ADXL345.c **** }
 2473              		.loc 1 497 9 is_stmt 0 view .LVU499
 2474 0002 0522     		movs	r2, #5
 2475 0004 2721     		movs	r1, #39
 2476 0006 FFF7FEFF 		bl	getRegisterBit
 2477              	.LVL194:
 498:Src/ADXL345.c **** bool ADXL345isActivityZEnabled(ADXL345_SPI_I2C* adxl345) {
 2478              		.loc 1 498 1 view .LVU500
 2479 000a 08BD     		pop	{r3, pc}
 2480              		.cfi_endproc
 2481              	.LFE178:
 2483              		.section	.text.ADXL345isActivityZEnabled,"ax",%progbits
 2484              		.align	1
 2485              		.global	ADXL345isActivityZEnabled
 2486              		.syntax unified
 2487              		.thumb
 2488              		.thumb_func
 2489              		.fpu fpv4-sp-d16
 2491              	ADXL345isActivityZEnabled:
 2492              	.LVL195:
 2493              	.LFB179:
 499:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 4);
 2494              		.loc 1 499 58 is_stmt 1 view -0
 2495              		.cfi_startproc
 2496              		@ args = 0, pretend = 0, frame = 0
 2497              		@ frame_needed = 0, uses_anonymous_args = 0
 499:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 4);
 2498              		.loc 1 499 58 is_stmt 0 view .LVU502
 2499 0000 08B5     		push	{r3, lr}
 2500              	.LCFI89:
 2501              		.cfi_def_cfa_offset 8
 2502              		.cfi_offset 3, -8
 2503              		.cfi_offset 14, -4
 500:Src/ADXL345.c **** }
 2504              		.loc 1 500 2 is_stmt 1 view .LVU503
 500:Src/ADXL345.c **** }
 2505              		.loc 1 500 9 is_stmt 0 view .LVU504
 2506 0002 0422     		movs	r2, #4
 2507 0004 2721     		movs	r1, #39
 2508 0006 FFF7FEFF 		bl	getRegisterBit
 2509              	.LVL196:
 501:Src/ADXL345.c **** bool ADXL345isInactivityXEnabled(ADXL345_SPI_I2C* adxl345) {
 2510              		.loc 1 501 1 view .LVU505
 2511 000a 08BD     		pop	{r3, pc}
 2512              		.cfi_endproc
 2513              	.LFE179:
 2515              		.section	.text.ADXL345isInactivityXEnabled,"ax",%progbits
 2516              		.align	1
 2517              		.global	ADXL345isInactivityXEnabled
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 66


 2518              		.syntax unified
 2519              		.thumb
 2520              		.thumb_func
 2521              		.fpu fpv4-sp-d16
 2523              	ADXL345isInactivityXEnabled:
 2524              	.LVL197:
 2525              	.LFB180:
 502:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 2);
 2526              		.loc 1 502 60 is_stmt 1 view -0
 2527              		.cfi_startproc
 2528              		@ args = 0, pretend = 0, frame = 0
 2529              		@ frame_needed = 0, uses_anonymous_args = 0
 502:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 2);
 2530              		.loc 1 502 60 is_stmt 0 view .LVU507
 2531 0000 08B5     		push	{r3, lr}
 2532              	.LCFI90:
 2533              		.cfi_def_cfa_offset 8
 2534              		.cfi_offset 3, -8
 2535              		.cfi_offset 14, -4
 503:Src/ADXL345.c **** }
 2536              		.loc 1 503 2 is_stmt 1 view .LVU508
 503:Src/ADXL345.c **** }
 2537              		.loc 1 503 9 is_stmt 0 view .LVU509
 2538 0002 0222     		movs	r2, #2
 2539 0004 2721     		movs	r1, #39
 2540 0006 FFF7FEFF 		bl	getRegisterBit
 2541              	.LVL198:
 504:Src/ADXL345.c **** bool ADXL345isInactivityYEnabled(ADXL345_SPI_I2C* adxl345) {
 2542              		.loc 1 504 1 view .LVU510
 2543 000a 08BD     		pop	{r3, pc}
 2544              		.cfi_endproc
 2545              	.LFE180:
 2547              		.section	.text.ADXL345isInactivityYEnabled,"ax",%progbits
 2548              		.align	1
 2549              		.global	ADXL345isInactivityYEnabled
 2550              		.syntax unified
 2551              		.thumb
 2552              		.thumb_func
 2553              		.fpu fpv4-sp-d16
 2555              	ADXL345isInactivityYEnabled:
 2556              	.LVL199:
 2557              	.LFB181:
 505:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 1);
 2558              		.loc 1 505 60 is_stmt 1 view -0
 2559              		.cfi_startproc
 2560              		@ args = 0, pretend = 0, frame = 0
 2561              		@ frame_needed = 0, uses_anonymous_args = 0
 505:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 1);
 2562              		.loc 1 505 60 is_stmt 0 view .LVU512
 2563 0000 08B5     		push	{r3, lr}
 2564              	.LCFI91:
 2565              		.cfi_def_cfa_offset 8
 2566              		.cfi_offset 3, -8
 2567              		.cfi_offset 14, -4
 506:Src/ADXL345.c **** }
 2568              		.loc 1 506 2 is_stmt 1 view .LVU513
 506:Src/ADXL345.c **** }
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 67


 2569              		.loc 1 506 9 is_stmt 0 view .LVU514
 2570 0002 0122     		movs	r2, #1
 2571 0004 2721     		movs	r1, #39
 2572 0006 FFF7FEFF 		bl	getRegisterBit
 2573              	.LVL200:
 507:Src/ADXL345.c **** bool ADXL345isInactivityZEnabled(ADXL345_SPI_I2C* adxl345) {
 2574              		.loc 1 507 1 view .LVU515
 2575 000a 08BD     		pop	{r3, pc}
 2576              		.cfi_endproc
 2577              	.LFE181:
 2579              		.section	.text.ADXL345isInactivityZEnabled,"ax",%progbits
 2580              		.align	1
 2581              		.global	ADXL345isInactivityZEnabled
 2582              		.syntax unified
 2583              		.thumb
 2584              		.thumb_func
 2585              		.fpu fpv4-sp-d16
 2587              	ADXL345isInactivityZEnabled:
 2588              	.LVL201:
 2589              	.LFB182:
 508:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 0);
 2590              		.loc 1 508 60 is_stmt 1 view -0
 2591              		.cfi_startproc
 2592              		@ args = 0, pretend = 0, frame = 0
 2593              		@ frame_needed = 0, uses_anonymous_args = 0
 508:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 0);
 2594              		.loc 1 508 60 is_stmt 0 view .LVU517
 2595 0000 08B5     		push	{r3, lr}
 2596              	.LCFI92:
 2597              		.cfi_def_cfa_offset 8
 2598              		.cfi_offset 3, -8
 2599              		.cfi_offset 14, -4
 509:Src/ADXL345.c **** }
 2600              		.loc 1 509 2 is_stmt 1 view .LVU518
 509:Src/ADXL345.c **** }
 2601              		.loc 1 509 9 is_stmt 0 view .LVU519
 2602 0002 0022     		movs	r2, #0
 2603 0004 2721     		movs	r1, #39
 2604 0006 FFF7FEFF 		bl	getRegisterBit
 2605              	.LVL202:
 510:Src/ADXL345.c **** 
 2606              		.loc 1 510 1 view .LVU520
 2607 000a 08BD     		pop	{r3, pc}
 2608              		.cfi_endproc
 2609              	.LFE182:
 2611              		.section	.text.ADXL345setActivityX,"ax",%progbits
 2612              		.align	1
 2613              		.global	ADXL345setActivityX
 2614              		.syntax unified
 2615              		.thumb
 2616              		.thumb_func
 2617              		.fpu fpv4-sp-d16
 2619              	ADXL345setActivityX:
 2620              	.LVL203:
 2621              	.LFB183:
 512:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 6, state);
 2622              		.loc 1 512 64 is_stmt 1 view -0
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 68


 2623              		.cfi_startproc
 2624              		@ args = 0, pretend = 0, frame = 0
 2625              		@ frame_needed = 0, uses_anonymous_args = 0
 512:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 6, state);
 2626              		.loc 1 512 64 is_stmt 0 view .LVU522
 2627 0000 08B5     		push	{r3, lr}
 2628              	.LCFI93:
 2629              		.cfi_def_cfa_offset 8
 2630              		.cfi_offset 3, -8
 2631              		.cfi_offset 14, -4
 2632 0002 0B46     		mov	r3, r1
 513:Src/ADXL345.c **** }
 2633              		.loc 1 513 2 is_stmt 1 view .LVU523
 2634 0004 0622     		movs	r2, #6
 2635 0006 2721     		movs	r1, #39
 2636              	.LVL204:
 513:Src/ADXL345.c **** }
 2637              		.loc 1 513 2 is_stmt 0 view .LVU524
 2638 0008 FFF7FEFF 		bl	setRegisterBit
 2639              	.LVL205:
 514:Src/ADXL345.c **** void ADXL345setActivityY(ADXL345_SPI_I2C* adxl345, bool state) {
 2640              		.loc 1 514 1 view .LVU525
 2641 000c 08BD     		pop	{r3, pc}
 2642              		.cfi_endproc
 2643              	.LFE183:
 2645              		.section	.text.ADXL345setActivityY,"ax",%progbits
 2646              		.align	1
 2647              		.global	ADXL345setActivityY
 2648              		.syntax unified
 2649              		.thumb
 2650              		.thumb_func
 2651              		.fpu fpv4-sp-d16
 2653              	ADXL345setActivityY:
 2654              	.LVL206:
 2655              	.LFB184:
 515:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 5, state);
 2656              		.loc 1 515 64 is_stmt 1 view -0
 2657              		.cfi_startproc
 2658              		@ args = 0, pretend = 0, frame = 0
 2659              		@ frame_needed = 0, uses_anonymous_args = 0
 515:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 5, state);
 2660              		.loc 1 515 64 is_stmt 0 view .LVU527
 2661 0000 08B5     		push	{r3, lr}
 2662              	.LCFI94:
 2663              		.cfi_def_cfa_offset 8
 2664              		.cfi_offset 3, -8
 2665              		.cfi_offset 14, -4
 2666 0002 0B46     		mov	r3, r1
 516:Src/ADXL345.c **** }
 2667              		.loc 1 516 2 is_stmt 1 view .LVU528
 2668 0004 0522     		movs	r2, #5
 2669 0006 2721     		movs	r1, #39
 2670              	.LVL207:
 516:Src/ADXL345.c **** }
 2671              		.loc 1 516 2 is_stmt 0 view .LVU529
 2672 0008 FFF7FEFF 		bl	setRegisterBit
 2673              	.LVL208:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 69


 517:Src/ADXL345.c **** void ADXL345setActivityZ(ADXL345_SPI_I2C* adxl345, bool state) {
 2674              		.loc 1 517 1 view .LVU530
 2675 000c 08BD     		pop	{r3, pc}
 2676              		.cfi_endproc
 2677              	.LFE184:
 2679              		.section	.text.ADXL345setActivityZ,"ax",%progbits
 2680              		.align	1
 2681              		.global	ADXL345setActivityZ
 2682              		.syntax unified
 2683              		.thumb
 2684              		.thumb_func
 2685              		.fpu fpv4-sp-d16
 2687              	ADXL345setActivityZ:
 2688              	.LVL209:
 2689              	.LFB185:
 518:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 4, state);
 2690              		.loc 1 518 64 is_stmt 1 view -0
 2691              		.cfi_startproc
 2692              		@ args = 0, pretend = 0, frame = 0
 2693              		@ frame_needed = 0, uses_anonymous_args = 0
 518:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 4, state);
 2694              		.loc 1 518 64 is_stmt 0 view .LVU532
 2695 0000 08B5     		push	{r3, lr}
 2696              	.LCFI95:
 2697              		.cfi_def_cfa_offset 8
 2698              		.cfi_offset 3, -8
 2699              		.cfi_offset 14, -4
 2700 0002 0B46     		mov	r3, r1
 519:Src/ADXL345.c **** }
 2701              		.loc 1 519 2 is_stmt 1 view .LVU533
 2702 0004 0422     		movs	r2, #4
 2703 0006 2721     		movs	r1, #39
 2704              	.LVL210:
 519:Src/ADXL345.c **** }
 2705              		.loc 1 519 2 is_stmt 0 view .LVU534
 2706 0008 FFF7FEFF 		bl	setRegisterBit
 2707              	.LVL211:
 520:Src/ADXL345.c **** void ADXL345setActivityXYZ(ADXL345_SPI_I2C* adxl345, bool stateX, bool stateY, bool stateZ) {
 2708              		.loc 1 520 1 view .LVU535
 2709 000c 08BD     		pop	{r3, pc}
 2710              		.cfi_endproc
 2711              	.LFE185:
 2713              		.section	.text.ADXL345setActivityXYZ,"ax",%progbits
 2714              		.align	1
 2715              		.global	ADXL345setActivityXYZ
 2716              		.syntax unified
 2717              		.thumb
 2718              		.thumb_func
 2719              		.fpu fpv4-sp-d16
 2721              	ADXL345setActivityXYZ:
 2722              	.LVL212:
 2723              	.LFB186:
 521:Src/ADXL345.c **** 	ADXL345setActivityX(adxl345, stateX);
 2724              		.loc 1 521 93 is_stmt 1 view -0
 2725              		.cfi_startproc
 2726              		@ args = 0, pretend = 0, frame = 0
 2727              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 70


 521:Src/ADXL345.c **** 	ADXL345setActivityX(adxl345, stateX);
 2728              		.loc 1 521 93 is_stmt 0 view .LVU537
 2729 0000 70B5     		push	{r4, r5, r6, lr}
 2730              	.LCFI96:
 2731              		.cfi_def_cfa_offset 16
 2732              		.cfi_offset 4, -16
 2733              		.cfi_offset 5, -12
 2734              		.cfi_offset 6, -8
 2735              		.cfi_offset 14, -4
 2736 0002 0446     		mov	r4, r0
 2737 0004 1646     		mov	r6, r2
 2738 0006 1D46     		mov	r5, r3
 522:Src/ADXL345.c **** 	ADXL345setActivityY(adxl345, stateY);
 2739              		.loc 1 522 2 is_stmt 1 view .LVU538
 2740 0008 FFF7FEFF 		bl	ADXL345setActivityX
 2741              	.LVL213:
 523:Src/ADXL345.c **** 	ADXL345setActivityZ(adxl345, stateZ);
 2742              		.loc 1 523 2 view .LVU539
 2743 000c 3146     		mov	r1, r6
 2744 000e 2046     		mov	r0, r4
 2745 0010 FFF7FEFF 		bl	ADXL345setActivityY
 2746              	.LVL214:
 524:Src/ADXL345.c **** }
 2747              		.loc 1 524 2 view .LVU540
 2748 0014 2946     		mov	r1, r5
 2749 0016 2046     		mov	r0, r4
 2750 0018 FFF7FEFF 		bl	ADXL345setActivityZ
 2751              	.LVL215:
 525:Src/ADXL345.c **** void ADXL345setInactivityX(ADXL345_SPI_I2C* adxl345, bool state) {
 2752              		.loc 1 525 1 is_stmt 0 view .LVU541
 2753 001c 70BD     		pop	{r4, r5, r6, pc}
 525:Src/ADXL345.c **** void ADXL345setInactivityX(ADXL345_SPI_I2C* adxl345, bool state) {
 2754              		.loc 1 525 1 view .LVU542
 2755              		.cfi_endproc
 2756              	.LFE186:
 2758              		.section	.text.ADXL345setInactivityX,"ax",%progbits
 2759              		.align	1
 2760              		.global	ADXL345setInactivityX
 2761              		.syntax unified
 2762              		.thumb
 2763              		.thumb_func
 2764              		.fpu fpv4-sp-d16
 2766              	ADXL345setInactivityX:
 2767              	.LVL216:
 2768              	.LFB187:
 526:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 2, state);
 2769              		.loc 1 526 66 is_stmt 1 view -0
 2770              		.cfi_startproc
 2771              		@ args = 0, pretend = 0, frame = 0
 2772              		@ frame_needed = 0, uses_anonymous_args = 0
 526:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 2, state);
 2773              		.loc 1 526 66 is_stmt 0 view .LVU544
 2774 0000 08B5     		push	{r3, lr}
 2775              	.LCFI97:
 2776              		.cfi_def_cfa_offset 8
 2777              		.cfi_offset 3, -8
 2778              		.cfi_offset 14, -4
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 71


 2779 0002 0B46     		mov	r3, r1
 527:Src/ADXL345.c **** }
 2780              		.loc 1 527 2 is_stmt 1 view .LVU545
 2781 0004 0222     		movs	r2, #2
 2782 0006 2721     		movs	r1, #39
 2783              	.LVL217:
 527:Src/ADXL345.c **** }
 2784              		.loc 1 527 2 is_stmt 0 view .LVU546
 2785 0008 FFF7FEFF 		bl	setRegisterBit
 2786              	.LVL218:
 528:Src/ADXL345.c **** void ADXL345setInactivityY(ADXL345_SPI_I2C* adxl345, bool state) {
 2787              		.loc 1 528 1 view .LVU547
 2788 000c 08BD     		pop	{r3, pc}
 2789              		.cfi_endproc
 2790              	.LFE187:
 2792              		.section	.text.ADXL345setInactivityY,"ax",%progbits
 2793              		.align	1
 2794              		.global	ADXL345setInactivityY
 2795              		.syntax unified
 2796              		.thumb
 2797              		.thumb_func
 2798              		.fpu fpv4-sp-d16
 2800              	ADXL345setInactivityY:
 2801              	.LVL219:
 2802              	.LFB188:
 529:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 1, state);
 2803              		.loc 1 529 66 is_stmt 1 view -0
 2804              		.cfi_startproc
 2805              		@ args = 0, pretend = 0, frame = 0
 2806              		@ frame_needed = 0, uses_anonymous_args = 0
 529:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 1, state);
 2807              		.loc 1 529 66 is_stmt 0 view .LVU549
 2808 0000 08B5     		push	{r3, lr}
 2809              	.LCFI98:
 2810              		.cfi_def_cfa_offset 8
 2811              		.cfi_offset 3, -8
 2812              		.cfi_offset 14, -4
 2813 0002 0B46     		mov	r3, r1
 530:Src/ADXL345.c **** }
 2814              		.loc 1 530 2 is_stmt 1 view .LVU550
 2815 0004 0122     		movs	r2, #1
 2816 0006 2721     		movs	r1, #39
 2817              	.LVL220:
 530:Src/ADXL345.c **** }
 2818              		.loc 1 530 2 is_stmt 0 view .LVU551
 2819 0008 FFF7FEFF 		bl	setRegisterBit
 2820              	.LVL221:
 531:Src/ADXL345.c **** void ADXL345setInactivityZ(ADXL345_SPI_I2C* adxl345, bool state) {
 2821              		.loc 1 531 1 view .LVU552
 2822 000c 08BD     		pop	{r3, pc}
 2823              		.cfi_endproc
 2824              	.LFE188:
 2826              		.section	.text.ADXL345setInactivityZ,"ax",%progbits
 2827              		.align	1
 2828              		.global	ADXL345setInactivityZ
 2829              		.syntax unified
 2830              		.thumb
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 72


 2831              		.thumb_func
 2832              		.fpu fpv4-sp-d16
 2834              	ADXL345setInactivityZ:
 2835              	.LVL222:
 2836              	.LFB189:
 532:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 0, state);
 2837              		.loc 1 532 66 is_stmt 1 view -0
 2838              		.cfi_startproc
 2839              		@ args = 0, pretend = 0, frame = 0
 2840              		@ frame_needed = 0, uses_anonymous_args = 0
 532:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 0, state);
 2841              		.loc 1 532 66 is_stmt 0 view .LVU554
 2842 0000 08B5     		push	{r3, lr}
 2843              	.LCFI99:
 2844              		.cfi_def_cfa_offset 8
 2845              		.cfi_offset 3, -8
 2846              		.cfi_offset 14, -4
 2847 0002 0B46     		mov	r3, r1
 533:Src/ADXL345.c **** }
 2848              		.loc 1 533 2 is_stmt 1 view .LVU555
 2849 0004 0022     		movs	r2, #0
 2850 0006 2721     		movs	r1, #39
 2851              	.LVL223:
 533:Src/ADXL345.c **** }
 2852              		.loc 1 533 2 is_stmt 0 view .LVU556
 2853 0008 FFF7FEFF 		bl	setRegisterBit
 2854              	.LVL224:
 534:Src/ADXL345.c **** void ADXL345setInactivityXYZ(ADXL345_SPI_I2C* adxl345, bool stateX, bool stateY, bool stateZ) {
 2855              		.loc 1 534 1 view .LVU557
 2856 000c 08BD     		pop	{r3, pc}
 2857              		.cfi_endproc
 2858              	.LFE189:
 2860              		.section	.text.ADXL345setInactivityXYZ,"ax",%progbits
 2861              		.align	1
 2862              		.global	ADXL345setInactivityXYZ
 2863              		.syntax unified
 2864              		.thumb
 2865              		.thumb_func
 2866              		.fpu fpv4-sp-d16
 2868              	ADXL345setInactivityXYZ:
 2869              	.LVL225:
 2870              	.LFB190:
 535:Src/ADXL345.c **** 	ADXL345setInactivityX(adxl345, stateX);
 2871              		.loc 1 535 95 is_stmt 1 view -0
 2872              		.cfi_startproc
 2873              		@ args = 0, pretend = 0, frame = 0
 2874              		@ frame_needed = 0, uses_anonymous_args = 0
 535:Src/ADXL345.c **** 	ADXL345setInactivityX(adxl345, stateX);
 2875              		.loc 1 535 95 is_stmt 0 view .LVU559
 2876 0000 70B5     		push	{r4, r5, r6, lr}
 2877              	.LCFI100:
 2878              		.cfi_def_cfa_offset 16
 2879              		.cfi_offset 4, -16
 2880              		.cfi_offset 5, -12
 2881              		.cfi_offset 6, -8
 2882              		.cfi_offset 14, -4
 2883 0002 0446     		mov	r4, r0
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 73


 2884 0004 1646     		mov	r6, r2
 2885 0006 1D46     		mov	r5, r3
 536:Src/ADXL345.c **** 	ADXL345setInactivityY(adxl345, stateY);
 2886              		.loc 1 536 2 is_stmt 1 view .LVU560
 2887 0008 FFF7FEFF 		bl	ADXL345setInactivityX
 2888              	.LVL226:
 537:Src/ADXL345.c **** 	ADXL345setInactivityZ(adxl345, stateZ);
 2889              		.loc 1 537 2 view .LVU561
 2890 000c 3146     		mov	r1, r6
 2891 000e 2046     		mov	r0, r4
 2892 0010 FFF7FEFF 		bl	ADXL345setInactivityY
 2893              	.LVL227:
 538:Src/ADXL345.c **** }
 2894              		.loc 1 538 2 view .LVU562
 2895 0014 2946     		mov	r1, r5
 2896 0016 2046     		mov	r0, r4
 2897 0018 FFF7FEFF 		bl	ADXL345setInactivityZ
 2898              	.LVL228:
 539:Src/ADXL345.c **** 
 2899              		.loc 1 539 1 is_stmt 0 view .LVU563
 2900 001c 70BD     		pop	{r4, r5, r6, pc}
 539:Src/ADXL345.c **** 
 2901              		.loc 1 539 1 view .LVU564
 2902              		.cfi_endproc
 2903              	.LFE190:
 2905              		.section	.text.ADXL345isActivityAc,"ax",%progbits
 2906              		.align	1
 2907              		.global	ADXL345isActivityAc
 2908              		.syntax unified
 2909              		.thumb
 2910              		.thumb_func
 2911              		.fpu fpv4-sp-d16
 2913              	ADXL345isActivityAc:
 2914              	.LVL229:
 2915              	.LFB191:
 541:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 7);
 2916              		.loc 1 541 52 is_stmt 1 view -0
 2917              		.cfi_startproc
 2918              		@ args = 0, pretend = 0, frame = 0
 2919              		@ frame_needed = 0, uses_anonymous_args = 0
 541:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 7);
 2920              		.loc 1 541 52 is_stmt 0 view .LVU566
 2921 0000 08B5     		push	{r3, lr}
 2922              	.LCFI101:
 2923              		.cfi_def_cfa_offset 8
 2924              		.cfi_offset 3, -8
 2925              		.cfi_offset 14, -4
 542:Src/ADXL345.c **** }
 2926              		.loc 1 542 2 is_stmt 1 view .LVU567
 542:Src/ADXL345.c **** }
 2927              		.loc 1 542 9 is_stmt 0 view .LVU568
 2928 0002 0722     		movs	r2, #7
 2929 0004 2721     		movs	r1, #39
 2930 0006 FFF7FEFF 		bl	getRegisterBit
 2931              	.LVL230:
 543:Src/ADXL345.c **** bool ADXL345isInactivityAc(ADXL345_SPI_I2C* adxl345){
 2932              		.loc 1 543 1 view .LVU569
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 74


 2933 000a 08BD     		pop	{r3, pc}
 2934              		.cfi_endproc
 2935              	.LFE191:
 2937              		.section	.text.ADXL345isInactivityAc,"ax",%progbits
 2938              		.align	1
 2939              		.global	ADXL345isInactivityAc
 2940              		.syntax unified
 2941              		.thumb
 2942              		.thumb_func
 2943              		.fpu fpv4-sp-d16
 2945              	ADXL345isInactivityAc:
 2946              	.LVL231:
 2947              	.LFB192:
 544:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 3);
 2948              		.loc 1 544 53 is_stmt 1 view -0
 2949              		.cfi_startproc
 2950              		@ args = 0, pretend = 0, frame = 0
 2951              		@ frame_needed = 0, uses_anonymous_args = 0
 544:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 3);
 2952              		.loc 1 544 53 is_stmt 0 view .LVU571
 2953 0000 08B5     		push	{r3, lr}
 2954              	.LCFI102:
 2955              		.cfi_def_cfa_offset 8
 2956              		.cfi_offset 3, -8
 2957              		.cfi_offset 14, -4
 545:Src/ADXL345.c **** }
 2958              		.loc 1 545 2 is_stmt 1 view .LVU572
 545:Src/ADXL345.c **** }
 2959              		.loc 1 545 9 is_stmt 0 view .LVU573
 2960 0002 0322     		movs	r2, #3
 2961 0004 2721     		movs	r1, #39
 2962 0006 FFF7FEFF 		bl	getRegisterBit
 2963              	.LVL232:
 546:Src/ADXL345.c **** 
 2964              		.loc 1 546 1 view .LVU574
 2965 000a 08BD     		pop	{r3, pc}
 2966              		.cfi_endproc
 2967              	.LFE192:
 2969              		.section	.text.ADXL345setActivityAc,"ax",%progbits
 2970              		.align	1
 2971              		.global	ADXL345setActivityAc
 2972              		.syntax unified
 2973              		.thumb
 2974              		.thumb_func
 2975              		.fpu fpv4-sp-d16
 2977              	ADXL345setActivityAc:
 2978              	.LVL233:
 2979              	.LFB193:
 548:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 7, state);
 2980              		.loc 1 548 65 is_stmt 1 view -0
 2981              		.cfi_startproc
 2982              		@ args = 0, pretend = 0, frame = 0
 2983              		@ frame_needed = 0, uses_anonymous_args = 0
 548:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 7, state);
 2984              		.loc 1 548 65 is_stmt 0 view .LVU576
 2985 0000 08B5     		push	{r3, lr}
 2986              	.LCFI103:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 75


 2987              		.cfi_def_cfa_offset 8
 2988              		.cfi_offset 3, -8
 2989              		.cfi_offset 14, -4
 2990 0002 0B46     		mov	r3, r1
 549:Src/ADXL345.c **** }
 2991              		.loc 1 549 2 is_stmt 1 view .LVU577
 2992 0004 0722     		movs	r2, #7
 2993 0006 2721     		movs	r1, #39
 2994              	.LVL234:
 549:Src/ADXL345.c **** }
 2995              		.loc 1 549 2 is_stmt 0 view .LVU578
 2996 0008 FFF7FEFF 		bl	setRegisterBit
 2997              	.LVL235:
 550:Src/ADXL345.c **** void ADXL345setInactivityAc(ADXL345_SPI_I2C* adxl345, bool state) {
 2998              		.loc 1 550 1 view .LVU579
 2999 000c 08BD     		pop	{r3, pc}
 3000              		.cfi_endproc
 3001              	.LFE193:
 3003              		.section	.text.ADXL345setInactivityAc,"ax",%progbits
 3004              		.align	1
 3005              		.global	ADXL345setInactivityAc
 3006              		.syntax unified
 3007              		.thumb
 3008              		.thumb_func
 3009              		.fpu fpv4-sp-d16
 3011              	ADXL345setInactivityAc:
 3012              	.LVL236:
 3013              	.LFB194:
 551:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 3, state);
 3014              		.loc 1 551 67 is_stmt 1 view -0
 3015              		.cfi_startproc
 3016              		@ args = 0, pretend = 0, frame = 0
 3017              		@ frame_needed = 0, uses_anonymous_args = 0
 551:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_ACT_INACT_CTL, 3, state);
 3018              		.loc 1 551 67 is_stmt 0 view .LVU581
 3019 0000 08B5     		push	{r3, lr}
 3020              	.LCFI104:
 3021              		.cfi_def_cfa_offset 8
 3022              		.cfi_offset 3, -8
 3023              		.cfi_offset 14, -4
 3024 0002 0B46     		mov	r3, r1
 552:Src/ADXL345.c **** }
 3025              		.loc 1 552 2 is_stmt 1 view .LVU582
 3026 0004 0322     		movs	r2, #3
 3027 0006 2721     		movs	r1, #39
 3028              	.LVL237:
 552:Src/ADXL345.c **** }
 3029              		.loc 1 552 2 is_stmt 0 view .LVU583
 3030 0008 FFF7FEFF 		bl	setRegisterBit
 3031              	.LVL238:
 553:Src/ADXL345.c **** 
 3032              		.loc 1 553 1 view .LVU584
 3033 000c 08BD     		pop	{r3, pc}
 3034              		.cfi_endproc
 3035              	.LFE194:
 3037              		.section	.text.ADXL345getSuppressBit,"ax",%progbits
 3038              		.align	1
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 76


 3039              		.global	ADXL345getSuppressBit
 3040              		.syntax unified
 3041              		.thumb
 3042              		.thumb_func
 3043              		.fpu fpv4-sp-d16
 3045              	ADXL345getSuppressBit:
 3046              	.LVL239:
 3047              	.LFB195:
 557:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_TAP_AXES, 3);
 3048              		.loc 1 557 53 is_stmt 1 view -0
 3049              		.cfi_startproc
 3050              		@ args = 0, pretend = 0, frame = 0
 3051              		@ frame_needed = 0, uses_anonymous_args = 0
 557:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_TAP_AXES, 3);
 3052              		.loc 1 557 53 is_stmt 0 view .LVU586
 3053 0000 08B5     		push	{r3, lr}
 3054              	.LCFI105:
 3055              		.cfi_def_cfa_offset 8
 3056              		.cfi_offset 3, -8
 3057              		.cfi_offset 14, -4
 558:Src/ADXL345.c **** }
 3058              		.loc 1 558 2 is_stmt 1 view .LVU587
 558:Src/ADXL345.c **** }
 3059              		.loc 1 558 9 is_stmt 0 view .LVU588
 3060 0002 0322     		movs	r2, #3
 3061 0004 2A21     		movs	r1, #42
 3062 0006 FFF7FEFF 		bl	getRegisterBit
 3063              	.LVL240:
 559:Src/ADXL345.c **** void ADXL345setSuppressBit(ADXL345_SPI_I2C* adxl345, bool state) {
 3064              		.loc 1 559 1 view .LVU589
 3065 000a 08BD     		pop	{r3, pc}
 3066              		.cfi_endproc
 3067              	.LFE195:
 3069              		.section	.text.ADXL345setSuppressBit,"ax",%progbits
 3070              		.align	1
 3071              		.global	ADXL345setSuppressBit
 3072              		.syntax unified
 3073              		.thumb
 3074              		.thumb_func
 3075              		.fpu fpv4-sp-d16
 3077              	ADXL345setSuppressBit:
 3078              	.LVL241:
 3079              	.LFB196:
 560:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_TAP_AXES, 3, state);
 3080              		.loc 1 560 66 is_stmt 1 view -0
 3081              		.cfi_startproc
 3082              		@ args = 0, pretend = 0, frame = 0
 3083              		@ frame_needed = 0, uses_anonymous_args = 0
 560:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_TAP_AXES, 3, state);
 3084              		.loc 1 560 66 is_stmt 0 view .LVU591
 3085 0000 08B5     		push	{r3, lr}
 3086              	.LCFI106:
 3087              		.cfi_def_cfa_offset 8
 3088              		.cfi_offset 3, -8
 3089              		.cfi_offset 14, -4
 3090 0002 0B46     		mov	r3, r1
 561:Src/ADXL345.c **** }
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 77


 3091              		.loc 1 561 2 is_stmt 1 view .LVU592
 3092 0004 0322     		movs	r2, #3
 3093 0006 2A21     		movs	r1, #42
 3094              	.LVL242:
 561:Src/ADXL345.c **** }
 3095              		.loc 1 561 2 is_stmt 0 view .LVU593
 3096 0008 FFF7FEFF 		bl	setRegisterBit
 3097              	.LVL243:
 562:Src/ADXL345.c **** 
 3098              		.loc 1 562 1 view .LVU594
 3099 000c 08BD     		pop	{r3, pc}
 3100              		.cfi_endproc
 3101              	.LFE196:
 3103              		.section	.text.ADXL345isTapDetectionOnX,"ax",%progbits
 3104              		.align	1
 3105              		.global	ADXL345isTapDetectionOnX
 3106              		.syntax unified
 3107              		.thumb
 3108              		.thumb_func
 3109              		.fpu fpv4-sp-d16
 3111              	ADXL345isTapDetectionOnX:
 3112              	.LVL244:
 3113              	.LFB197:
 566:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_TAP_AXES, 2);
 3114              		.loc 1 566 56 is_stmt 1 view -0
 3115              		.cfi_startproc
 3116              		@ args = 0, pretend = 0, frame = 0
 3117              		@ frame_needed = 0, uses_anonymous_args = 0
 566:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_TAP_AXES, 2);
 3118              		.loc 1 566 56 is_stmt 0 view .LVU596
 3119 0000 08B5     		push	{r3, lr}
 3120              	.LCFI107:
 3121              		.cfi_def_cfa_offset 8
 3122              		.cfi_offset 3, -8
 3123              		.cfi_offset 14, -4
 567:Src/ADXL345.c **** }
 3124              		.loc 1 567 2 is_stmt 1 view .LVU597
 567:Src/ADXL345.c **** }
 3125              		.loc 1 567 9 is_stmt 0 view .LVU598
 3126 0002 0222     		movs	r2, #2
 3127 0004 2A21     		movs	r1, #42
 3128 0006 FFF7FEFF 		bl	getRegisterBit
 3129              	.LVL245:
 568:Src/ADXL345.c **** void ADXL345setTapDetectionOnX(ADXL345_SPI_I2C* adxl345, bool state) {
 3130              		.loc 1 568 1 view .LVU599
 3131 000a 08BD     		pop	{r3, pc}
 3132              		.cfi_endproc
 3133              	.LFE197:
 3135              		.section	.text.ADXL345setTapDetectionOnX,"ax",%progbits
 3136              		.align	1
 3137              		.global	ADXL345setTapDetectionOnX
 3138              		.syntax unified
 3139              		.thumb
 3140              		.thumb_func
 3141              		.fpu fpv4-sp-d16
 3143              	ADXL345setTapDetectionOnX:
 3144              	.LVL246:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 78


 3145              	.LFB198:
 569:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_TAP_AXES, 2, state);
 3146              		.loc 1 569 70 is_stmt 1 view -0
 3147              		.cfi_startproc
 3148              		@ args = 0, pretend = 0, frame = 0
 3149              		@ frame_needed = 0, uses_anonymous_args = 0
 569:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_TAP_AXES, 2, state);
 3150              		.loc 1 569 70 is_stmt 0 view .LVU601
 3151 0000 08B5     		push	{r3, lr}
 3152              	.LCFI108:
 3153              		.cfi_def_cfa_offset 8
 3154              		.cfi_offset 3, -8
 3155              		.cfi_offset 14, -4
 3156 0002 0B46     		mov	r3, r1
 570:Src/ADXL345.c **** }
 3157              		.loc 1 570 2 is_stmt 1 view .LVU602
 3158 0004 0222     		movs	r2, #2
 3159 0006 2A21     		movs	r1, #42
 3160              	.LVL247:
 570:Src/ADXL345.c **** }
 3161              		.loc 1 570 2 is_stmt 0 view .LVU603
 3162 0008 FFF7FEFF 		bl	setRegisterBit
 3163              	.LVL248:
 571:Src/ADXL345.c **** bool ADXL345isTapDetectionOnY(ADXL345_SPI_I2C* adxl345){
 3164              		.loc 1 571 1 view .LVU604
 3165 000c 08BD     		pop	{r3, pc}
 3166              		.cfi_endproc
 3167              	.LFE198:
 3169              		.section	.text.ADXL345isTapDetectionOnY,"ax",%progbits
 3170              		.align	1
 3171              		.global	ADXL345isTapDetectionOnY
 3172              		.syntax unified
 3173              		.thumb
 3174              		.thumb_func
 3175              		.fpu fpv4-sp-d16
 3177              	ADXL345isTapDetectionOnY:
 3178              	.LVL249:
 3179              	.LFB199:
 572:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_TAP_AXES, 1);
 3180              		.loc 1 572 56 is_stmt 1 view -0
 3181              		.cfi_startproc
 3182              		@ args = 0, pretend = 0, frame = 0
 3183              		@ frame_needed = 0, uses_anonymous_args = 0
 572:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_TAP_AXES, 1);
 3184              		.loc 1 572 56 is_stmt 0 view .LVU606
 3185 0000 08B5     		push	{r3, lr}
 3186              	.LCFI109:
 3187              		.cfi_def_cfa_offset 8
 3188              		.cfi_offset 3, -8
 3189              		.cfi_offset 14, -4
 573:Src/ADXL345.c **** }
 3190              		.loc 1 573 2 is_stmt 1 view .LVU607
 573:Src/ADXL345.c **** }
 3191              		.loc 1 573 9 is_stmt 0 view .LVU608
 3192 0002 0122     		movs	r2, #1
 3193 0004 2A21     		movs	r1, #42
 3194 0006 FFF7FEFF 		bl	getRegisterBit
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 79


 3195              	.LVL250:
 574:Src/ADXL345.c **** void ADXL345setTapDetectionOnY(ADXL345_SPI_I2C* adxl345, bool state) {
 3196              		.loc 1 574 1 view .LVU609
 3197 000a 08BD     		pop	{r3, pc}
 3198              		.cfi_endproc
 3199              	.LFE199:
 3201              		.section	.text.ADXL345setTapDetectionOnY,"ax",%progbits
 3202              		.align	1
 3203              		.global	ADXL345setTapDetectionOnY
 3204              		.syntax unified
 3205              		.thumb
 3206              		.thumb_func
 3207              		.fpu fpv4-sp-d16
 3209              	ADXL345setTapDetectionOnY:
 3210              	.LVL251:
 3211              	.LFB200:
 575:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_TAP_AXES, 1, state);
 3212              		.loc 1 575 70 is_stmt 1 view -0
 3213              		.cfi_startproc
 3214              		@ args = 0, pretend = 0, frame = 0
 3215              		@ frame_needed = 0, uses_anonymous_args = 0
 575:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_TAP_AXES, 1, state);
 3216              		.loc 1 575 70 is_stmt 0 view .LVU611
 3217 0000 08B5     		push	{r3, lr}
 3218              	.LCFI110:
 3219              		.cfi_def_cfa_offset 8
 3220              		.cfi_offset 3, -8
 3221              		.cfi_offset 14, -4
 3222 0002 0B46     		mov	r3, r1
 576:Src/ADXL345.c **** }
 3223              		.loc 1 576 2 is_stmt 1 view .LVU612
 3224 0004 0122     		movs	r2, #1
 3225 0006 2A21     		movs	r1, #42
 3226              	.LVL252:
 576:Src/ADXL345.c **** }
 3227              		.loc 1 576 2 is_stmt 0 view .LVU613
 3228 0008 FFF7FEFF 		bl	setRegisterBit
 3229              	.LVL253:
 577:Src/ADXL345.c **** bool ADXL345isTapDetectionOnZ(ADXL345_SPI_I2C* adxl345){
 3230              		.loc 1 577 1 view .LVU614
 3231 000c 08BD     		pop	{r3, pc}
 3232              		.cfi_endproc
 3233              	.LFE200:
 3235              		.section	.text.ADXL345isTapDetectionOnZ,"ax",%progbits
 3236              		.align	1
 3237              		.global	ADXL345isTapDetectionOnZ
 3238              		.syntax unified
 3239              		.thumb
 3240              		.thumb_func
 3241              		.fpu fpv4-sp-d16
 3243              	ADXL345isTapDetectionOnZ:
 3244              	.LVL254:
 3245              	.LFB201:
 578:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_TAP_AXES, 0);
 3246              		.loc 1 578 56 is_stmt 1 view -0
 3247              		.cfi_startproc
 3248              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 80


 3249              		@ frame_needed = 0, uses_anonymous_args = 0
 578:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_TAP_AXES, 0);
 3250              		.loc 1 578 56 is_stmt 0 view .LVU616
 3251 0000 08B5     		push	{r3, lr}
 3252              	.LCFI111:
 3253              		.cfi_def_cfa_offset 8
 3254              		.cfi_offset 3, -8
 3255              		.cfi_offset 14, -4
 579:Src/ADXL345.c **** }
 3256              		.loc 1 579 2 is_stmt 1 view .LVU617
 579:Src/ADXL345.c **** }
 3257              		.loc 1 579 9 is_stmt 0 view .LVU618
 3258 0002 0022     		movs	r2, #0
 3259 0004 2A21     		movs	r1, #42
 3260 0006 FFF7FEFF 		bl	getRegisterBit
 3261              	.LVL255:
 580:Src/ADXL345.c **** void ADXL345setTapDetectionOnZ(ADXL345_SPI_I2C* adxl345, bool state) {
 3262              		.loc 1 580 1 view .LVU619
 3263 000a 08BD     		pop	{r3, pc}
 3264              		.cfi_endproc
 3265              	.LFE201:
 3267              		.section	.text.ADXL345setTapDetectionOnZ,"ax",%progbits
 3268              		.align	1
 3269              		.global	ADXL345setTapDetectionOnZ
 3270              		.syntax unified
 3271              		.thumb
 3272              		.thumb_func
 3273              		.fpu fpv4-sp-d16
 3275              	ADXL345setTapDetectionOnZ:
 3276              	.LVL256:
 3277              	.LFB202:
 581:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_TAP_AXES, 0, state);
 3278              		.loc 1 581 70 is_stmt 1 view -0
 3279              		.cfi_startproc
 3280              		@ args = 0, pretend = 0, frame = 0
 3281              		@ frame_needed = 0, uses_anonymous_args = 0
 581:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_TAP_AXES, 0, state);
 3282              		.loc 1 581 70 is_stmt 0 view .LVU621
 3283 0000 08B5     		push	{r3, lr}
 3284              	.LCFI112:
 3285              		.cfi_def_cfa_offset 8
 3286              		.cfi_offset 3, -8
 3287              		.cfi_offset 14, -4
 3288 0002 0B46     		mov	r3, r1
 582:Src/ADXL345.c **** }
 3289              		.loc 1 582 2 is_stmt 1 view .LVU622
 3290 0004 0022     		movs	r2, #0
 3291 0006 2A21     		movs	r1, #42
 3292              	.LVL257:
 582:Src/ADXL345.c **** }
 3293              		.loc 1 582 2 is_stmt 0 view .LVU623
 3294 0008 FFF7FEFF 		bl	setRegisterBit
 3295              	.LVL258:
 583:Src/ADXL345.c **** 
 3296              		.loc 1 583 1 view .LVU624
 3297 000c 08BD     		pop	{r3, pc}
 3298              		.cfi_endproc
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 81


 3299              	.LFE202:
 3301              		.section	.text.ADXL345setTapDetectionOnXYZ,"ax",%progbits
 3302              		.align	1
 3303              		.global	ADXL345setTapDetectionOnXYZ
 3304              		.syntax unified
 3305              		.thumb
 3306              		.thumb_func
 3307              		.fpu fpv4-sp-d16
 3309              	ADXL345setTapDetectionOnXYZ:
 3310              	.LVL259:
 3311              	.LFB203:
 585:Src/ADXL345.c **** 	ADXL345setTapDetectionOnX(adxl345, stateX);
 3312              		.loc 1 585 99 is_stmt 1 view -0
 3313              		.cfi_startproc
 3314              		@ args = 0, pretend = 0, frame = 0
 3315              		@ frame_needed = 0, uses_anonymous_args = 0
 585:Src/ADXL345.c **** 	ADXL345setTapDetectionOnX(adxl345, stateX);
 3316              		.loc 1 585 99 is_stmt 0 view .LVU626
 3317 0000 70B5     		push	{r4, r5, r6, lr}
 3318              	.LCFI113:
 3319              		.cfi_def_cfa_offset 16
 3320              		.cfi_offset 4, -16
 3321              		.cfi_offset 5, -12
 3322              		.cfi_offset 6, -8
 3323              		.cfi_offset 14, -4
 3324 0002 0446     		mov	r4, r0
 3325 0004 1646     		mov	r6, r2
 3326 0006 1D46     		mov	r5, r3
 586:Src/ADXL345.c **** 	ADXL345setTapDetectionOnY(adxl345, stateY);
 3327              		.loc 1 586 2 is_stmt 1 view .LVU627
 3328 0008 FFF7FEFF 		bl	ADXL345setTapDetectionOnX
 3329              	.LVL260:
 587:Src/ADXL345.c **** 	ADXL345setTapDetectionOnZ(adxl345, stateZ);
 3330              		.loc 1 587 2 view .LVU628
 3331 000c 3146     		mov	r1, r6
 3332 000e 2046     		mov	r0, r4
 3333 0010 FFF7FEFF 		bl	ADXL345setTapDetectionOnY
 3334              	.LVL261:
 588:Src/ADXL345.c **** }
 3335              		.loc 1 588 2 view .LVU629
 3336 0014 2946     		mov	r1, r5
 3337 0016 2046     		mov	r0, r4
 3338 0018 FFF7FEFF 		bl	ADXL345setTapDetectionOnZ
 3339              	.LVL262:
 589:Src/ADXL345.c **** 
 3340              		.loc 1 589 1 is_stmt 0 view .LVU630
 3341 001c 70BD     		pop	{r4, r5, r6, pc}
 589:Src/ADXL345.c **** 
 3342              		.loc 1 589 1 view .LVU631
 3343              		.cfi_endproc
 3344              	.LFE203:
 3346              		.section	.text.ADXL345isActivitySourceOnX,"ax",%progbits
 3347              		.align	1
 3348              		.global	ADXL345isActivitySourceOnX
 3349              		.syntax unified
 3350              		.thumb
 3351              		.thumb_func
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 82


 3352              		.fpu fpv4-sp-d16
 3354              	ADXL345isActivitySourceOnX:
 3355              	.LVL263:
 3356              	.LFB204:
 591:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 6);
 3357              		.loc 1 591 58 is_stmt 1 view -0
 3358              		.cfi_startproc
 3359              		@ args = 0, pretend = 0, frame = 0
 3360              		@ frame_needed = 0, uses_anonymous_args = 0
 591:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 6);
 3361              		.loc 1 591 58 is_stmt 0 view .LVU633
 3362 0000 08B5     		push	{r3, lr}
 3363              	.LCFI114:
 3364              		.cfi_def_cfa_offset 8
 3365              		.cfi_offset 3, -8
 3366              		.cfi_offset 14, -4
 592:Src/ADXL345.c **** }
 3367              		.loc 1 592 2 is_stmt 1 view .LVU634
 592:Src/ADXL345.c **** }
 3368              		.loc 1 592 9 is_stmt 0 view .LVU635
 3369 0002 0622     		movs	r2, #6
 3370 0004 2B21     		movs	r1, #43
 3371 0006 FFF7FEFF 		bl	getRegisterBit
 3372              	.LVL264:
 593:Src/ADXL345.c **** bool ADXL345isActivitySourceOnY(ADXL345_SPI_I2C* adxl345){
 3373              		.loc 1 593 1 view .LVU636
 3374 000a 08BD     		pop	{r3, pc}
 3375              		.cfi_endproc
 3376              	.LFE204:
 3378              		.section	.text.ADXL345isActivitySourceOnY,"ax",%progbits
 3379              		.align	1
 3380              		.global	ADXL345isActivitySourceOnY
 3381              		.syntax unified
 3382              		.thumb
 3383              		.thumb_func
 3384              		.fpu fpv4-sp-d16
 3386              	ADXL345isActivitySourceOnY:
 3387              	.LVL265:
 3388              	.LFB205:
 594:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 5);
 3389              		.loc 1 594 58 is_stmt 1 view -0
 3390              		.cfi_startproc
 3391              		@ args = 0, pretend = 0, frame = 0
 3392              		@ frame_needed = 0, uses_anonymous_args = 0
 594:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 5);
 3393              		.loc 1 594 58 is_stmt 0 view .LVU638
 3394 0000 08B5     		push	{r3, lr}
 3395              	.LCFI115:
 3396              		.cfi_def_cfa_offset 8
 3397              		.cfi_offset 3, -8
 3398              		.cfi_offset 14, -4
 595:Src/ADXL345.c **** }
 3399              		.loc 1 595 2 is_stmt 1 view .LVU639
 595:Src/ADXL345.c **** }
 3400              		.loc 1 595 9 is_stmt 0 view .LVU640
 3401 0002 0522     		movs	r2, #5
 3402 0004 2B21     		movs	r1, #43
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 83


 3403 0006 FFF7FEFF 		bl	getRegisterBit
 3404              	.LVL266:
 596:Src/ADXL345.c **** bool ADXL345isActivitySourceOnZ(ADXL345_SPI_I2C* adxl345){
 3405              		.loc 1 596 1 view .LVU641
 3406 000a 08BD     		pop	{r3, pc}
 3407              		.cfi_endproc
 3408              	.LFE205:
 3410              		.section	.text.ADXL345isActivitySourceOnZ,"ax",%progbits
 3411              		.align	1
 3412              		.global	ADXL345isActivitySourceOnZ
 3413              		.syntax unified
 3414              		.thumb
 3415              		.thumb_func
 3416              		.fpu fpv4-sp-d16
 3418              	ADXL345isActivitySourceOnZ:
 3419              	.LVL267:
 3420              	.LFB206:
 597:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 4);
 3421              		.loc 1 597 58 is_stmt 1 view -0
 3422              		.cfi_startproc
 3423              		@ args = 0, pretend = 0, frame = 0
 3424              		@ frame_needed = 0, uses_anonymous_args = 0
 597:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 4);
 3425              		.loc 1 597 58 is_stmt 0 view .LVU643
 3426 0000 08B5     		push	{r3, lr}
 3427              	.LCFI116:
 3428              		.cfi_def_cfa_offset 8
 3429              		.cfi_offset 3, -8
 3430              		.cfi_offset 14, -4
 598:Src/ADXL345.c **** }
 3431              		.loc 1 598 2 is_stmt 1 view .LVU644
 598:Src/ADXL345.c **** }
 3432              		.loc 1 598 9 is_stmt 0 view .LVU645
 3433 0002 0422     		movs	r2, #4
 3434 0004 2B21     		movs	r1, #43
 3435 0006 FFF7FEFF 		bl	getRegisterBit
 3436              	.LVL268:
 599:Src/ADXL345.c **** 
 3437              		.loc 1 599 1 view .LVU646
 3438 000a 08BD     		pop	{r3, pc}
 3439              		.cfi_endproc
 3440              	.LFE206:
 3442              		.section	.text.ADXL345isTapSourceOnX,"ax",%progbits
 3443              		.align	1
 3444              		.global	ADXL345isTapSourceOnX
 3445              		.syntax unified
 3446              		.thumb
 3447              		.thumb_func
 3448              		.fpu fpv4-sp-d16
 3450              	ADXL345isTapSourceOnX:
 3451              	.LVL269:
 3452              	.LFB207:
 601:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 2);
 3453              		.loc 1 601 53 is_stmt 1 view -0
 3454              		.cfi_startproc
 3455              		@ args = 0, pretend = 0, frame = 0
 3456              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 84


 601:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 2);
 3457              		.loc 1 601 53 is_stmt 0 view .LVU648
 3458 0000 08B5     		push	{r3, lr}
 3459              	.LCFI117:
 3460              		.cfi_def_cfa_offset 8
 3461              		.cfi_offset 3, -8
 3462              		.cfi_offset 14, -4
 602:Src/ADXL345.c **** }
 3463              		.loc 1 602 2 is_stmt 1 view .LVU649
 602:Src/ADXL345.c **** }
 3464              		.loc 1 602 9 is_stmt 0 view .LVU650
 3465 0002 0222     		movs	r2, #2
 3466 0004 2B21     		movs	r1, #43
 3467 0006 FFF7FEFF 		bl	getRegisterBit
 3468              	.LVL270:
 603:Src/ADXL345.c **** bool ADXL345isTapSourceOnY(ADXL345_SPI_I2C* adxl345){
 3469              		.loc 1 603 1 view .LVU651
 3470 000a 08BD     		pop	{r3, pc}
 3471              		.cfi_endproc
 3472              	.LFE207:
 3474              		.section	.text.ADXL345isTapSourceOnY,"ax",%progbits
 3475              		.align	1
 3476              		.global	ADXL345isTapSourceOnY
 3477              		.syntax unified
 3478              		.thumb
 3479              		.thumb_func
 3480              		.fpu fpv4-sp-d16
 3482              	ADXL345isTapSourceOnY:
 3483              	.LVL271:
 3484              	.LFB208:
 604:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 1);
 3485              		.loc 1 604 53 is_stmt 1 view -0
 3486              		.cfi_startproc
 3487              		@ args = 0, pretend = 0, frame = 0
 3488              		@ frame_needed = 0, uses_anonymous_args = 0
 604:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 1);
 3489              		.loc 1 604 53 is_stmt 0 view .LVU653
 3490 0000 08B5     		push	{r3, lr}
 3491              	.LCFI118:
 3492              		.cfi_def_cfa_offset 8
 3493              		.cfi_offset 3, -8
 3494              		.cfi_offset 14, -4
 605:Src/ADXL345.c **** }
 3495              		.loc 1 605 2 is_stmt 1 view .LVU654
 605:Src/ADXL345.c **** }
 3496              		.loc 1 605 9 is_stmt 0 view .LVU655
 3497 0002 0122     		movs	r2, #1
 3498 0004 2B21     		movs	r1, #43
 3499 0006 FFF7FEFF 		bl	getRegisterBit
 3500              	.LVL272:
 606:Src/ADXL345.c **** bool ADXL345isTapSourceOnZ(ADXL345_SPI_I2C* adxl345){
 3501              		.loc 1 606 1 view .LVU656
 3502 000a 08BD     		pop	{r3, pc}
 3503              		.cfi_endproc
 3504              	.LFE208:
 3506              		.section	.text.ADXL345isTapSourceOnZ,"ax",%progbits
 3507              		.align	1
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 85


 3508              		.global	ADXL345isTapSourceOnZ
 3509              		.syntax unified
 3510              		.thumb
 3511              		.thumb_func
 3512              		.fpu fpv4-sp-d16
 3514              	ADXL345isTapSourceOnZ:
 3515              	.LVL273:
 3516              	.LFB209:
 607:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 0);
 3517              		.loc 1 607 53 is_stmt 1 view -0
 3518              		.cfi_startproc
 3519              		@ args = 0, pretend = 0, frame = 0
 3520              		@ frame_needed = 0, uses_anonymous_args = 0
 607:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 0);
 3521              		.loc 1 607 53 is_stmt 0 view .LVU658
 3522 0000 08B5     		push	{r3, lr}
 3523              	.LCFI119:
 3524              		.cfi_def_cfa_offset 8
 3525              		.cfi_offset 3, -8
 3526              		.cfi_offset 14, -4
 608:Src/ADXL345.c **** }
 3527              		.loc 1 608 2 is_stmt 1 view .LVU659
 608:Src/ADXL345.c **** }
 3528              		.loc 1 608 9 is_stmt 0 view .LVU660
 3529 0002 0022     		movs	r2, #0
 3530 0004 2B21     		movs	r1, #43
 3531 0006 FFF7FEFF 		bl	getRegisterBit
 3532              	.LVL274:
 609:Src/ADXL345.c **** 
 3533              		.loc 1 609 1 view .LVU661
 3534 000a 08BD     		pop	{r3, pc}
 3535              		.cfi_endproc
 3536              	.LFE209:
 3538              		.section	.text.ADXL345isAsleep,"ax",%progbits
 3539              		.align	1
 3540              		.global	ADXL345isAsleep
 3541              		.syntax unified
 3542              		.thumb
 3543              		.thumb_func
 3544              		.fpu fpv4-sp-d16
 3546              	ADXL345isAsleep:
 3547              	.LVL275:
 3548              	.LFB210:
 613:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 3);
 3549              		.loc 1 613 47 is_stmt 1 view -0
 3550              		.cfi_startproc
 3551              		@ args = 0, pretend = 0, frame = 0
 3552              		@ frame_needed = 0, uses_anonymous_args = 0
 613:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_ACT_TAP_STATUS, 3);
 3553              		.loc 1 613 47 is_stmt 0 view .LVU663
 3554 0000 08B5     		push	{r3, lr}
 3555              	.LCFI120:
 3556              		.cfi_def_cfa_offset 8
 3557              		.cfi_offset 3, -8
 3558              		.cfi_offset 14, -4
 614:Src/ADXL345.c **** }
 3559              		.loc 1 614 2 is_stmt 1 view .LVU664
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 86


 614:Src/ADXL345.c **** }
 3560              		.loc 1 614 9 is_stmt 0 view .LVU665
 3561 0002 0322     		movs	r2, #3
 3562 0004 2B21     		movs	r1, #43
 3563 0006 FFF7FEFF 		bl	getRegisterBit
 3564              	.LVL276:
 615:Src/ADXL345.c **** 
 3565              		.loc 1 615 1 view .LVU666
 3566 000a 08BD     		pop	{r3, pc}
 3567              		.cfi_endproc
 3568              	.LFE210:
 3570              		.section	.text.ADXL345isLowPower,"ax",%progbits
 3571              		.align	1
 3572              		.global	ADXL345isLowPower
 3573              		.syntax unified
 3574              		.thumb
 3575              		.thumb_func
 3576              		.fpu fpv4-sp-d16
 3578              	ADXL345isLowPower:
 3579              	.LVL277:
 3580              	.LFB211:
 619:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_BW_RATE, 4);
 3581              		.loc 1 619 49 is_stmt 1 view -0
 3582              		.cfi_startproc
 3583              		@ args = 0, pretend = 0, frame = 0
 3584              		@ frame_needed = 0, uses_anonymous_args = 0
 619:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_BW_RATE, 4);
 3585              		.loc 1 619 49 is_stmt 0 view .LVU668
 3586 0000 08B5     		push	{r3, lr}
 3587              	.LCFI121:
 3588              		.cfi_def_cfa_offset 8
 3589              		.cfi_offset 3, -8
 3590              		.cfi_offset 14, -4
 620:Src/ADXL345.c **** }
 3591              		.loc 1 620 2 is_stmt 1 view .LVU669
 620:Src/ADXL345.c **** }
 3592              		.loc 1 620 9 is_stmt 0 view .LVU670
 3593 0002 0422     		movs	r2, #4
 3594 0004 2C21     		movs	r1, #44
 3595 0006 FFF7FEFF 		bl	getRegisterBit
 3596              	.LVL278:
 621:Src/ADXL345.c **** void ADXL345setLowPower(ADXL345_SPI_I2C* adxl345, bool state) {
 3597              		.loc 1 621 1 view .LVU671
 3598 000a 08BD     		pop	{r3, pc}
 3599              		.cfi_endproc
 3600              	.LFE211:
 3602              		.section	.text.ADXL345setLowPower,"ax",%progbits
 3603              		.align	1
 3604              		.global	ADXL345setLowPower
 3605              		.syntax unified
 3606              		.thumb
 3607              		.thumb_func
 3608              		.fpu fpv4-sp-d16
 3610              	ADXL345setLowPower:
 3611              	.LVL279:
 3612              	.LFB212:
 622:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_BW_RATE, 4, state);
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 87


 3613              		.loc 1 622 63 is_stmt 1 view -0
 3614              		.cfi_startproc
 3615              		@ args = 0, pretend = 0, frame = 0
 3616              		@ frame_needed = 0, uses_anonymous_args = 0
 622:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_BW_RATE, 4, state);
 3617              		.loc 1 622 63 is_stmt 0 view .LVU673
 3618 0000 08B5     		push	{r3, lr}
 3619              	.LCFI122:
 3620              		.cfi_def_cfa_offset 8
 3621              		.cfi_offset 3, -8
 3622              		.cfi_offset 14, -4
 3623 0002 0B46     		mov	r3, r1
 623:Src/ADXL345.c **** }
 3624              		.loc 1 623 2 is_stmt 1 view .LVU674
 3625 0004 0422     		movs	r2, #4
 3626 0006 2C21     		movs	r1, #44
 3627              	.LVL280:
 623:Src/ADXL345.c **** }
 3628              		.loc 1 623 2 is_stmt 0 view .LVU675
 3629 0008 FFF7FEFF 		bl	setRegisterBit
 3630              	.LVL281:
 624:Src/ADXL345.c **** 
 3631              		.loc 1 624 1 view .LVU676
 3632 000c 08BD     		pop	{r3, pc}
 3633              		.cfi_endproc
 3634              	.LFE212:
 3636              		.global	__aeabi_i2d
 3637              		.global	__aeabi_dmul
 3638              		.section	.text.ADXL345getRate,"ax",%progbits
 3639              		.align	1
 3640              		.global	ADXL345getRate
 3641              		.syntax unified
 3642              		.thumb
 3643              		.thumb_func
 3644              		.fpu fpv4-sp-d16
 3646              	ADXL345getRate:
 3647              	.LVL282:
 3648              	.LFB213:
 628:Src/ADXL345.c **** 	uint8_t _b;
 3649              		.loc 1 628 48 is_stmt 1 view -0
 3650              		.cfi_startproc
 3651              		@ args = 0, pretend = 0, frame = 8
 3652              		@ frame_needed = 0, uses_anonymous_args = 0
 628:Src/ADXL345.c **** 	uint8_t _b;
 3653              		.loc 1 628 48 is_stmt 0 view .LVU678
 3654 0000 00B5     		push	{lr}
 3655              	.LCFI123:
 3656              		.cfi_def_cfa_offset 4
 3657              		.cfi_offset 14, -4
 3658 0002 83B0     		sub	sp, sp, #12
 3659              	.LCFI124:
 3660              		.cfi_def_cfa_offset 16
 629:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_BW_RATE, 1, &_b);
 3661              		.loc 1 629 2 is_stmt 1 view .LVU679
 630:Src/ADXL345.c **** 	_b &= 0b00001111;
 3662              		.loc 1 630 2 view .LVU680
 3663 0004 0DF10703 		add	r3, sp, #7
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 88


 3664 0008 0122     		movs	r2, #1
 3665 000a 2C21     		movs	r1, #44
 3666 000c FFF7FEFF 		bl	readFrom
 3667              	.LVL283:
 631:Src/ADXL345.c **** 	return (pow(2,((int) _b)-6)) * 6.25;
 3668              		.loc 1 631 2 view .LVU681
 631:Src/ADXL345.c **** 	return (pow(2,((int) _b)-6)) * 6.25;
 3669              		.loc 1 631 5 is_stmt 0 view .LVU682
 3670 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3671 0014 00F00F00 		and	r0, r0, #15
 3672 0018 8DF80700 		strb	r0, [sp, #7]
 632:Src/ADXL345.c **** }
 3673              		.loc 1 632 2 is_stmt 1 view .LVU683
 632:Src/ADXL345.c **** }
 3674              		.loc 1 632 10 is_stmt 0 view .LVU684
 3675 001c 0638     		subs	r0, r0, #6
 3676 001e FFF7FEFF 		bl	__aeabi_i2d
 3677              	.LVL284:
 3678 0022 41EC110B 		vmov	d1, r0, r1
 3679 0026 9FED080B 		vldr.64	d0, .L199
 3680 002a FFF7FEFF 		bl	pow
 3681              	.LVL285:
 3682 002e 51EC100B 		vmov	r0, r1, d0
 632:Src/ADXL345.c **** }
 3683              		.loc 1 632 31 view .LVU685
 3684 0032 0022     		movs	r2, #0
 3685 0034 064B     		ldr	r3, .L199+8
 3686 0036 FFF7FEFF 		bl	__aeabi_dmul
 3687              	.LVL286:
 633:Src/ADXL345.c **** 
 3688              		.loc 1 633 1 view .LVU686
 3689 003a 41EC100B 		vmov	d0, r0, r1
 3690 003e 03B0     		add	sp, sp, #12
 3691              	.LCFI125:
 3692              		.cfi_def_cfa_offset 4
 3693              		@ sp needed
 3694 0040 5DF804FB 		ldr	pc, [sp], #4
 3695              	.L200:
 3696 0044 AFF30080 		.align	3
 3697              	.L199:
 3698 0048 00000000 		.word	0
 3699 004c 00000040 		.word	1073741824
 3700 0050 00001940 		.word	1075380224
 3701              		.cfi_endproc
 3702              	.LFE213:
 3704              		.global	__aeabi_f2d
 3705              		.global	__aeabi_ddiv
 3706              		.global	__aeabi_d2iz
 3707              		.section	.text.ADXL345setRate,"ax",%progbits
 3708              		.align	1
 3709              		.global	ADXL345setRate
 3710              		.syntax unified
 3711              		.thumb
 3712              		.thumb_func
 3713              		.fpu fpv4-sp-d16
 3715              	ADXL345setRate:
 3716              	.LVL287:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 89


 3717              	.LFB214:
 635:Src/ADXL345.c **** 	uint8_t _b,_s;
 3718              		.loc 1 635 58 is_stmt 1 view -0
 3719              		.cfi_startproc
 3720              		@ args = 0, pretend = 0, frame = 8
 3721              		@ frame_needed = 0, uses_anonymous_args = 0
 635:Src/ADXL345.c **** 	uint8_t _b,_s;
 3722              		.loc 1 635 58 is_stmt 0 view .LVU688
 3723 0000 30B5     		push	{r4, r5, lr}
 3724              	.LCFI126:
 3725              		.cfi_def_cfa_offset 12
 3726              		.cfi_offset 4, -12
 3727              		.cfi_offset 5, -8
 3728              		.cfi_offset 14, -4
 3729 0002 83B0     		sub	sp, sp, #12
 3730              	.LCFI127:
 3731              		.cfi_def_cfa_offset 24
 3732 0004 0546     		mov	r5, r0
 636:Src/ADXL345.c **** 	int v = (int) (rate / 6.25);
 3733              		.loc 1 636 2 is_stmt 1 view .LVU689
 637:Src/ADXL345.c **** 	int r = 0;
 3734              		.loc 1 637 2 view .LVU690
 637:Src/ADXL345.c **** 	int r = 0;
 3735              		.loc 1 637 22 is_stmt 0 view .LVU691
 3736 0006 10EE100A 		vmov	r0, s0
 3737              	.LVL288:
 637:Src/ADXL345.c **** 	int r = 0;
 3738              		.loc 1 637 22 view .LVU692
 3739 000a FFF7FEFF 		bl	__aeabi_f2d
 3740              	.LVL289:
 637:Src/ADXL345.c **** 	int r = 0;
 3741              		.loc 1 637 22 view .LVU693
 3742 000e 0022     		movs	r2, #0
 3743 0010 114B     		ldr	r3, .L207
 3744 0012 FFF7FEFF 		bl	__aeabi_ddiv
 3745              	.LVL290:
 637:Src/ADXL345.c **** 	int r = 0;
 3746              		.loc 1 637 6 view .LVU694
 3747 0016 FFF7FEFF 		bl	__aeabi_d2iz
 3748              	.LVL291:
 638:Src/ADXL345.c **** 	while (v >>= 1)
 3749              		.loc 1 638 2 is_stmt 1 view .LVU695
 639:Src/ADXL345.c **** 	{
 3750              		.loc 1 639 2 view .LVU696
 638:Src/ADXL345.c **** 	while (v >>= 1)
 3751              		.loc 1 638 6 is_stmt 0 view .LVU697
 3752 001a 0024     		movs	r4, #0
 639:Src/ADXL345.c **** 	{
 3753              		.loc 1 639 8 view .LVU698
 3754 001c 00E0     		b	.L202
 3755              	.LVL292:
 3756              	.L203:
 641:Src/ADXL345.c **** 	}
 3757              		.loc 1 641 3 is_stmt 1 view .LVU699
 641:Src/ADXL345.c **** 	}
 3758              		.loc 1 641 4 is_stmt 0 view .LVU700
 3759 001e 0134     		adds	r4, r4, #1
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 90


 3760              	.LVL293:
 3761              	.L202:
 639:Src/ADXL345.c **** 	{
 3762              		.loc 1 639 8 is_stmt 1 view .LVU701
 639:Src/ADXL345.c **** 	{
 3763              		.loc 1 639 8 is_stmt 0 view .LVU702
 3764 0020 4010     		asrs	r0, r0, #1
 3765              	.LVL294:
 639:Src/ADXL345.c **** 	{
 3766              		.loc 1 639 8 view .LVU703
 3767 0022 FCD1     		bne	.L203
 643:Src/ADXL345.c **** 		readFrom(adxl345, ADXL345_BW_RATE, 1, &_b);
 3768              		.loc 1 643 2 is_stmt 1 view .LVU704
 643:Src/ADXL345.c **** 		readFrom(adxl345, ADXL345_BW_RATE, 1, &_b);
 3769              		.loc 1 643 5 is_stmt 0 view .LVU705
 3770 0024 092C     		cmp	r4, #9
 3771 0026 01DD     		ble	.L206
 3772              	.LVL295:
 3773              	.L201:
 648:Src/ADXL345.c **** 
 3774              		.loc 1 648 1 view .LVU706
 3775 0028 03B0     		add	sp, sp, #12
 3776              	.LCFI128:
 3777              		.cfi_remember_state
 3778              		.cfi_def_cfa_offset 12
 3779              		@ sp needed
 3780 002a 30BD     		pop	{r4, r5, pc}
 3781              	.LVL296:
 3782              	.L206:
 3783              	.LCFI129:
 3784              		.cfi_restore_state
 644:Src/ADXL345.c **** 		_s = (uint8_t) (r + 6) | (_b & 0b11110000);
 3785              		.loc 1 644 3 is_stmt 1 view .LVU707
 3786 002c 0DF10703 		add	r3, sp, #7
 3787 0030 0122     		movs	r2, #1
 3788 0032 2C21     		movs	r1, #44
 3789 0034 2846     		mov	r0, r5
 3790              	.LVL297:
 644:Src/ADXL345.c **** 		_s = (uint8_t) (r + 6) | (_b & 0b11110000);
 3791              		.loc 1 644 3 is_stmt 0 view .LVU708
 3792 0036 FFF7FEFF 		bl	readFrom
 3793              	.LVL298:
 645:Src/ADXL345.c **** 		writeTo(adxl345, ADXL345_BW_RATE, _s);
 3794              		.loc 1 645 3 is_stmt 1 view .LVU709
 645:Src/ADXL345.c **** 		writeTo(adxl345, ADXL345_BW_RATE, _s);
 3795              		.loc 1 645 8 is_stmt 0 view .LVU710
 3796 003a A21D     		adds	r2, r4, #6
 3797 003c 52B2     		sxtb	r2, r2
 645:Src/ADXL345.c **** 		writeTo(adxl345, ADXL345_BW_RATE, _s);
 3798              		.loc 1 645 32 view .LVU711
 3799 003e 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 3800 0042 23F00F03 		bic	r3, r3, #15
 3801 0046 5BB2     		sxtb	r3, r3
 645:Src/ADXL345.c **** 		writeTo(adxl345, ADXL345_BW_RATE, _s);
 3802              		.loc 1 645 26 view .LVU712
 3803 0048 1A43     		orrs	r2, r2, r3
 3804              	.LVL299:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 91


 646:Src/ADXL345.c **** 	}
 3805              		.loc 1 646 3 is_stmt 1 view .LVU713
 3806 004a D2B2     		uxtb	r2, r2
 646:Src/ADXL345.c **** 	}
 3807              		.loc 1 646 3 is_stmt 0 view .LVU714
 3808 004c 2C21     		movs	r1, #44
 3809 004e 2846     		mov	r0, r5
 3810 0050 FFF7FEFF 		bl	writeTo
 3811              	.LVL300:
 648:Src/ADXL345.c **** 
 3812              		.loc 1 648 1 view .LVU715
 3813 0054 E8E7     		b	.L201
 3814              	.L208:
 3815 0056 00BF     		.align	2
 3816              	.L207:
 3817 0058 00001940 		.word	1075380224
 3818              		.cfi_endproc
 3819              	.LFE214:
 3821              		.section	.text.ADXL345set_bw,"ax",%progbits
 3822              		.align	1
 3823              		.global	ADXL345set_bw
 3824              		.syntax unified
 3825              		.thumb
 3826              		.thumb_func
 3827              		.fpu fpv4-sp-d16
 3829              	ADXL345set_bw:
 3830              	.LVL301:
 3831              	.LFB215:
 652:Src/ADXL345.c **** 	if((bw_code < ADXL345_BW_0_05) || (bw_code > ADXL345_BW_1600)){
 3832              		.loc 1 652 62 is_stmt 1 view -0
 3833              		.cfi_startproc
 3834              		@ args = 0, pretend = 0, frame = 0
 3835              		@ frame_needed = 0, uses_anonymous_args = 0
 652:Src/ADXL345.c **** 	if((bw_code < ADXL345_BW_0_05) || (bw_code > ADXL345_BW_1600)){
 3836              		.loc 1 652 62 is_stmt 0 view .LVU717
 3837 0000 08B5     		push	{r3, lr}
 3838              	.LCFI130:
 3839              		.cfi_def_cfa_offset 8
 3840              		.cfi_offset 3, -8
 3841              		.cfi_offset 14, -4
 653:Src/ADXL345.c **** 		adxl345->status = false;
 3842              		.loc 1 653 2 is_stmt 1 view .LVU718
 653:Src/ADXL345.c **** 		adxl345->status = false;
 3843              		.loc 1 653 4 is_stmt 0 view .LVU719
 3844 0002 0F29     		cmp	r1, #15
 3845 0004 04D9     		bls	.L210
 654:Src/ADXL345.c **** 		adxl345->error_code = ADXL345_BAD_ARG;
 3846              		.loc 1 654 3 is_stmt 1 view .LVU720
 654:Src/ADXL345.c **** 		adxl345->error_code = ADXL345_BAD_ARG;
 3847              		.loc 1 654 19 is_stmt 0 view .LVU721
 3848 0006 0023     		movs	r3, #0
 3849 0008 4370     		strb	r3, [r0, #1]
 655:Src/ADXL345.c **** 	}
 3850              		.loc 1 655 3 is_stmt 1 view .LVU722
 655:Src/ADXL345.c **** 	}
 3851              		.loc 1 655 23 is_stmt 0 view .LVU723
 3852 000a 0223     		movs	r3, #2
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 92


 3853 000c 0374     		strb	r3, [r0, #16]
 3854              	.LVL302:
 3855              	.L209:
 660:Src/ADXL345.c **** 
 3856              		.loc 1 660 1 view .LVU724
 3857 000e 08BD     		pop	{r3, pc}
 3858              	.LVL303:
 3859              	.L210:
 658:Src/ADXL345.c **** 	}
 3860              		.loc 1 658 3 is_stmt 1 view .LVU725
 3861 0010 0A46     		mov	r2, r1
 3862 0012 2C21     		movs	r1, #44
 3863              	.LVL304:
 658:Src/ADXL345.c **** 	}
 3864              		.loc 1 658 3 is_stmt 0 view .LVU726
 3865 0014 FFF7FEFF 		bl	writeTo
 3866              	.LVL305:
 660:Src/ADXL345.c **** 
 3867              		.loc 1 660 1 view .LVU727
 3868 0018 F9E7     		b	.L209
 3869              		.cfi_endproc
 3870              	.LFE215:
 3872              		.section	.text.ADXL345get_bw_code,"ax",%progbits
 3873              		.align	1
 3874              		.global	ADXL345get_bw_code
 3875              		.syntax unified
 3876              		.thumb
 3877              		.thumb_func
 3878              		.fpu fpv4-sp-d16
 3880              	ADXL345get_bw_code:
 3881              	.LVL306:
 3882              	.LFB216:
 662:Src/ADXL345.c **** 	uint8_t bw_code;
 3883              		.loc 1 662 53 is_stmt 1 view -0
 3884              		.cfi_startproc
 3885              		@ args = 0, pretend = 0, frame = 8
 3886              		@ frame_needed = 0, uses_anonymous_args = 0
 662:Src/ADXL345.c **** 	uint8_t bw_code;
 3887              		.loc 1 662 53 is_stmt 0 view .LVU729
 3888 0000 00B5     		push	{lr}
 3889              	.LCFI131:
 3890              		.cfi_def_cfa_offset 4
 3891              		.cfi_offset 14, -4
 3892 0002 83B0     		sub	sp, sp, #12
 3893              	.LCFI132:
 3894              		.cfi_def_cfa_offset 16
 663:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_BW_RATE, 1, &bw_code);
 3895              		.loc 1 663 2 is_stmt 1 view .LVU730
 664:Src/ADXL345.c **** 	return bw_code;
 3896              		.loc 1 664 2 view .LVU731
 3897 0004 0DF10703 		add	r3, sp, #7
 3898 0008 0122     		movs	r2, #1
 3899 000a 2C21     		movs	r1, #44
 3900 000c FFF7FEFF 		bl	readFrom
 3901              	.LVL307:
 665:Src/ADXL345.c **** }
 3902              		.loc 1 665 2 view .LVU732
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 93


 666:Src/ADXL345.c **** 
 3903              		.loc 1 666 1 is_stmt 0 view .LVU733
 3904 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3905 0014 03B0     		add	sp, sp, #12
 3906              	.LCFI133:
 3907              		.cfi_def_cfa_offset 4
 3908              		@ sp needed
 3909 0016 5DF804FB 		ldr	pc, [sp], #4
 3910              		.cfi_endproc
 3911              	.LFE216:
 3913              		.section	.text.ADXL345triggered,"ax",%progbits
 3914              		.align	1
 3915              		.global	ADXL345triggered
 3916              		.syntax unified
 3917              		.thumb
 3918              		.thumb_func
 3919              		.fpu fpv4-sp-d16
 3921              	ADXL345triggered:
 3922              	.LVL308:
 3923              	.LFB217:
 675:Src/ADXL345.c **** 	return ((interrupts >> mask) & 1);
 3924              		.loc 1 675 78 is_stmt 1 view -0
 3925              		.cfi_startproc
 3926              		@ args = 0, pretend = 0, frame = 0
 3927              		@ frame_needed = 0, uses_anonymous_args = 0
 3928              		@ link register save eliminated.
 676:Src/ADXL345.c **** }
 3929              		.loc 1 676 2 view .LVU735
 676:Src/ADXL345.c **** }
 3930              		.loc 1 676 22 is_stmt 0 view .LVU736
 3931 0000 41FA02F0 		asr	r0, r1, r2
 3932              	.LVL309:
 677:Src/ADXL345.c **** 
 3933              		.loc 1 677 1 view .LVU737
 3934 0004 00F00100 		and	r0, r0, #1
 3935 0008 7047     		bx	lr
 3936              		.cfi_endproc
 3937              	.LFE217:
 3939              		.section	.text.ADXL345getInterruptSource,"ax",%progbits
 3940              		.align	1
 3941              		.global	ADXL345getInterruptSource
 3942              		.syntax unified
 3943              		.thumb
 3944              		.thumb_func
 3945              		.fpu fpv4-sp-d16
 3947              	ADXL345getInterruptSource:
 3948              	.LVL310:
 3949              	.LFB218:
 691:Src/ADXL345.c **** 	uint8_t _b;
 3950              		.loc 1 691 61 is_stmt 1 view -0
 3951              		.cfi_startproc
 3952              		@ args = 0, pretend = 0, frame = 8
 3953              		@ frame_needed = 0, uses_anonymous_args = 0
 691:Src/ADXL345.c **** 	uint8_t _b;
 3954              		.loc 1 691 61 is_stmt 0 view .LVU739
 3955 0000 00B5     		push	{lr}
 3956              	.LCFI134:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 94


 3957              		.cfi_def_cfa_offset 4
 3958              		.cfi_offset 14, -4
 3959 0002 83B0     		sub	sp, sp, #12
 3960              	.LCFI135:
 3961              		.cfi_def_cfa_offset 16
 692:Src/ADXL345.c **** 	readFrom(adxl345, ADXL345_INT_SOURCE, 1, &_b);
 3962              		.loc 1 692 2 is_stmt 1 view .LVU740
 693:Src/ADXL345.c **** 	return _b;
 3963              		.loc 1 693 2 view .LVU741
 3964 0004 0DF10703 		add	r3, sp, #7
 3965 0008 0122     		movs	r2, #1
 3966 000a 3021     		movs	r1, #48
 3967 000c FFF7FEFF 		bl	readFrom
 3968              	.LVL311:
 694:Src/ADXL345.c **** }
 3969              		.loc 1 694 2 view .LVU742
 695:Src/ADXL345.c **** 
 3970              		.loc 1 695 1 is_stmt 0 view .LVU743
 3971 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3972 0014 03B0     		add	sp, sp, #12
 3973              	.LCFI136:
 3974              		.cfi_def_cfa_offset 4
 3975              		@ sp needed
 3976 0016 5DF804FB 		ldr	pc, [sp], #4
 3977              		.cfi_endproc
 3978              	.LFE218:
 3980              		.section	.text.ADXL345getInterruptSource_interrupt,"ax",%progbits
 3981              		.align	1
 3982              		.global	ADXL345getInterruptSource_interrupt
 3983              		.syntax unified
 3984              		.thumb
 3985              		.thumb_func
 3986              		.fpu fpv4-sp-d16
 3988              	ADXL345getInterruptSource_interrupt:
 3989              	.LVL312:
 3990              	.LFB219:
 697:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_INT_SOURCE,interruptBit);
 3991              		.loc 1 697 90 is_stmt 1 view -0
 3992              		.cfi_startproc
 3993              		@ args = 0, pretend = 0, frame = 0
 3994              		@ frame_needed = 0, uses_anonymous_args = 0
 697:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_INT_SOURCE,interruptBit);
 3995              		.loc 1 697 90 is_stmt 0 view .LVU745
 3996 0000 08B5     		push	{r3, lr}
 3997              	.LCFI137:
 3998              		.cfi_def_cfa_offset 8
 3999              		.cfi_offset 3, -8
 4000              		.cfi_offset 14, -4
 4001 0002 0A46     		mov	r2, r1
 698:Src/ADXL345.c **** }
 4002              		.loc 1 698 2 is_stmt 1 view .LVU746
 698:Src/ADXL345.c **** }
 4003              		.loc 1 698 9 is_stmt 0 view .LVU747
 4004 0004 3021     		movs	r1, #48
 4005              	.LVL313:
 698:Src/ADXL345.c **** }
 4006              		.loc 1 698 9 view .LVU748
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 95


 4007 0006 FFF7FEFF 		bl	getRegisterBit
 4008              	.LVL314:
 699:Src/ADXL345.c **** 
 4009              		.loc 1 699 1 view .LVU749
 4010 000a 08BD     		pop	{r3, pc}
 4011              		.cfi_endproc
 4012              	.LFE219:
 4014              		.section	.text.ADXL345getInterruptMapping,"ax",%progbits
 4015              		.align	1
 4016              		.global	ADXL345getInterruptMapping
 4017              		.syntax unified
 4018              		.thumb
 4019              		.thumb_func
 4020              		.fpu fpv4-sp-d16
 4022              	ADXL345getInterruptMapping:
 4023              	.LVL315:
 4024              	.LFB220:
 701:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_INT_MAP,interruptBit);
 4025              		.loc 1 701 81 is_stmt 1 view -0
 4026              		.cfi_startproc
 4027              		@ args = 0, pretend = 0, frame = 0
 4028              		@ frame_needed = 0, uses_anonymous_args = 0
 701:Src/ADXL345.c **** 	return getRegisterBit(adxl345, ADXL345_INT_MAP,interruptBit);
 4029              		.loc 1 701 81 is_stmt 0 view .LVU751
 4030 0000 08B5     		push	{r3, lr}
 4031              	.LCFI138:
 4032              		.cfi_def_cfa_offset 8
 4033              		.cfi_offset 3, -8
 4034              		.cfi_offset 14, -4
 4035 0002 0A46     		mov	r2, r1
 702:Src/ADXL345.c **** }
 4036              		.loc 1 702 2 is_stmt 1 view .LVU752
 702:Src/ADXL345.c **** }
 4037              		.loc 1 702 9 is_stmt 0 view .LVU753
 4038 0004 2F21     		movs	r1, #47
 4039              	.LVL316:
 702:Src/ADXL345.c **** }
 4040              		.loc 1 702 9 view .LVU754
 4041 0006 FFF7FEFF 		bl	getRegisterBit
 4042              	.LVL317:
 703:Src/ADXL345.c **** 
 4043              		.loc 1 703 1 view .LVU755
 4044 000a 08BD     		pop	{r3, pc}
 4045              		.cfi_endproc
 4046              	.LFE220:
 4048              		.section	.text.ADXL345setInterruptMapping,"ax",%progbits
 4049              		.align	1
 4050              		.global	ADXL345setInterruptMapping
 4051              		.syntax unified
 4052              		.thumb
 4053              		.thumb_func
 4054              		.fpu fpv4-sp-d16
 4056              	ADXL345setInterruptMapping:
 4057              	.LVL318:
 4058              	.LFB221:
 708:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_INT_MAP, interruptBit, interruptPin);
 4059              		.loc 1 708 100 is_stmt 1 view -0
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 96


 4060              		.cfi_startproc
 4061              		@ args = 0, pretend = 0, frame = 0
 4062              		@ frame_needed = 0, uses_anonymous_args = 0
 708:Src/ADXL345.c **** 	setRegisterBit(adxl345, ADXL345_INT_MAP, interruptBit, interruptPin);
 4063              		.loc 1 708 100 is_stmt 0 view .LVU757
 4064 0000 08B5     		push	{r3, lr}
 4065              	.LCFI139:
 4066              		.cfi_def_cfa_offset 8
 4067              		.cfi_offset 3, -8
 4068              		.cfi_offset 14, -4
 4069 0002 1346     		mov	r3, r2
 709:Src/ADXL345.c **** }
 4070              		.loc 1 709 2 is_stmt 1 view .LVU758
 4071 0004 0A46     		mov	r2, r1
 4072              	.LVL319:
 709:Src/ADXL345.c **** }
 4073              		.loc 1 709 2 is_stmt 0 view .LVU759
 4074 0006 2F21     		movs	r1, #47
 4075              	.LVL320:
 709:Src/ADXL345.c **** }
 4076              		.loc 1 709 2 view .LVU760
 4077 0008 FFF7FEFF 		bl	setRegisterBit
 4078              	.LVL321:
 710:Src/ADXL345.c **** 
 4079              		.loc 1 710 1 view .LVU761
 4080 000c 08BD     		pop	{r3, pc}
 4081              		.cfi_endproc
 4082              	.LFE221:
 4084              		.section	.text.ADXL345setImportantInterruptMapping,"ax",%progbits
 4085              		.align	1
 4086              		.global	ADXL345setImportantInterruptMapping
 4087              		.syntax unified
 4088              		.thumb
 4089              		.thumb_func
 4090              		.fpu fpv4-sp-d16
 4092              	ADXL345setImportantInterruptMapping:
 4093              	.LVL322:
 4094              	.LFB222:
 712:Src/ADXL345.c **** 	if(single_tap == 1) {
 4095              		.loc 1 712 144 is_stmt 1 view -0
 4096              		.cfi_startproc
 4097              		@ args = 8, pretend = 0, frame = 0
 4098              		@ frame_needed = 0, uses_anonymous_args = 0
 712:Src/ADXL345.c **** 	if(single_tap == 1) {
 4099              		.loc 1 712 144 is_stmt 0 view .LVU763
 4100 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4101              	.LCFI140:
 4102              		.cfi_def_cfa_offset 24
 4103              		.cfi_offset 4, -24
 4104              		.cfi_offset 5, -20
 4105              		.cfi_offset 6, -16
 4106              		.cfi_offset 7, -12
 4107              		.cfi_offset 8, -8
 4108              		.cfi_offset 14, -4
 4109 0004 0446     		mov	r4, r0
 4110 0006 1646     		mov	r6, r2
 4111 0008 1D46     		mov	r5, r3
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 97


 4112 000a DDF81880 		ldr	r8, [sp, #24]
 4113 000e 079F     		ldr	r7, [sp, #28]
 713:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT1_PIN );}
 4114              		.loc 1 713 2 is_stmt 1 view .LVU764
 713:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT1_PIN );}
 4115              		.loc 1 713 4 is_stmt 0 view .LVU765
 4116 0010 0129     		cmp	r1, #1
 4117 0012 15D0     		beq	.L236
 715:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT2_PIN );}
 4118              		.loc 1 715 7 is_stmt 1 view .LVU766
 715:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_SINGLE_TAP_BIT,   ADXL345_INT2_PIN );}
 4119              		.loc 1 715 9 is_stmt 0 view .LVU767
 4120 0014 0229     		cmp	r1, #2
 4121 0016 18D0     		beq	.L237
 4122              	.LVL323:
 4123              	.L226:
 718:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT1_PIN );}
 4124              		.loc 1 718 2 is_stmt 1 view .LVU768
 718:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT1_PIN );}
 4125              		.loc 1 718 4 is_stmt 0 view .LVU769
 4126 0018 012E     		cmp	r6, #1
 4127 001a 1BD0     		beq	.L238
 720:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT2_PIN );}
 4128              		.loc 1 720 7 is_stmt 1 view .LVU770
 720:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_DOUBLE_TAP_BIT,   ADXL345_INT2_PIN );}
 4129              		.loc 1 720 9 is_stmt 0 view .LVU771
 4130 001c 022E     		cmp	r6, #2
 4131 001e 1FD0     		beq	.L239
 4132              	.L228:
 723:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT1_PIN );}
 4133              		.loc 1 723 2 is_stmt 1 view .LVU772
 723:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT1_PIN );}
 4134              		.loc 1 723 4 is_stmt 0 view .LVU773
 4135 0020 012D     		cmp	r5, #1
 4136 0022 23D0     		beq	.L240
 725:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT2_PIN );}
 4137              		.loc 1 725 7 is_stmt 1 view .LVU774
 725:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_FREE_FALL_BIT,   ADXL345_INT2_PIN );}
 4138              		.loc 1 725 9 is_stmt 0 view .LVU775
 4139 0024 022D     		cmp	r5, #2
 4140 0026 27D0     		beq	.L241
 4141              	.L230:
 728:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT1_PIN );}
 4142              		.loc 1 728 2 is_stmt 1 view .LVU776
 728:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT1_PIN );}
 4143              		.loc 1 728 4 is_stmt 0 view .LVU777
 4144 0028 B8F1010F 		cmp	r8, #1
 4145 002c 2AD0     		beq	.L242
 730:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}
 4146              		.loc 1 730 7 is_stmt 1 view .LVU778
 730:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_ACTIVITY_BIT,   ADXL345_INT2_PIN );}
 4147              		.loc 1 730 9 is_stmt 0 view .LVU779
 4148 002e B8F1020F 		cmp	r8, #2
 4149 0032 2DD0     		beq	.L243
 4150              	.L232:
 733:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
 4151              		.loc 1 733 2 is_stmt 1 view .LVU780
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 98


 733:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT1_PIN );}
 4152              		.loc 1 733 4 is_stmt 0 view .LVU781
 4153 0034 012F     		cmp	r7, #1
 4154 0036 31D0     		beq	.L244
 735:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
 4155              		.loc 1 735 7 is_stmt 1 view .LVU782
 735:Src/ADXL345.c **** 		ADXL345setInterruptMapping(adxl34, ADXL345_INT_INACTIVITY_BIT,   ADXL345_INT2_PIN );}
 4156              		.loc 1 735 9 is_stmt 0 view .LVU783
 4157 0038 022F     		cmp	r7, #2
 4158 003a 35D0     		beq	.L245
 4159              	.L224:
 737:Src/ADXL345.c **** 
 4160              		.loc 1 737 1 view .LVU784
 4161 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4162              	.LVL324:
 4163              	.L236:
 714:Src/ADXL345.c **** 	else if(single_tap == 2) {
 4164              		.loc 1 714 3 is_stmt 1 view .LVU785
 4165 0040 0022     		movs	r2, #0
 4166              	.LVL325:
 714:Src/ADXL345.c **** 	else if(single_tap == 2) {
 4167              		.loc 1 714 3 is_stmt 0 view .LVU786
 4168 0042 0621     		movs	r1, #6
 4169              	.LVL326:
 714:Src/ADXL345.c **** 	else if(single_tap == 2) {
 4170              		.loc 1 714 3 view .LVU787
 4171 0044 FFF7FEFF 		bl	ADXL345setInterruptMapping
 4172              	.LVL327:
 714:Src/ADXL345.c **** 	else if(single_tap == 2) {
 4173              		.loc 1 714 3 view .LVU788
 4174 0048 E6E7     		b	.L226
 4175              	.LVL328:
 4176              	.L237:
 716:Src/ADXL345.c **** 
 4177              		.loc 1 716 3 is_stmt 1 view .LVU789
 4178 004a 0122     		movs	r2, #1
 4179              	.LVL329:
 716:Src/ADXL345.c **** 
 4180              		.loc 1 716 3 is_stmt 0 view .LVU790
 4181 004c 0621     		movs	r1, #6
 4182              	.LVL330:
 716:Src/ADXL345.c **** 
 4183              		.loc 1 716 3 view .LVU791
 4184 004e FFF7FEFF 		bl	ADXL345setInterruptMapping
 4185              	.LVL331:
 716:Src/ADXL345.c **** 
 4186              		.loc 1 716 3 view .LVU792
 4187 0052 E1E7     		b	.L226
 4188              	.L238:
 719:Src/ADXL345.c **** 	else if(double_tap == 2) {
 4189              		.loc 1 719 3 is_stmt 1 view .LVU793
 4190 0054 0022     		movs	r2, #0
 4191 0056 0521     		movs	r1, #5
 4192 0058 2046     		mov	r0, r4
 4193 005a FFF7FEFF 		bl	ADXL345setInterruptMapping
 4194              	.LVL332:
 4195 005e DFE7     		b	.L228
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 99


 4196              	.L239:
 721:Src/ADXL345.c **** 
 4197              		.loc 1 721 3 view .LVU794
 4198 0060 0122     		movs	r2, #1
 4199 0062 0521     		movs	r1, #5
 4200 0064 2046     		mov	r0, r4
 4201 0066 FFF7FEFF 		bl	ADXL345setInterruptMapping
 4202              	.LVL333:
 4203 006a D9E7     		b	.L228
 4204              	.L240:
 724:Src/ADXL345.c **** 	else if(free_fall == 2) {
 4205              		.loc 1 724 3 view .LVU795
 4206 006c 0022     		movs	r2, #0
 4207 006e 0221     		movs	r1, #2
 4208 0070 2046     		mov	r0, r4
 4209 0072 FFF7FEFF 		bl	ADXL345setInterruptMapping
 4210              	.LVL334:
 4211 0076 D7E7     		b	.L230
 4212              	.L241:
 726:Src/ADXL345.c **** 
 4213              		.loc 1 726 3 view .LVU796
 4214 0078 0122     		movs	r2, #1
 4215 007a 0221     		movs	r1, #2
 4216 007c 2046     		mov	r0, r4
 4217 007e FFF7FEFF 		bl	ADXL345setInterruptMapping
 4218              	.LVL335:
 4219 0082 D1E7     		b	.L230
 4220              	.L242:
 729:Src/ADXL345.c **** 	else if(activity == 2) {
 4221              		.loc 1 729 3 view .LVU797
 4222 0084 0022     		movs	r2, #0
 4223 0086 0421     		movs	r1, #4
 4224 0088 2046     		mov	r0, r4
 4225 008a FFF7FEFF 		bl	ADXL345setInterruptMapping
 4226              	.LVL336:
 4227 008e D1E7     		b	.L232
 4228              	.L243:
 731:Src/ADXL345.c **** 
 4229              		.loc 1 731 3 view .LVU798
 4230 0090 0122     		movs	r2, #1
 4231 0092 0421     		movs	r1, #4
 4232 0094 2046     		mov	r0, r4
 4233 0096 FFF7FEFF 		bl	ADXL345setInterruptMapping
 4234              	.LVL337:
 4235 009a CBE7     		b	.L232
 4236              	.L244:
 734:Src/ADXL345.c **** 	else if(inactivity == 2) {
 4237              		.loc 1 734 3 view .LVU799
 4238 009c 0022     		movs	r2, #0
 4239 009e 0321     		movs	r1, #3
 4240 00a0 2046     		mov	r0, r4
 4241 00a2 FFF7FEFF 		bl	ADXL345setInterruptMapping
 4242              	.LVL338:
 4243 00a6 C9E7     		b	.L224
 4244              	.L245:
 736:Src/ADXL345.c **** }
 4245              		.loc 1 736 3 view .LVU800
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 100


 4246 00a8 0122     		movs	r2, #1
 4247 00aa 0321     		movs	r1, #3
 4248 00ac 2046     		mov	r0, r4
 4249 00ae FFF7FEFF 		bl	ADXL345setInterruptMapping
 4250              	.LVL339:
 737:Src/ADXL345.c **** 
 4251              		.loc 1 737 1 is_stmt 0 view .LVU801
 4252 00b2 C3E7     		b	.L224
 4253              		.cfi_endproc
 4254              	.LFE222:
 4256              		.section	.text.ADXL345isInterruptEnabled,"ax",%progbits
 4257              		.align	1
 4258              		.global	ADXL345isInterruptEnabled
 4259              		.syntax unified
 4260              		.thumb
 4261              		.thumb_func
 4262              		.fpu fpv4-sp-d16
 4264              	ADXL345isInterruptEnabled:
 4265              	.LVL340:
 4266              	.LFB223:
 739:Src/ADXL345.c **** 	return getRegisterBit(adxl34, ADXL345_INT_ENABLE,interruptBit);
 4267              		.loc 1 739 79 is_stmt 1 view -0
 4268              		.cfi_startproc
 4269              		@ args = 0, pretend = 0, frame = 0
 4270              		@ frame_needed = 0, uses_anonymous_args = 0
 739:Src/ADXL345.c **** 	return getRegisterBit(adxl34, ADXL345_INT_ENABLE,interruptBit);
 4271              		.loc 1 739 79 is_stmt 0 view .LVU803
 4272 0000 08B5     		push	{r3, lr}
 4273              	.LCFI141:
 4274              		.cfi_def_cfa_offset 8
 4275              		.cfi_offset 3, -8
 4276              		.cfi_offset 14, -4
 4277 0002 0A46     		mov	r2, r1
 740:Src/ADXL345.c **** }
 4278              		.loc 1 740 2 is_stmt 1 view .LVU804
 740:Src/ADXL345.c **** }
 4279              		.loc 1 740 9 is_stmt 0 view .LVU805
 4280 0004 2E21     		movs	r1, #46
 4281              	.LVL341:
 740:Src/ADXL345.c **** }
 4282              		.loc 1 740 9 view .LVU806
 4283 0006 FFF7FEFF 		bl	getRegisterBit
 4284              	.LVL342:
 741:Src/ADXL345.c **** 
 4285              		.loc 1 741 1 view .LVU807
 4286 000a 08BD     		pop	{r3, pc}
 4287              		.cfi_endproc
 4288              	.LFE223:
 4290              		.section	.text.ADXL345setInterrupt,"ax",%progbits
 4291              		.align	1
 4292              		.global	ADXL345setInterrupt
 4293              		.syntax unified
 4294              		.thumb
 4295              		.thumb_func
 4296              		.fpu fpv4-sp-d16
 4298              	ADXL345setInterrupt:
 4299              	.LVL343:
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 101


 4300              	.LFB224:
 743:Src/ADXL345.c **** 	setRegisterBit(adxl34, ADXL345_INT_ENABLE, interruptBit, state);
 4301              		.loc 1 743 85 is_stmt 1 view -0
 4302              		.cfi_startproc
 4303              		@ args = 0, pretend = 0, frame = 0
 4304              		@ frame_needed = 0, uses_anonymous_args = 0
 743:Src/ADXL345.c **** 	setRegisterBit(adxl34, ADXL345_INT_ENABLE, interruptBit, state);
 4305              		.loc 1 743 85 is_stmt 0 view .LVU809
 4306 0000 08B5     		push	{r3, lr}
 4307              	.LCFI142:
 4308              		.cfi_def_cfa_offset 8
 4309              		.cfi_offset 3, -8
 4310              		.cfi_offset 14, -4
 4311 0002 1346     		mov	r3, r2
 744:Src/ADXL345.c **** }
 4312              		.loc 1 744 2 is_stmt 1 view .LVU810
 4313 0004 0A46     		mov	r2, r1
 4314              	.LVL344:
 744:Src/ADXL345.c **** }
 4315              		.loc 1 744 2 is_stmt 0 view .LVU811
 4316 0006 2E21     		movs	r1, #46
 4317              	.LVL345:
 744:Src/ADXL345.c **** }
 4318              		.loc 1 744 2 view .LVU812
 4319 0008 FFF7FEFF 		bl	setRegisterBit
 4320              	.LVL346:
 745:Src/ADXL345.c **** 
 4321              		.loc 1 745 1 view .LVU813
 4322 000c 08BD     		pop	{r3, pc}
 4323              		.cfi_endproc
 4324              	.LFE224:
 4326              		.section	.text.ADXL345singleTapINT,"ax",%progbits
 4327              		.align	1
 4328              		.global	ADXL345singleTapINT
 4329              		.syntax unified
 4330              		.thumb
 4331              		.thumb_func
 4332              		.fpu fpv4-sp-d16
 4334              	ADXL345singleTapINT:
 4335              	.LVL347:
 4336              	.LFB225:
 747:Src/ADXL345.c **** 	if(status) {
 4337              		.loc 1 747 64 is_stmt 1 view -0
 4338              		.cfi_startproc
 4339              		@ args = 0, pretend = 0, frame = 0
 4340              		@ frame_needed = 0, uses_anonymous_args = 0
 747:Src/ADXL345.c **** 	if(status) {
 4341              		.loc 1 747 64 is_stmt 0 view .LVU815
 4342 0000 08B5     		push	{r3, lr}
 4343              	.LCFI143:
 4344              		.cfi_def_cfa_offset 8
 4345              		.cfi_offset 3, -8
 4346              		.cfi_offset 14, -4
 748:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_SINGLE_TAP_BIT, 1);
 4347              		.loc 1 748 2 is_stmt 1 view .LVU816
 748:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_SINGLE_TAP_BIT, 1);
 4348              		.loc 1 748 4 is_stmt 0 view .LVU817
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 102


 4349 0002 21B1     		cbz	r1, .L251
 749:Src/ADXL345.c **** 	}
 4350              		.loc 1 749 3 is_stmt 1 view .LVU818
 4351 0004 0122     		movs	r2, #1
 4352 0006 0621     		movs	r1, #6
 4353              	.LVL348:
 749:Src/ADXL345.c **** 	}
 4354              		.loc 1 749 3 is_stmt 0 view .LVU819
 4355 0008 FFF7FEFF 		bl	ADXL345setInterrupt
 4356              	.LVL349:
 4357              	.L250:
 754:Src/ADXL345.c **** void ADXL345doubleTapINT(ADXL345_SPI_I2C* adxl34, bool status) {
 4358              		.loc 1 754 1 view .LVU820
 4359 000c 08BD     		pop	{r3, pc}
 4360              	.LVL350:
 4361              	.L251:
 752:Src/ADXL345.c **** 	}
 4362              		.loc 1 752 3 is_stmt 1 view .LVU821
 4363 000e 0022     		movs	r2, #0
 4364 0010 0621     		movs	r1, #6
 4365              	.LVL351:
 752:Src/ADXL345.c **** 	}
 4366              		.loc 1 752 3 is_stmt 0 view .LVU822
 4367 0012 FFF7FEFF 		bl	ADXL345setInterrupt
 4368              	.LVL352:
 754:Src/ADXL345.c **** void ADXL345doubleTapINT(ADXL345_SPI_I2C* adxl34, bool status) {
 4369              		.loc 1 754 1 view .LVU823
 4370 0016 F9E7     		b	.L250
 4371              		.cfi_endproc
 4372              	.LFE225:
 4374              		.section	.text.ADXL345doubleTapINT,"ax",%progbits
 4375              		.align	1
 4376              		.global	ADXL345doubleTapINT
 4377              		.syntax unified
 4378              		.thumb
 4379              		.thumb_func
 4380              		.fpu fpv4-sp-d16
 4382              	ADXL345doubleTapINT:
 4383              	.LVL353:
 4384              	.LFB226:
 755:Src/ADXL345.c **** 	if(status) {
 4385              		.loc 1 755 64 is_stmt 1 view -0
 4386              		.cfi_startproc
 4387              		@ args = 0, pretend = 0, frame = 0
 4388              		@ frame_needed = 0, uses_anonymous_args = 0
 755:Src/ADXL345.c **** 	if(status) {
 4389              		.loc 1 755 64 is_stmt 0 view .LVU825
 4390 0000 08B5     		push	{r3, lr}
 4391              	.LCFI144:
 4392              		.cfi_def_cfa_offset 8
 4393              		.cfi_offset 3, -8
 4394              		.cfi_offset 14, -4
 756:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_DOUBLE_TAP_BIT, 1);
 4395              		.loc 1 756 2 is_stmt 1 view .LVU826
 756:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_DOUBLE_TAP_BIT, 1);
 4396              		.loc 1 756 4 is_stmt 0 view .LVU827
 4397 0002 21B1     		cbz	r1, .L255
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 103


 757:Src/ADXL345.c **** 	}
 4398              		.loc 1 757 3 is_stmt 1 view .LVU828
 4399 0004 0122     		movs	r2, #1
 4400 0006 0521     		movs	r1, #5
 4401              	.LVL354:
 757:Src/ADXL345.c **** 	}
 4402              		.loc 1 757 3 is_stmt 0 view .LVU829
 4403 0008 FFF7FEFF 		bl	ADXL345setInterrupt
 4404              	.LVL355:
 4405              	.L254:
 762:Src/ADXL345.c **** void ADXL345FreeFallINT(ADXL345_SPI_I2C* adxl34, bool status) {
 4406              		.loc 1 762 1 view .LVU830
 4407 000c 08BD     		pop	{r3, pc}
 4408              	.LVL356:
 4409              	.L255:
 760:Src/ADXL345.c **** 	}
 4410              		.loc 1 760 3 is_stmt 1 view .LVU831
 4411 000e 0022     		movs	r2, #0
 4412 0010 0521     		movs	r1, #5
 4413              	.LVL357:
 760:Src/ADXL345.c **** 	}
 4414              		.loc 1 760 3 is_stmt 0 view .LVU832
 4415 0012 FFF7FEFF 		bl	ADXL345setInterrupt
 4416              	.LVL358:
 762:Src/ADXL345.c **** void ADXL345FreeFallINT(ADXL345_SPI_I2C* adxl34, bool status) {
 4417              		.loc 1 762 1 view .LVU833
 4418 0016 F9E7     		b	.L254
 4419              		.cfi_endproc
 4420              	.LFE226:
 4422              		.section	.text.ADXL345FreeFallINT,"ax",%progbits
 4423              		.align	1
 4424              		.global	ADXL345FreeFallINT
 4425              		.syntax unified
 4426              		.thumb
 4427              		.thumb_func
 4428              		.fpu fpv4-sp-d16
 4430              	ADXL345FreeFallINT:
 4431              	.LVL359:
 4432              	.LFB227:
 763:Src/ADXL345.c **** 	if(status) {
 4433              		.loc 1 763 63 is_stmt 1 view -0
 4434              		.cfi_startproc
 4435              		@ args = 0, pretend = 0, frame = 0
 4436              		@ frame_needed = 0, uses_anonymous_args = 0
 763:Src/ADXL345.c **** 	if(status) {
 4437              		.loc 1 763 63 is_stmt 0 view .LVU835
 4438 0000 08B5     		push	{r3, lr}
 4439              	.LCFI145:
 4440              		.cfi_def_cfa_offset 8
 4441              		.cfi_offset 3, -8
 4442              		.cfi_offset 14, -4
 764:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_FREE_FALL_BIT,  1);
 4443              		.loc 1 764 2 is_stmt 1 view .LVU836
 764:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_FREE_FALL_BIT,  1);
 4444              		.loc 1 764 4 is_stmt 0 view .LVU837
 4445 0002 21B1     		cbz	r1, .L259
 765:Src/ADXL345.c **** 	}
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 104


 4446              		.loc 1 765 3 is_stmt 1 view .LVU838
 4447 0004 0122     		movs	r2, #1
 4448 0006 0221     		movs	r1, #2
 4449              	.LVL360:
 765:Src/ADXL345.c **** 	}
 4450              		.loc 1 765 3 is_stmt 0 view .LVU839
 4451 0008 FFF7FEFF 		bl	ADXL345setInterrupt
 4452              	.LVL361:
 4453              	.L258:
 770:Src/ADXL345.c **** void ADXL345ActivityINT(ADXL345_SPI_I2C* adxl34, bool status) {
 4454              		.loc 1 770 1 view .LVU840
 4455 000c 08BD     		pop	{r3, pc}
 4456              	.LVL362:
 4457              	.L259:
 768:Src/ADXL345.c **** 	}
 4458              		.loc 1 768 3 is_stmt 1 view .LVU841
 4459 000e 0022     		movs	r2, #0
 4460 0010 0221     		movs	r1, #2
 4461              	.LVL363:
 768:Src/ADXL345.c **** 	}
 4462              		.loc 1 768 3 is_stmt 0 view .LVU842
 4463 0012 FFF7FEFF 		bl	ADXL345setInterrupt
 4464              	.LVL364:
 770:Src/ADXL345.c **** void ADXL345ActivityINT(ADXL345_SPI_I2C* adxl34, bool status) {
 4465              		.loc 1 770 1 view .LVU843
 4466 0016 F9E7     		b	.L258
 4467              		.cfi_endproc
 4468              	.LFE227:
 4470              		.section	.text.ADXL345ActivityINT,"ax",%progbits
 4471              		.align	1
 4472              		.global	ADXL345ActivityINT
 4473              		.syntax unified
 4474              		.thumb
 4475              		.thumb_func
 4476              		.fpu fpv4-sp-d16
 4478              	ADXL345ActivityINT:
 4479              	.LVL365:
 4480              	.LFB228:
 771:Src/ADXL345.c **** 	if(status) {
 4481              		.loc 1 771 63 is_stmt 1 view -0
 4482              		.cfi_startproc
 4483              		@ args = 0, pretend = 0, frame = 0
 4484              		@ frame_needed = 0, uses_anonymous_args = 0
 771:Src/ADXL345.c **** 	if(status) {
 4485              		.loc 1 771 63 is_stmt 0 view .LVU845
 4486 0000 08B5     		push	{r3, lr}
 4487              	.LCFI146:
 4488              		.cfi_def_cfa_offset 8
 4489              		.cfi_offset 3, -8
 4490              		.cfi_offset 14, -4
 772:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_ACTIVITY_BIT,   1);
 4491              		.loc 1 772 2 is_stmt 1 view .LVU846
 772:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_ACTIVITY_BIT,   1);
 4492              		.loc 1 772 4 is_stmt 0 view .LVU847
 4493 0002 21B1     		cbz	r1, .L263
 773:Src/ADXL345.c **** 	}
 4494              		.loc 1 773 3 is_stmt 1 view .LVU848
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 105


 4495 0004 0122     		movs	r2, #1
 4496 0006 0421     		movs	r1, #4
 4497              	.LVL366:
 773:Src/ADXL345.c **** 	}
 4498              		.loc 1 773 3 is_stmt 0 view .LVU849
 4499 0008 FFF7FEFF 		bl	ADXL345setInterrupt
 4500              	.LVL367:
 4501              	.L262:
 778:Src/ADXL345.c **** void ADXL345InactivityINT(ADXL345_SPI_I2C* adxl34, bool status) {
 4502              		.loc 1 778 1 view .LVU850
 4503 000c 08BD     		pop	{r3, pc}
 4504              	.LVL368:
 4505              	.L263:
 776:Src/ADXL345.c **** 	}
 4506              		.loc 1 776 3 is_stmt 1 view .LVU851
 4507 000e 0022     		movs	r2, #0
 4508 0010 0421     		movs	r1, #4
 4509              	.LVL369:
 776:Src/ADXL345.c **** 	}
 4510              		.loc 1 776 3 is_stmt 0 view .LVU852
 4511 0012 FFF7FEFF 		bl	ADXL345setInterrupt
 4512              	.LVL370:
 778:Src/ADXL345.c **** void ADXL345InactivityINT(ADXL345_SPI_I2C* adxl34, bool status) {
 4513              		.loc 1 778 1 view .LVU853
 4514 0016 F9E7     		b	.L262
 4515              		.cfi_endproc
 4516              	.LFE228:
 4518              		.section	.text.ADXL345InactivityINT,"ax",%progbits
 4519              		.align	1
 4520              		.global	ADXL345InactivityINT
 4521              		.syntax unified
 4522              		.thumb
 4523              		.thumb_func
 4524              		.fpu fpv4-sp-d16
 4526              	ADXL345InactivityINT:
 4527              	.LVL371:
 4528              	.LFB229:
 779:Src/ADXL345.c **** 	if(status) {
 4529              		.loc 1 779 65 is_stmt 1 view -0
 4530              		.cfi_startproc
 4531              		@ args = 0, pretend = 0, frame = 0
 4532              		@ frame_needed = 0, uses_anonymous_args = 0
 779:Src/ADXL345.c **** 	if(status) {
 4533              		.loc 1 779 65 is_stmt 0 view .LVU855
 4534 0000 08B5     		push	{r3, lr}
 4535              	.LCFI147:
 4536              		.cfi_def_cfa_offset 8
 4537              		.cfi_offset 3, -8
 4538              		.cfi_offset 14, -4
 780:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_INACTIVITY_BIT, 1);
 4539              		.loc 1 780 2 is_stmt 1 view .LVU856
 780:Src/ADXL345.c **** 		ADXL345setInterrupt(adxl34, ADXL345_INT_INACTIVITY_BIT, 1);
 4540              		.loc 1 780 4 is_stmt 0 view .LVU857
 4541 0002 21B1     		cbz	r1, .L267
 781:Src/ADXL345.c **** 	}
 4542              		.loc 1 781 3 is_stmt 1 view .LVU858
 4543 0004 0122     		movs	r2, #1
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 106


 4544 0006 0321     		movs	r1, #3
 4545              	.LVL372:
 781:Src/ADXL345.c **** 	}
 4546              		.loc 1 781 3 is_stmt 0 view .LVU859
 4547 0008 FFF7FEFF 		bl	ADXL345setInterrupt
 4548              	.LVL373:
 4549              	.L266:
 786:Src/ADXL345.c **** 
 4550              		.loc 1 786 1 view .LVU860
 4551 000c 08BD     		pop	{r3, pc}
 4552              	.LVL374:
 4553              	.L267:
 784:Src/ADXL345.c **** 	}
 4554              		.loc 1 784 3 is_stmt 1 view .LVU861
 4555 000e 0022     		movs	r2, #0
 4556 0010 0321     		movs	r1, #3
 4557              	.LVL375:
 784:Src/ADXL345.c **** 	}
 4558              		.loc 1 784 3 is_stmt 0 view .LVU862
 4559 0012 FFF7FEFF 		bl	ADXL345setInterrupt
 4560              	.LVL376:
 786:Src/ADXL345.c **** 
 4561              		.loc 1 786 1 view .LVU863
 4562 0016 F9E7     		b	.L266
 4563              		.cfi_endproc
 4564              	.LFE229:
 4566              		.text
 4567              	.Letext0:
 4568              		.file 2 "/Users/maciejtonderski/opt/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machi
 4569              		.file 3 "/Users/maciejtonderski/opt/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_
 4570              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 4571              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 4572              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 4573              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 4574              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 4575              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 4576              		.file 10 "Inc/ADXL345.h"
 4577              		.file 11 "/Users/maciejtonderski/opt/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/math
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 107


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ADXL345.c
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:18     .text.constrain:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:25     .text.constrain:0000000000000000 constrain
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:65     .text.writeToI2C:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:71     .text.writeToI2C:0000000000000000 writeToI2C
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:115    .text.writeToSPI:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:121    .text.writeToSPI:0000000000000000 writeToSPI
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:186    .text.writeTo:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:192    .text.writeTo:0000000000000000 writeTo
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:227    .text.readFromI2C:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:233    .text.readFromI2C:0000000000000000 readFromI2C
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:319    .text.readFromSPI:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:325    .text.readFromSPI:0000000000000000 readFromSPI
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:402    .text.readFrom:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:408    .text.readFrom:0000000000000000 readFrom
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:443    .text.getRegisterBit:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:449    .text.getRegisterBit:0000000000000000 getRegisterBit
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:490    .text.setRegisterBit:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:496    .text.setRegisterBit:0000000000000000 setRegisterBit
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:575    .text.ADXL345_I2C:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:582    .text.ADXL345_I2C:0000000000000000 ADXL345_I2C
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:659    .text.ADXL345_I2C:0000000000000044 $d
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:667    .text.ADXL345_SPI:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:674    .text.ADXL345_SPI:0000000000000000 ADXL345_SPI
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:735    .text.ADXL345_SPI:0000000000000040 $d
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:742    .text.ADXL345powerOn:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:749    .text.ADXL345powerOn:0000000000000000 ADXL345powerOn
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:787    .text.ADXL345readAccel_x_y_z:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:794    .text.ADXL345readAccel_x_y_z:0000000000000000 ADXL345readAccel_x_y_z
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:864    .text.ADXL345readAccel_xyz:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:871    .text.ADXL345readAccel_xyz:0000000000000000 ADXL345readAccel_xyz
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:896    .text.ADXL345get_Gxyz:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:903    .text.ADXL345get_Gxyz:0000000000000000 ADXL345get_Gxyz
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:973    .text.ADXL345getRangeSetting:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:980    .text.ADXL345getRangeSetting:0000000000000000 ADXL345getRangeSetting
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1023   .text.ADXL345setRangeSetting:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1030   .text.ADXL345setRangeSetting:0000000000000000 ADXL345setRangeSetting
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1113   .text.ADXL345getSelfTestBit:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1120   .text.ADXL345getSelfTestBit:0000000000000000 ADXL345getSelfTestBit
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1145   .text.ADXL345setSelfTestBit:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1152   .text.ADXL345setSelfTestBit:0000000000000000 ADXL345setSelfTestBit
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1179   .text.ADXL345getSpiBit:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1186   .text.ADXL345getSpiBit:0000000000000000 ADXL345getSpiBit
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1211   .text.ADXL345setSpiBit:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1218   .text.ADXL345setSpiBit:0000000000000000 ADXL345setSpiBit
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1245   .text.ADXL345getInterruptLevelBit:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1252   .text.ADXL345getInterruptLevelBit:0000000000000000 ADXL345getInterruptLevelBit
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1277   .text.ADXL345setInterruptLevelBit:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1284   .text.ADXL345setInterruptLevelBit:0000000000000000 ADXL345setInterruptLevelBit
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1311   .text.ADXL345getFullResBit:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1318   .text.ADXL345getFullResBit:0000000000000000 ADXL345getFullResBit
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1343   .text.ADXL345setFullResBit:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1350   .text.ADXL345setFullResBit:0000000000000000 ADXL345setFullResBit
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1377   .text.ADXL345getJustifyBit:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1384   .text.ADXL345getJustifyBit:0000000000000000 ADXL345getJustifyBit
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1409   .text.ADXL345setJustifyBit:0000000000000000 $t
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 108


/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1416   .text.ADXL345setJustifyBit:0000000000000000 ADXL345setJustifyBit
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1443   .text.ADXL345setTapThreshold:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1450   .text.ADXL345setTapThreshold:0000000000000000 ADXL345setTapThreshold
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1486   .text.ADXL345getTapThreshold:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1493   .text.ADXL345getTapThreshold:0000000000000000 ADXL345getTapThreshold
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1527   .text.ADXL345setAxisGains:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1534   .text.ADXL345setAxisGains:0000000000000000 ADXL345setAxisGains
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1573   .text.ADXL345getAxisGains:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1580   .text.ADXL345getAxisGains:0000000000000000 ADXL345getAxisGains
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1620   .text.ADXL345setAxisOffset:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1627   .text.ADXL345setAxisOffset:0000000000000000 ADXL345setAxisOffset
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1673   .text.ADXL345getAxisOffset:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1680   .text.ADXL345getAxisOffset:0000000000000000 ADXL345getAxisOffset
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1756   .text.ADXL345setTapDuration:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1763   .text.ADXL345setTapDuration:0000000000000000 ADXL345setTapDuration
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1799   .text.ADXL345getTapDuration:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1806   .text.ADXL345getTapDuration:0000000000000000 ADXL345getTapDuration
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1840   .text.ADXL345setDoubleTapLatency:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1847   .text.ADXL345setDoubleTapLatency:0000000000000000 ADXL345setDoubleTapLatency
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1875   .text.ADXL345getDoubleTapLatency:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1882   .text.ADXL345getDoubleTapLatency:0000000000000000 ADXL345getDoubleTapLatency
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1916   .text.ADXL345setDoubleTapWindow:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1923   .text.ADXL345setDoubleTapWindow:0000000000000000 ADXL345setDoubleTapWindow
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1959   .text.ADXL345getDoubleTapWindow:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:1966   .text.ADXL345getDoubleTapWindow:0000000000000000 ADXL345getDoubleTapWindow
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2000   .text.ADXL345setActivityThreshold:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2007   .text.ADXL345setActivityThreshold:0000000000000000 ADXL345setActivityThreshold
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2043   .text.ADXL345getActivityThreshold:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2050   .text.ADXL345getActivityThreshold:0000000000000000 ADXL345getActivityThreshold
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2084   .text.ADXL345setInactivityThreshold:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2091   .text.ADXL345setInactivityThreshold:0000000000000000 ADXL345setInactivityThreshold
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2127   .text.ADXL345getInactivityThreshold:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2134   .text.ADXL345getInactivityThreshold:0000000000000000 ADXL345getInactivityThreshold
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2168   .text.ADXL345setTimeInactivity:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2175   .text.ADXL345setTimeInactivity:0000000000000000 ADXL345setTimeInactivity
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2211   .text.ADXL345getTimeInactivity:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2218   .text.ADXL345getTimeInactivity:0000000000000000 ADXL345getTimeInactivity
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2252   .text.ADXL345setFreeFallThreshold:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2259   .text.ADXL345setFreeFallThreshold:0000000000000000 ADXL345setFreeFallThreshold
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2295   .text.ADXL345getFreeFallThreshold:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2302   .text.ADXL345getFreeFallThreshold:0000000000000000 ADXL345getFreeFallThreshold
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2336   .text.ADXL345setFreeFallDuration:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2343   .text.ADXL345setFreeFallDuration:0000000000000000 ADXL345setFreeFallDuration
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2379   .text.ADXL345getFreeFallDuration:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2386   .text.ADXL345getFreeFallDuration:0000000000000000 ADXL345getFreeFallDuration
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2420   .text.ADXL345isActivityXEnabled:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2427   .text.ADXL345isActivityXEnabled:0000000000000000 ADXL345isActivityXEnabled
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2452   .text.ADXL345isActivityYEnabled:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2459   .text.ADXL345isActivityYEnabled:0000000000000000 ADXL345isActivityYEnabled
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2484   .text.ADXL345isActivityZEnabled:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2491   .text.ADXL345isActivityZEnabled:0000000000000000 ADXL345isActivityZEnabled
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2516   .text.ADXL345isInactivityXEnabled:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2523   .text.ADXL345isInactivityXEnabled:0000000000000000 ADXL345isInactivityXEnabled
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2548   .text.ADXL345isInactivityYEnabled:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2555   .text.ADXL345isInactivityYEnabled:0000000000000000 ADXL345isInactivityYEnabled
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2580   .text.ADXL345isInactivityZEnabled:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2587   .text.ADXL345isInactivityZEnabled:0000000000000000 ADXL345isInactivityZEnabled
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 109


/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2612   .text.ADXL345setActivityX:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2619   .text.ADXL345setActivityX:0000000000000000 ADXL345setActivityX
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2646   .text.ADXL345setActivityY:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2653   .text.ADXL345setActivityY:0000000000000000 ADXL345setActivityY
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2680   .text.ADXL345setActivityZ:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2687   .text.ADXL345setActivityZ:0000000000000000 ADXL345setActivityZ
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2714   .text.ADXL345setActivityXYZ:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2721   .text.ADXL345setActivityXYZ:0000000000000000 ADXL345setActivityXYZ
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2759   .text.ADXL345setInactivityX:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2766   .text.ADXL345setInactivityX:0000000000000000 ADXL345setInactivityX
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2793   .text.ADXL345setInactivityY:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2800   .text.ADXL345setInactivityY:0000000000000000 ADXL345setInactivityY
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2827   .text.ADXL345setInactivityZ:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2834   .text.ADXL345setInactivityZ:0000000000000000 ADXL345setInactivityZ
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2861   .text.ADXL345setInactivityXYZ:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2868   .text.ADXL345setInactivityXYZ:0000000000000000 ADXL345setInactivityXYZ
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2906   .text.ADXL345isActivityAc:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2913   .text.ADXL345isActivityAc:0000000000000000 ADXL345isActivityAc
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2938   .text.ADXL345isInactivityAc:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2945   .text.ADXL345isInactivityAc:0000000000000000 ADXL345isInactivityAc
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2970   .text.ADXL345setActivityAc:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:2977   .text.ADXL345setActivityAc:0000000000000000 ADXL345setActivityAc
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3004   .text.ADXL345setInactivityAc:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3011   .text.ADXL345setInactivityAc:0000000000000000 ADXL345setInactivityAc
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3038   .text.ADXL345getSuppressBit:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3045   .text.ADXL345getSuppressBit:0000000000000000 ADXL345getSuppressBit
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3070   .text.ADXL345setSuppressBit:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3077   .text.ADXL345setSuppressBit:0000000000000000 ADXL345setSuppressBit
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3104   .text.ADXL345isTapDetectionOnX:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3111   .text.ADXL345isTapDetectionOnX:0000000000000000 ADXL345isTapDetectionOnX
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3136   .text.ADXL345setTapDetectionOnX:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3143   .text.ADXL345setTapDetectionOnX:0000000000000000 ADXL345setTapDetectionOnX
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3170   .text.ADXL345isTapDetectionOnY:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3177   .text.ADXL345isTapDetectionOnY:0000000000000000 ADXL345isTapDetectionOnY
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3202   .text.ADXL345setTapDetectionOnY:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3209   .text.ADXL345setTapDetectionOnY:0000000000000000 ADXL345setTapDetectionOnY
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3236   .text.ADXL345isTapDetectionOnZ:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3243   .text.ADXL345isTapDetectionOnZ:0000000000000000 ADXL345isTapDetectionOnZ
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3268   .text.ADXL345setTapDetectionOnZ:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3275   .text.ADXL345setTapDetectionOnZ:0000000000000000 ADXL345setTapDetectionOnZ
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3302   .text.ADXL345setTapDetectionOnXYZ:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3309   .text.ADXL345setTapDetectionOnXYZ:0000000000000000 ADXL345setTapDetectionOnXYZ
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3347   .text.ADXL345isActivitySourceOnX:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3354   .text.ADXL345isActivitySourceOnX:0000000000000000 ADXL345isActivitySourceOnX
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3379   .text.ADXL345isActivitySourceOnY:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3386   .text.ADXL345isActivitySourceOnY:0000000000000000 ADXL345isActivitySourceOnY
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3411   .text.ADXL345isActivitySourceOnZ:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3418   .text.ADXL345isActivitySourceOnZ:0000000000000000 ADXL345isActivitySourceOnZ
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3443   .text.ADXL345isTapSourceOnX:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3450   .text.ADXL345isTapSourceOnX:0000000000000000 ADXL345isTapSourceOnX
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3475   .text.ADXL345isTapSourceOnY:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3482   .text.ADXL345isTapSourceOnY:0000000000000000 ADXL345isTapSourceOnY
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3507   .text.ADXL345isTapSourceOnZ:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3514   .text.ADXL345isTapSourceOnZ:0000000000000000 ADXL345isTapSourceOnZ
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3539   .text.ADXL345isAsleep:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3546   .text.ADXL345isAsleep:0000000000000000 ADXL345isAsleep
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3571   .text.ADXL345isLowPower:0000000000000000 $t
ARM GAS  /var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s 			page 110


/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3578   .text.ADXL345isLowPower:0000000000000000 ADXL345isLowPower
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3603   .text.ADXL345setLowPower:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3610   .text.ADXL345setLowPower:0000000000000000 ADXL345setLowPower
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3639   .text.ADXL345getRate:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3646   .text.ADXL345getRate:0000000000000000 ADXL345getRate
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3698   .text.ADXL345getRate:0000000000000048 $d
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3708   .text.ADXL345setRate:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3715   .text.ADXL345setRate:0000000000000000 ADXL345setRate
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3817   .text.ADXL345setRate:0000000000000058 $d
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3822   .text.ADXL345set_bw:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3829   .text.ADXL345set_bw:0000000000000000 ADXL345set_bw
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3873   .text.ADXL345get_bw_code:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3880   .text.ADXL345get_bw_code:0000000000000000 ADXL345get_bw_code
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3914   .text.ADXL345triggered:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3921   .text.ADXL345triggered:0000000000000000 ADXL345triggered
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3940   .text.ADXL345getInterruptSource:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3947   .text.ADXL345getInterruptSource:0000000000000000 ADXL345getInterruptSource
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3981   .text.ADXL345getInterruptSource_interrupt:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:3988   .text.ADXL345getInterruptSource_interrupt:0000000000000000 ADXL345getInterruptSource_interrupt
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4015   .text.ADXL345getInterruptMapping:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4022   .text.ADXL345getInterruptMapping:0000000000000000 ADXL345getInterruptMapping
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4049   .text.ADXL345setInterruptMapping:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4056   .text.ADXL345setInterruptMapping:0000000000000000 ADXL345setInterruptMapping
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4085   .text.ADXL345setImportantInterruptMapping:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4092   .text.ADXL345setImportantInterruptMapping:0000000000000000 ADXL345setImportantInterruptMapping
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4257   .text.ADXL345isInterruptEnabled:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4264   .text.ADXL345isInterruptEnabled:0000000000000000 ADXL345isInterruptEnabled
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4291   .text.ADXL345setInterrupt:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4298   .text.ADXL345setInterrupt:0000000000000000 ADXL345setInterrupt
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4327   .text.ADXL345singleTapINT:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4334   .text.ADXL345singleTapINT:0000000000000000 ADXL345singleTapINT
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4375   .text.ADXL345doubleTapINT:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4382   .text.ADXL345doubleTapINT:0000000000000000 ADXL345doubleTapINT
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4423   .text.ADXL345FreeFallINT:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4430   .text.ADXL345FreeFallINT:0000000000000000 ADXL345FreeFallINT
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4471   .text.ADXL345ActivityINT:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4478   .text.ADXL345ActivityINT:0000000000000000 ADXL345ActivityINT
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4519   .text.ADXL345InactivityINT:0000000000000000 $t
/var/folders/h5/t6jc6jh127n_294bflj9bdw40000gn/T//ccvqVxsR.s:4526   .text.ADXL345InactivityINT:0000000000000000 ADXL345InactivityINT

UNDEFINED SYMBOLS
HAL_I2C_Master_Transmit
HAL_GPIO_WritePin
HAL_SPI_Transmit
HAL_I2C_Master_Receive
HAL_SPI_Receive
HAL_I2C_IsDeviceReady
__aeabi_i2d
__aeabi_dmul
pow
__aeabi_f2d
__aeabi_ddiv
__aeabi_d2iz
